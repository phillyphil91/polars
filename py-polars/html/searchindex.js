Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/pivot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg_list.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.pivot.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.count.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.first.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.last.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.max.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.mean.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.median.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.min.rst", "reference/dataframe/api/polars.internals.dataframe.pivot.PivotOps.sum.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/pivot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.agg_list", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.pivot", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "polars.internals.dataframe.pivot.PivotOps.count", "polars.internals.dataframe.pivot.PivotOps.first", "polars.internals.dataframe.pivot.PivotOps.last", "polars.internals.dataframe.pivot.PivotOps.max", "polars.internals.dataframe.pivot.PivotOps.mean", "polars.internals.dataframe.pivot.PivotOps.median", "polars.internals.dataframe.pivot.PivotOps.min", "polars.internals.dataframe.pivot.PivotOps.sum", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Pivot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 86, 101, 114, 117, 209, 211, 238, 241, 251, 533, 607], "refer": [0, 88, 89, 91, 206, 238, 404, 460, 533, 783, 844, 881], "input": [0, 54, 88, 89, 91, 381, 389, 483, 501, 508, 509, 512, 533, 542, 765, 881], "output": [0, 24, 26, 27, 64, 91, 108, 117, 139, 140, 159, 164, 167, 202, 238, 247, 251, 383, 384, 388, 478, 483, 508, 519, 533, 542, 563, 564, 573, 578, 605, 607, 613, 622, 869, 881], "seri": [0, 1, 19, 45, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 81, 86, 107, 108, 110, 114, 117, 123, 131, 133, 135, 136, 141, 144, 145, 147, 149, 155, 156, 160, 172, 173, 179, 187, 191, 196, 197, 206, 207, 210, 238, 250, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 271, 272, 279, 280, 283, 284, 287, 293, 294, 298, 299, 311, 312, 314, 317, 320, 322, 324, 327, 331, 333, 336, 337, 340, 341, 349, 350, 355, 356, 360, 362, 364, 365, 366, 367, 368, 370, 371, 372, 382, 383, 400, 404, 405, 406, 407, 408, 410, 423, 426, 429, 430, 437, 454, 460, 464, 469, 470, 471, 472, 477, 483, 484, 486, 487, 488, 489, 490, 491, 493, 494, 495, 501, 502, 505, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 520, 521, 522, 523, 524, 533, 542, 559, 587, 601, 602, 613, 873, 875, 877, 880, 884, 885, 886], "datafram": [0, 1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 43, 45, 54, 55, 56, 57, 58, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 102, 103, 104, 106, 108, 109, 236, 237, 241, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 332, 333, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 533, 542, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 613, 621, 641, 657, 666, 681, 827, 829, 840, 841, 851, 860, 861, 869, 881], "lazyfram": [0, 1, 42, 44, 54, 55, 56, 57, 58, 61, 62, 99, 100, 101, 102, 103, 104, 106, 110, 153, 166, 238, 284, 353, 533, 542, 612, 887], "express": [0, 59, 61, 64, 108, 110, 111, 117, 129, 131, 138, 162, 167, 175, 185, 207, 209, 211, 238, 247, 248, 250, 251, 268, 284, 295, 296, 297, 300, 306, 308, 328, 347, 353, 360, 362, 366, 369, 374, 377, 382, 383, 384, 388, 389, 400, 401, 402, 407, 421, 422, 423, 425, 432, 445, 460, 466, 469, 475, 477, 480, 484, 487, 488, 492, 493, 494, 495, 499, 500, 501, 502, 503, 507, 508, 509, 512, 514, 516, 517, 518, 519, 521, 522, 525, 532, 542, 548, 556, 559, 581, 589, 590, 592, 601, 602, 603, 606, 607, 613, 641, 670, 671, 672, 680, 708, 801, 808, 829, 881], "extend": [0, 238, 350, 533, 542, 621, 731, 881], "function": [0, 55, 56, 57, 58, 59, 63, 88, 89, 91, 99, 109, 117, 126, 133, 158, 165, 166, 167, 198, 201, 211, 221, 238, 248, 251, 284, 306, 331, 344, 345, 346, 383, 384, 398, 410, 411, 412, 413, 414, 415, 417, 418, 419, 431, 473, 481, 483, 493, 494, 501, 502, 508, 516, 533, 542, 573, 577, 580, 607, 613, 622, 657, 680, 711, 725, 726, 727, 728, 789, 803, 804, 810, 815, 881], "data": [0, 1, 12, 15, 29, 45, 54, 55, 57, 62, 68, 69, 74, 75, 77, 78, 79, 80, 81, 82, 88, 89, 91, 92, 93, 96, 97, 98, 99, 106, 107, 109, 110, 111, 118, 119, 128, 137, 139, 151, 153, 166, 170, 176, 177, 183, 190, 194, 195, 236, 238, 292, 311, 332, 340, 361, 368, 370, 404, 420, 421, 431, 473, 475, 487, 519, 533, 542, 546, 547, 556, 563, 580, 606, 613, 621, 664, 669, 673, 685, 687, 720, 723, 783, 799, 800, 810, 815, 862, 863, 865, 867, 871, 880, 881], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 61, 64, 68, 77, 79, 82, 86, 88, 89, 90, 91, 93, 97, 99, 100, 105, 106, 107, 110, 113, 114, 117, 127, 133, 137, 139, 140, 141, 190, 194, 195, 197, 199, 200, 238, 251, 272, 284, 292, 293, 295, 296, 297, 312, 314, 317, 320, 322, 324, 327, 333, 341, 347, 358, 362, 364, 366, 367, 407, 455, 456, 457, 460, 473, 483, 488, 496, 497, 498, 500, 501, 507, 508, 533, 542, 548, 554, 556, 563, 564, 581, 590, 597, 598, 613, 645, 657, 664, 666, 670, 671, 672, 688, 690, 693, 699, 701, 704, 707, 713, 721, 723, 739, 741, 810, 839, 840, 841, 862, 863, 865, 872, 881], "config": [0, 207, 238, 542, 602, 613], "except": [0, 152, 238, 542, 569, 613, 863, 871, 881], "test": [0, 91, 542, 565, 572, 613], "util": [0, 542, 556, 613], "sql": [0, 42, 98, 151, 238, 542], "These": [1, 532], "allow": [1, 45, 68, 99, 101, 102, 103, 104, 110, 111, 152, 153, 177, 238, 328, 406, 421, 460, 533, 568, 569, 573, 603, 613, 708, 785, 800, 802, 844, 881], "you": [1, 28, 54, 78, 86, 88, 89, 91, 96, 99, 114, 117, 124, 128, 152, 162, 194, 198, 211, 221, 238, 251, 268, 295, 296, 297, 347, 353, 383, 406, 411, 412, 413, 414, 415, 417, 418, 419, 446, 449, 484, 493, 502, 533, 548, 553, 565, 569, 572, 590, 607, 613, 621, 641, 670, 671, 672, 785, 830, 833, 863, 871, 881], "regist": [1, 55, 56, 57, 58], "custom": [1, 55, 56, 57, 58, 117, 211, 238, 251, 284, 383, 410, 483, 508, 533, 573, 607, 613, 622, 657, 789, 881], "dedic": 1, "namespac": [1, 237, 241, 532, 542, 612], "underli": [1, 65, 72, 96, 110, 111, 128, 190, 238, 311, 312, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 340, 342, 406, 420, 533, 621, 687, 688, 689, 692, 694, 698, 700, 703, 705, 706, 709, 710, 712, 718, 719, 720, 722, 785, 799, 810, 858, 859, 863, 881], "polar": [1, 238, 532, 533, 542, 613, 881, 887, 888], "class": [1, 2, 3, 4, 6, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 81, 108, 109, 194, 195, 238, 533, 542, 613, 862, 863, 881, 887], "without": [1, 63, 90, 93, 97, 100, 101, 201, 238, 306, 331, 411, 412, 413, 414, 415, 417, 418, 419, 518, 533, 680, 685, 711, 881], "requir": [1, 28, 81, 106, 107, 164, 165, 195, 199, 207, 238, 344, 345, 346, 426, 460, 475, 533, 597, 602, 613, 726, 727, 728, 809, 844, 863, 867, 881], "subclass": [1, 238], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 59, 62, 64, 124, 127, 129, 131, 138, 139, 140, 151, 162, 167, 175, 179, 185, 206, 207, 209, 238, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 533, 534, 537, 538, 539, 553, 555, 557, 559, 562, 563, 564, 568, 582, 587, 589, 592, 601, 602, 606, 613, 641, 680, 732, 808, 854, 881], "ar": [1, 14, 28, 45, 64, 70, 76, 77, 79, 81, 82, 88, 89, 90, 91, 96, 98, 99, 100, 101, 102, 103, 106, 107, 109, 110, 113, 117, 124, 126, 129, 133, 139, 140, 152, 153, 158, 159, 165, 175, 191, 195, 202, 238, 248, 284, 304, 305, 309, 310, 331, 336, 343, 364, 366, 367, 368, 370, 371, 372, 375, 404, 407, 408, 410, 416, 431, 433, 434, 446, 449, 467, 484, 485, 490, 519, 526, 527, 529, 532, 533, 534, 537, 538, 539, 542, 553, 557, 563, 564, 565, 569, 572, 573, 577, 578, 581, 603, 613, 619, 621, 657, 678, 679, 711, 716, 724, 725, 735, 738, 747, 750, 751, 752, 753, 754, 755, 761, 783, 787, 789, 795, 815, 830, 833, 852, 863, 871, 873, 875, 877, 881, 884, 885, 886], "all": [1, 6, 11, 14, 19, 22, 29, 61, 62, 64, 77, 79, 81, 82, 83, 88, 89, 91, 92, 96, 99, 102, 103, 108, 109, 111, 124, 130, 147, 149, 153, 158, 161, 162, 170, 184, 193, 202, 238, 249, 250, 268, 272, 282, 284, 286, 300, 306, 347, 357, 358, 361, 364, 367, 371, 372, 374, 377, 379, 383, 384, 393, 397, 401, 404, 409, 426, 432, 439, 444, 445, 450, 451, 466, 478, 488, 500, 521, 533, 542, 548, 551, 553, 556, 558, 573, 577, 581, 590, 591, 603, 613, 641, 645, 655, 680, 745, 758, 783, 816, 823, 828, 829, 834, 835, 881], "support": [1, 28, 62, 77, 90, 91, 98, 100, 108, 111, 184, 207, 238, 280, 432, 454, 533, 591, 602, 613, 653, 816, 838, 881], "target": [1, 60, 443, 460, 827, 844], "thi": [1, 6, 22, 24, 26, 28, 44, 45, 54, 59, 61, 62, 63, 77, 78, 79, 80, 81, 82, 85, 86, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 117, 124, 126, 128, 133, 138, 139, 140, 141, 145, 147, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 168, 169, 170, 177, 179, 182, 184, 186, 187, 190, 192, 194, 195, 198, 199, 201, 202, 203, 204, 208, 209, 211, 237, 238, 241, 248, 250, 251, 260, 262, 268, 272, 284, 293, 300, 306, 311, 312, 318, 328, 331, 337, 340, 347, 349, 350, 355, 360, 361, 362, 366, 377, 382, 383, 388, 389, 395, 396, 398, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 423, 425, 426, 427, 432, 433, 434, 447, 452, 460, 463, 464, 474, 475, 476, 477, 478, 481, 484, 489, 491, 493, 495, 500, 501, 502, 518, 522, 533, 542, 543, 545, 548, 553, 556, 562, 563, 564, 566, 569, 573, 577, 578, 581, 587, 589, 590, 591, 597, 603, 604, 605, 607, 612, 613, 621, 622, 631, 634, 641, 645, 666, 680, 685, 687, 688, 694, 708, 711, 717, 720, 723, 725, 730, 731, 737, 738, 743, 744, 749, 750, 756, 759, 762, 766, 767, 768, 769, 771, 772, 773, 774, 775, 777, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 793, 796, 797, 798, 800, 803, 804, 805, 806, 808, 809, 810, 811, 816, 817, 819, 831, 836, 844, 847, 848, 851, 852, 859, 861, 862, 863, 864, 866, 867, 870, 871, 881], "featur": [1, 28, 45, 60, 238], "i": [1, 11, 24, 26, 27, 45, 54, 60, 61, 62, 63, 64, 67, 68, 70, 71, 77, 80, 81, 82, 85, 88, 89, 90, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 117, 124, 126, 134, 137, 138, 139, 140, 141, 145, 146, 148, 150, 152, 153, 156, 158, 159, 162, 164, 166, 167, 175, 177, 184, 187, 190, 192, 198, 199, 201, 202, 207, 209, 211, 221, 237, 238, 241, 248, 249, 250, 251, 268, 270, 280, 284, 306, 328, 331, 336, 344, 345, 346, 349, 355, 358, 360, 362, 375, 383, 389, 398, 404, 406, 408, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 427, 431, 432, 433, 434, 439, 443, 444, 445, 447, 452, 454, 457, 460, 463, 478, 484, 485, 489, 491, 493, 494, 495, 502, 507, 518, 522, 533, 548, 553, 556, 562, 563, 564, 567, 569, 571, 573, 577, 578, 581, 590, 591, 597, 602, 605, 607, 613, 620, 621, 622, 641, 643, 653, 680, 708, 711, 716, 725, 726, 727, 728, 730, 738, 739, 742, 743, 744, 746, 756, 757, 759, 760, 761, 783, 785, 787, 800, 801, 802, 803, 804, 805, 815, 816, 819, 823, 827, 828, 829, 831, 836, 838, 841, 847, 859, 863, 869, 870, 871, 881], "primarili": 1, "intend": 1, "us": [1, 8, 9, 11, 14, 19, 20, 24, 28, 45, 54, 64, 78, 80, 82, 84, 86, 88, 89, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 108, 109, 110, 111, 114, 117, 129, 130, 133, 139, 140, 152, 156, 158, 161, 162, 166, 167, 175, 177, 185, 187, 198, 199, 202, 209, 211, 221, 238, 246, 251, 268, 284, 288, 289, 293, 306, 309, 310, 340, 343, 344, 345, 346, 347, 352, 353, 361, 375, 383, 387, 404, 406, 408, 411, 412, 413, 414, 415, 417, 418, 419, 421, 423, 426, 427, 431, 433, 434, 440, 441, 442, 446, 447, 452, 454, 456, 458, 460, 483, 484, 485, 488, 490, 493, 495, 502, 507, 509, 512, 517, 522, 532, 533, 548, 551, 557, 558, 562, 563, 564, 565, 569, 571, 572, 577, 592, 597, 601, 607, 613, 622, 641, 657, 660, 661, 666, 680, 720, 724, 726, 727, 728, 732, 733, 738, 761, 783, 785, 787, 800, 803, 804, 805, 809, 815, 819, 824, 825, 830, 831, 836, 838, 840, 844, 854, 862, 863, 870, 871, 881], "librari": [1, 65, 72, 383, 533, 888], "author": 1, "domain": 1, "specif": [1, 22, 90, 98, 100, 110, 410, 460, 521, 533, 789, 844, 881], "capabl": 1, "which": [1, 14, 23, 24, 25, 26, 27, 28, 54, 55, 56, 57, 58, 88, 89, 90, 91, 98, 99, 100, 124, 128, 185, 199, 238, 248, 284, 364, 367, 368, 370, 371, 372, 389, 533, 553, 597, 605, 613, 621, 747, 751, 752, 753, 754, 755, 803, 881], "mai": [1, 28, 62, 63, 77, 88, 90, 92, 100, 101, 102, 117, 126, 128, 152, 181, 182, 201, 238, 279, 284, 306, 311, 318, 331, 347, 350, 411, 412, 413, 414, 415, 417, 418, 419, 424, 425, 460, 493, 494, 502, 516, 533, 569, 573, 588, 589, 604, 607, 613, 621, 652, 680, 687, 694, 711, 725, 731, 807, 808, 844, 881], "exist": [1, 90, 100, 110, 613], "belong": [1, 139, 238, 563, 613], "core": [1, 81, 195, 238], "cannot": [1, 88, 89, 117, 177, 211, 238, 251, 421, 456, 533, 590, 607, 613, 800, 840, 881], "overrid": [1, 78, 108, 109, 111, 238], "str": [1, 5, 7, 10, 11, 14, 15, 22, 23, 24, 25, 26, 27, 28, 31, 39, 42, 43, 44, 45, 46, 54, 55, 56, 57, 58, 60, 63, 64, 78, 79, 80, 82, 83, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 120, 121, 122, 123, 124, 125, 126, 127, 131, 132, 133, 135, 137, 138, 139, 140, 142, 144, 151, 152, 154, 155, 156, 157, 158, 159, 160, 162, 164, 165, 167, 169, 171, 172, 173, 174, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 246, 247, 251, 265, 266, 270, 271, 272, 280, 283, 284, 308, 312, 328, 331, 334, 336, 337, 341, 347, 350, 351, 353, 355, 360, 366, 369, 384, 388, 390, 398, 401, 407, 409, 411, 412, 413, 414, 415, 417, 418, 419, 425, 426, 433, 434, 464, 465, 466, 469, 480, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 533, 537, 548, 549, 550, 551, 552, 553, 555, 556, 559, 561, 562, 563, 564, 566, 568, 569, 577, 578, 581, 583, 584, 585, 587, 589, 590, 591, 592, 597, 598, 602, 603, 604, 605, 607, 608, 609, 613, 618, 639, 645, 657, 664, 681, 688, 708, 711, 714, 716, 717, 721, 731, 733, 735, 766, 769, 773, 774, 775, 786, 803, 804, 848, 850, 861, 881, 884], "dt": [1, 54, 140, 238, 539, 564, 613, 886], "attempt": [1, 194, 238, 863, 881], "do": [1, 54, 61, 99, 128, 152, 190, 198, 201, 221, 238, 268, 306, 481, 533, 548, 569, 573, 581, 590, 613, 621, 641, 680, 863, 871, 881], "so": [1, 45, 99, 100, 137, 139, 140, 167, 238, 270, 485, 563, 564, 613, 643], "rais": [1, 10, 14, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 106, 107, 175, 238, 388, 400, 460, 507, 533, 844, 863, 871, 881], "an": [1, 55, 57, 58, 61, 64, 65, 68, 69, 72, 77, 88, 89, 91, 96, 98, 99, 102, 109, 110, 111, 117, 118, 119, 126, 129, 131, 133, 139, 140, 152, 162, 164, 167, 173, 175, 190, 194, 201, 211, 221, 238, 247, 248, 251, 268, 270, 284, 292, 295, 296, 297, 301, 302, 303, 304, 305, 306, 340, 353, 374, 383, 384, 389, 402, 410, 411, 412, 413, 414, 415, 417, 418, 419, 444, 453, 459, 460, 469, 484, 488, 499, 507, 516, 518, 533, 542, 546, 547, 548, 551, 556, 559, 563, 564, 569, 573, 581, 590, 592, 603, 607, 613, 641, 643, 664, 669, 670, 671, 672, 673, 676, 677, 678, 679, 680, 720, 725, 789, 790, 791, 792, 793, 794, 796, 797, 798, 803, 804, 828, 832, 837, 843, 844, 863, 871, 881], "attributeerror": 1, "howev": [1, 126, 238, 725, 881], "can": [1, 54, 64, 69, 88, 89, 91, 92, 99, 101, 102, 109, 110, 111, 117, 125, 133, 138, 139, 162, 167, 185, 198, 201, 209, 211, 238, 251, 268, 284, 306, 328, 347, 361, 393, 406, 411, 412, 413, 414, 415, 417, 418, 419, 423, 426, 431, 445, 478, 481, 484, 488, 495, 500, 509, 522, 532, 533, 548, 563, 592, 604, 607, 613, 622, 641, 657, 680, 708, 770, 785, 803, 804, 805, 809, 815, 829, 881], "other": [1, 14, 64, 88, 89, 91, 99, 106, 107, 124, 128, 134, 151, 152, 158, 159, 175, 236, 238, 250, 265, 295, 296, 297, 308, 366, 434, 473, 533, 542, 553, 568, 569, 577, 578, 603, 613, 621, 638, 670, 671, 672, 683, 750, 802, 865, 872, 880, 881], "onli": [1, 14, 22, 45, 54, 60, 62, 88, 89, 91, 92, 96, 99, 102, 103, 104, 110, 111, 117, 124, 138, 152, 156, 185, 187, 238, 246, 294, 295, 296, 297, 328, 356, 406, 476, 517, 521, 533, 548, 553, 565, 569, 572, 592, 613, 667, 670, 671, 672, 708, 736, 785, 859, 881], "gener": [1, 98, 108, 109, 110, 111, 177, 198, 238, 284, 421, 427, 533, 657, 800, 811, 881], "userwarn": 1, "pl": [1, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 533, 543, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 640, 641, 644, 645, 647, 652, 653, 656, 657, 664, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 811, 812, 813, 814, 816, 817, 818, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 881], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 55, 56, 57, 58, 109, 110, 111, 166, 198, 238, 580, 613], "__init__": [1, 2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 108], "self": [1, 55, 56, 57, 58, 61, 398, 533, 548, 556, 581, 590, 613, 621, 803, 804, 872, 881], "_expr": [1, 56], "hello": [1, 355, 481, 533, 645], "return": [1, 22, 24, 26, 27, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 70, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 114, 117, 118, 122, 124, 125, 126, 127, 129, 130, 133, 142, 144, 150, 151, 153, 154, 161, 162, 164, 165, 166, 167, 175, 177, 188, 189, 195, 198, 199, 206, 209, 211, 214, 218, 224, 238, 248, 249, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 266, 270, 271, 272, 283, 287, 289, 298, 299, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 342, 349, 355, 359, 362, 364, 365, 366, 367, 368, 370, 371, 372, 378, 382, 389, 393, 407, 408, 421, 429, 430, 437, 439, 441, 443, 444, 445, 446, 447, 449, 452, 454, 455, 456, 457, 463, 468, 469, 470, 471, 472, 474, 476, 477, 478, 483, 484, 488, 496, 497, 498, 505, 507, 508, 518, 523, 525, 533, 548, 551, 554, 556, 565, 571, 572, 573, 580, 581, 590, 596, 597, 605, 608, 609, 613, 618, 619, 620, 622, 629, 630, 632, 633, 636, 637, 639, 643, 644, 645, 656, 659, 661, 681, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 722, 725, 730, 735, 738, 740, 741, 745, 747, 748, 750, 751, 752, 753, 754, 755, 758, 760, 763, 770, 787, 788, 800, 802, 804, 821, 822, 823, 825, 827, 828, 829, 830, 831, 833, 836, 838, 839, 840, 841, 844, 847, 853, 855, 866, 868, 872, 881], "lit": [1, 86, 114, 287, 374, 493, 495, 502, 522, 525, 533, 659, 733, 881], "alia": [1, 54, 56, 58, 139, 140, 154, 200, 206, 207, 238, 251, 262, 268, 295, 296, 297, 301, 302, 303, 304, 305, 311, 313, 314, 315, 317, 320, 322, 324, 327, 328, 329, 331, 332, 333, 335, 336, 339, 340, 341, 353, 355, 360, 365, 366, 374, 377, 378, 391, 398, 399, 406, 422, 438, 439, 442, 444, 446, 449, 454, 456, 457, 458, 473, 474, 480, 486, 487, 489, 490, 495, 498, 499, 503, 517, 521, 522, 533, 563, 564, 566, 572, 598, 601, 602, 606, 613, 634, 641, 687, 688, 691, 708, 715, 720, 721, 763, 840, 841, 881], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 355, 533, 645], "select": [1, 54, 55, 56, 57, 59, 87, 88, 89, 90, 92, 96, 98, 99, 101, 117, 150, 152, 162, 166, 175, 184, 196, 200, 202, 238, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 294, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 354, 355, 356, 357, 358, 360, 361, 363, 364, 366, 367, 369, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 445, 447, 448, 452, 453, 455, 456, 457, 459, 461, 462, 464, 465, 466, 467, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 483, 484, 486, 488, 489, 491, 492, 495, 498, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 533, 549, 566, 569, 580, 591, 598, 603, 605, 613, 641, 657, 803, 804, 816, 827, 829, 854, 881], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 55, 164, 209, 238, 355, 456, 457, 533, 840, 841], "splitfram": [1, 55], "df": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 55, 56, 59, 77, 78, 79, 80, 81, 82, 83, 98, 99, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 533, 546, 547, 548, 549, 551, 552, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 566, 567, 568, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 601, 604, 605, 607, 608, 609, 613, 641, 657, 666, 827, 829, 835, 840, 841, 861, 881], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 31, 54, 55, 57, 61, 63, 83, 85, 87, 88, 89, 90, 92, 96, 98, 99, 100, 109, 110, 111, 120, 125, 126, 127, 131, 136, 139, 144, 161, 164, 176, 185, 191, 192, 198, 199, 200, 201, 207, 210, 221, 238, 246, 265, 267, 268, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 347, 349, 355, 383, 389, 390, 398, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 425, 433, 434, 444, 455, 464, 465, 469, 488, 489, 495, 499, 509, 512, 521, 522, 533, 549, 552, 553, 554, 555, 559, 563, 577, 597, 598, 602, 603, 613, 635, 638, 640, 641, 643, 644, 645, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 668, 725, 730, 734, 737, 741, 750, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 828, 839, 850, 854, 862, 881], "with_row_count": [1, 238, 613, 804, 881], "name": [1, 12, 16, 18, 26, 44, 55, 56, 57, 58, 63, 64, 67, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 102, 103, 104, 106, 107, 108, 109, 110, 111, 117, 120, 123, 124, 132, 135, 137, 151, 152, 158, 167, 171, 178, 191, 197, 198, 200, 206, 207, 208, 238, 247, 284, 331, 336, 347, 374, 384, 388, 390, 401, 464, 465, 466, 481, 482, 488, 492, 495, 500, 505, 506, 509, 512, 514, 515, 517, 519, 522, 523, 533, 549, 552, 568, 569, 577, 584, 586, 592, 598, 602, 604, 605, 606, 613, 618, 657, 669, 711, 716, 735, 786, 848, 850, 861, 864, 881], "n": [1, 9, 11, 19, 27, 31, 32, 55, 56, 57, 58, 64, 85, 86, 88, 89, 99, 114, 117, 128, 139, 142, 154, 164, 177, 188, 189, 195, 214, 224, 238, 267, 271, 283, 306, 307, 311, 315, 335, 340, 350, 359, 378, 399, 407, 421, 431, 456, 457, 468, 470, 474, 505, 517, 523, 533, 548, 563, 565, 572, 595, 596, 608, 609, 613, 621, 640, 644, 656, 680, 682, 687, 691, 715, 720, 731, 740, 763, 778, 800, 815, 819, 840, 841, 853, 855, 858, 866, 870, 881], "filter": [1, 55, 99, 101, 124, 148, 211, 238, 442, 458, 480, 484, 533, 553, 556, 566, 607, 613, 803, 881], "col": [1, 24, 54, 55, 56, 57, 59, 80, 82, 99, 109, 110, 117, 131, 138, 139, 140, 148, 150, 162, 166, 175, 179, 185, 200, 206, 207, 209, 238, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 281, 282, 284, 285, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 353, 354, 355, 356, 360, 361, 362, 363, 365, 366, 368, 369, 370, 373, 374, 375, 376, 380, 381, 382, 385, 386, 387, 392, 394, 395, 396, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 489, 490, 495, 498, 501, 503, 504, 509, 512, 515, 521, 522, 525, 533, 559, 562, 563, 564, 566, 580, 587, 592, 598, 601, 602, 603, 606, 613, 641, 657, 666, 708, 787, 803, 804, 827, 829, 844, 881], "2": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 77, 78, 79, 80, 81, 82, 83, 98, 99, 101, 105, 106, 107, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 245, 246, 247, 249, 250, 251, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 308, 314, 316, 317, 320, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 336, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 393, 394, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 433, 434, 435, 437, 439, 442, 444, 445, 446, 449, 450, 451, 454, 456, 457, 458, 461, 462, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 481, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 501, 503, 505, 507, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 533, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 568, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 613, 618, 621, 622, 624, 628, 629, 630, 631, 632, 633, 640, 641, 644, 645, 647, 652, 653, 656, 657, 666, 667, 668, 673, 674, 677, 678, 679, 680, 681, 683, 692, 696, 697, 703, 705, 710, 711, 712, 716, 719, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 742, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 778, 779, 780, 782, 783, 786, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 811, 813, 815, 816, 817, 818, 819, 821, 823, 828, 829, 833, 834, 835, 840, 841, 852, 853, 854, 855, 856, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 881], "0": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 28, 54, 55, 56, 58, 59, 63, 83, 88, 89, 91, 92, 96, 98, 99, 101, 102, 103, 104, 105, 108, 109, 110, 111, 114, 117, 118, 119, 121, 122, 125, 129, 130, 133, 134, 136, 137, 139, 141, 145, 150, 151, 153, 155, 156, 157, 160, 161, 162, 163, 165, 168, 169, 173, 177, 178, 179, 182, 184, 185, 186, 187, 193, 196, 198, 199, 201, 202, 203, 206, 207, 208, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 238, 241, 245, 246, 252, 253, 254, 255, 256, 257, 260, 261, 262, 263, 264, 268, 270, 276, 284, 292, 294, 296, 297, 298, 299, 301, 306, 309, 310, 316, 320, 322, 323, 327, 332, 333, 344, 345, 346, 348, 351, 352, 356, 358, 361, 364, 367, 368, 370, 371, 372, 374, 375, 380, 381, 383, 385, 386, 387, 392, 395, 396, 397, 399, 400, 403, 404, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 426, 428, 429, 430, 431, 435, 436, 443, 463, 467, 471, 472, 473, 479, 484, 486, 487, 489, 492, 493, 495, 499, 502, 510, 511, 514, 515, 519, 522, 524, 525, 533, 546, 547, 552, 554, 557, 558, 563, 568, 571, 576, 581, 582, 586, 587, 589, 590, 592, 593, 599, 601, 602, 603, 604, 607, 613, 623, 624, 625, 626, 627, 628, 629, 631, 633, 641, 643, 664, 667, 669, 674, 675, 680, 681, 683, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 706, 707, 712, 713, 724, 726, 727, 728, 732, 736, 739, 747, 749, 751, 752, 753, 754, 755, 760, 761, 767, 768, 778, 782, 783, 789, 791, 792, 794, 795, 796, 798, 800, 812, 813, 814, 818, 819, 821, 827, 829, 847, 856, 857, 860, 864, 865, 870, 871, 881], "drop": [1, 117, 123, 124, 199, 238, 267, 307, 309, 310, 533, 553, 597, 613, 640, 682, 684, 881], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 11, 12, 15, 16, 18, 26, 45, 54, 55, 56, 57, 62, 63, 67, 71, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 92, 93, 96, 97, 98, 99, 102, 103, 104, 106, 110, 117, 122, 123, 124, 125, 126, 127, 132, 135, 137, 138, 139, 140, 144, 145, 151, 152, 155, 156, 157, 158, 160, 161, 162, 163, 166, 167, 168, 169, 171, 172, 173, 178, 179, 185, 186, 187, 191, 193, 196, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 221, 238, 248, 249, 251, 260, 262, 265, 284, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 342, 347, 353, 374, 388, 390, 398, 401, 405, 407, 411, 412, 413, 414, 415, 417, 418, 419, 426, 433, 434, 456, 457, 460, 466, 480, 481, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 504, 505, 508, 509, 510, 511, 512, 513, 514, 515, 516, 519, 520, 521, 522, 523, 524, 525, 533, 552, 553, 554, 555, 562, 563, 564, 568, 569, 573, 574, 575, 576, 577, 579, 580, 582, 584, 586, 587, 592, 593, 594, 597, 598, 599, 601, 602, 603, 604, 605, 613, 619, 620, 638, 689, 692, 694, 698, 700, 703, 705, 706, 709, 710, 712, 718, 719, 722, 809, 840, 841, 861, 881], "txt": 1, "utf8": [1, 8, 14, 45, 88, 89, 99, 108, 125, 126, 133, 137, 178, 194, 238, 272, 349, 355, 437, 441, 443, 444, 445, 446, 454, 455, 456, 457, 460, 488, 490, 533, 554, 586, 613, 645, 714, 730, 759, 821, 825, 827, 828, 829, 830, 838, 839, 840, 841, 844, 863, 881], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 545, 547, 552, 553, 555, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 609, 613], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 57, 140, 166, 238, 251, 268, 292, 293, 295, 296, 297, 358, 361, 362, 365, 368, 370, 371, 372, 374, 398, 399, 442, 446, 449, 450, 451, 454, 456, 457, 458, 460, 463, 465, 473, 484, 487, 489, 490, 495, 499, 521, 522, 525, 533, 564, 580, 613, 641, 666, 844], "tp": [1, 57], "cast": [1, 56, 57, 77, 113, 133, 139, 140, 166, 195, 238, 250, 293, 304, 305, 311, 312, 406, 445, 463, 467, 473, 490, 533, 563, 564, 580, 613, 666, 678, 679, 687, 688, 785, 829, 852, 861, 865, 881], "int64": [1, 26, 56, 57, 86, 114, 125, 133, 137, 139, 140, 166, 178, 190, 238, 304, 305, 314, 317, 320, 322, 324, 327, 333, 347, 406, 467, 473, 484, 488, 500, 533, 554, 563, 564, 580, 586, 605, 613, 678, 679, 690, 693, 699, 701, 704, 707, 713, 723, 785, 802, 852, 863, 864, 865, 881], "int8": [1, 57, 133, 238, 304, 305, 467, 533, 678, 679, 788, 852, 881], "int16": [1, 57, 304, 305, 467, 533, 678, 679, 852, 881], "int32": [1, 57, 79, 110, 111, 139, 140, 238, 292, 318, 342, 473, 533, 563, 564, 613, 694, 722, 865, 881], "1": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 86, 88, 89, 90, 98, 99, 100, 101, 105, 106, 107, 108, 110, 111, 117, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 491, 492, 495, 496, 497, 498, 499, 500, 501, 503, 505, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 521, 522, 523, 524, 525, 533, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 640, 641, 643, 644, 647, 652, 653, 656, 657, 664, 666, 667, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 726, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 742, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 778, 779, 780, 782, 783, 786, 787, 788, 792, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 827, 829, 840, 841, 844, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 881], "b": [1, 23, 24, 25, 28, 45, 57, 62, 77, 78, 79, 80, 81, 82, 83, 91, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 247, 250, 251, 261, 265, 268, 272, 274, 286, 292, 293, 300, 308, 309, 310, 347, 349, 351, 352, 353, 357, 358, 361, 364, 367, 368, 369, 370, 371, 372, 374, 377, 379, 384, 393, 397, 401, 409, 426, 432, 450, 464, 465, 466, 476, 478, 480, 481, 486, 487, 488, 490, 491, 492, 495, 499, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 533, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 568, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 608, 609, 613, 621, 641, 666, 681, 683, 724, 725, 733, 750, 759, 786, 802, 834, 868, 881], "3": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 91, 98, 99, 101, 105, 106, 107, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 246, 247, 248, 251, 260, 261, 262, 266, 267, 268, 269, 270, 271, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 292, 293, 294, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 323, 325, 329, 330, 331, 332, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 373, 374, 375, 377, 379, 380, 381, 382, 384, 393, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 433, 434, 435, 438, 441, 442, 443, 446, 448, 449, 453, 454, 455, 456, 457, 458, 459, 464, 465, 466, 468, 469, 470, 474, 476, 477, 478, 480, 481, 486, 487, 488, 489, 490, 491, 492, 495, 499, 500, 501, 503, 505, 507, 509, 510, 511, 512, 514, 518, 519, 520, 521, 522, 523, 524, 525, 533, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 613, 618, 621, 622, 623, 625, 626, 627, 629, 630, 631, 632, 633, 640, 641, 644, 647, 652, 653, 656, 657, 664, 666, 667, 668, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 695, 696, 697, 699, 701, 702, 703, 705, 707, 709, 711, 712, 715, 716, 719, 720, 721, 723, 725, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 742, 744, 745, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 778, 779, 780, 782, 783, 786, 788, 789, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 811, 813, 814, 815, 816, 817, 819, 825, 826, 827, 830, 833, 838, 842, 852, 853, 854, 855, 856, 857, 859, 860, 862, 863, 864, 867, 868, 869, 870, 872, 881], "4": [1, 11, 19, 23, 24, 25, 28, 45, 54, 55, 56, 57, 58, 59, 62, 64, 77, 78, 79, 80, 81, 82, 83, 99, 105, 106, 107, 111, 117, 118, 119, 121, 124, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 161, 162, 164, 166, 167, 168, 172, 176, 179, 180, 188, 189, 190, 191, 192, 193, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 245, 246, 250, 251, 261, 267, 268, 271, 279, 280, 283, 286, 292, 294, 295, 296, 297, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 313, 317, 323, 324, 325, 329, 330, 331, 332, 333, 336, 338, 339, 342, 348, 349, 351, 352, 356, 357, 359, 360, 361, 362, 371, 372, 374, 377, 379, 381, 384, 398, 400, 401, 403, 404, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 424, 425, 428, 432, 433, 434, 435, 438, 446, 447, 449, 452, 454, 456, 457, 460, 466, 468, 469, 470, 473, 474, 486, 487, 488, 490, 491, 492, 495, 499, 501, 505, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 525, 533, 546, 547, 548, 551, 553, 555, 556, 557, 558, 560, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 604, 607, 608, 609, 613, 621, 624, 631, 640, 641, 644, 652, 653, 656, 667, 668, 670, 680, 681, 683, 692, 693, 698, 700, 703, 704, 705, 706, 710, 711, 712, 713, 714, 716, 718, 719, 730, 732, 733, 742, 745, 750, 752, 753, 754, 755, 758, 771, 778, 779, 780, 783, 792, 794, 795, 796, 797, 798, 800, 802, 812, 816, 817, 822, 830, 831, 833, 836, 838, 840, 841, 844, 854, 855, 865, 872, 881], "c": [1, 23, 24, 25, 28, 45, 55, 57, 79, 81, 91, 99, 109, 118, 119, 120, 121, 122, 123, 124, 125, 127, 131, 132, 133, 134, 136, 137, 138, 139, 142, 144, 145, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 167, 168, 169, 171, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 190, 194, 195, 196, 198, 199, 201, 203, 204, 207, 212, 213, 214, 215, 216, 217, 219, 221, 223, 224, 238, 251, 265, 272, 274, 374, 426, 456, 460, 476, 478, 481, 486, 487, 488, 490, 491, 492, 495, 501, 503, 505, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 533, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 559, 562, 563, 568, 571, 577, 581, 584, 585, 586, 587, 590, 591, 592, 601, 602, 603, 608, 609, 613, 681, 759, 840, 844, 868, 881], "5": [1, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 23, 24, 25, 28, 54, 55, 57, 58, 59, 62, 63, 77, 79, 80, 81, 82, 85, 86, 89, 105, 110, 111, 114, 117, 118, 119, 121, 127, 128, 129, 130, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 150, 152, 153, 154, 156, 158, 161, 162, 167, 168, 169, 172, 176, 180, 188, 189, 190, 191, 192, 197, 199, 201, 202, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 246, 268, 271, 276, 282, 283, 292, 293, 294, 295, 296, 297, 306, 308, 314, 332, 333, 338, 341, 346, 347, 349, 350, 356, 359, 362, 365, 368, 370, 371, 372, 374, 379, 398, 399, 401, 403, 404, 408, 409, 410, 411, 412, 414, 418, 420, 422, 428, 439, 445, 446, 449, 463, 466, 468, 470, 474, 486, 489, 491, 492, 495, 498, 499, 500, 501, 505, 509, 510, 511, 512, 513, 514, 519, 520, 522, 523, 524, 533, 546, 547, 548, 551, 555, 556, 557, 558, 560, 562, 563, 564, 565, 567, 569, 570, 571, 572, 575, 576, 577, 581, 588, 589, 590, 591, 593, 594, 595, 596, 600, 601, 602, 604, 607, 608, 609, 613, 621, 624, 628, 631, 641, 644, 647, 656, 666, 668, 670, 676, 680, 681, 683, 688, 689, 690, 712, 713, 718, 719, 721, 728, 731, 742, 771, 778, 779, 780, 782, 783, 789, 790, 791, 793, 794, 797, 800, 802, 812, 818, 823, 829, 830, 866, 872, 881], "6": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 77, 79, 80, 81, 82, 83, 117, 120, 122, 123, 124, 125, 127, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 150, 151, 154, 155, 156, 157, 158, 160, 163, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 200, 201, 202, 203, 204, 206, 207, 208, 209, 214, 221, 223, 224, 238, 251, 286, 292, 304, 305, 308, 328, 330, 332, 343, 349, 351, 352, 357, 359, 361, 379, 398, 402, 404, 405, 408, 411, 412, 413, 414, 415, 417, 418, 419, 422, 433, 434, 439, 446, 449, 468, 470, 481, 495, 499, 521, 522, 533, 548, 549, 551, 552, 553, 554, 555, 556, 559, 560, 562, 563, 564, 565, 567, 568, 570, 572, 573, 577, 581, 584, 586, 587, 588, 589, 590, 591, 592, 595, 596, 598, 600, 601, 602, 604, 605, 608, 609, 613, 621, 668, 674, 678, 679, 681, 683, 708, 719, 730, 771, 783, 792, 794, 795, 796, 798, 802, 823, 830, 852, 881], "7": [1, 23, 24, 25, 26, 27, 28, 55, 57, 62, 64, 120, 121, 122, 123, 125, 127, 131, 132, 134, 139, 140, 142, 144, 146, 151, 155, 156, 157, 160, 163, 165, 169, 171, 173, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 194, 195, 196, 201, 202, 203, 204, 238, 305, 313, 329, 331, 336, 339, 342, 348, 359, 361, 398, 408, 412, 418, 468, 470, 521, 533, 549, 552, 554, 555, 559, 563, 564, 565, 567, 568, 572, 582, 584, 586, 587, 592, 595, 596, 601, 605, 613, 628, 689, 694, 711, 716, 719, 797, 881], "float32": [1, 24, 57, 133, 238, 746, 881], "lazi": [1, 57, 62, 64, 86, 99, 110, 114, 152, 166, 209, 238, 251, 284, 398, 484, 533, 542, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 565, 566, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 613], "register_series_namespac": [1, 55, 56, 57], "math": [1, 58, 674, 813, 856, 881], "mathshortcut": [1, 58], "": [1, 24, 58, 63, 88, 89, 111, 122, 124, 126, 138, 139, 145, 151, 152, 172, 173, 189, 209, 238, 267, 271, 272, 279, 280, 283, 315, 347, 375, 389, 393, 395, 396, 398, 399, 406, 410, 434, 446, 447, 449, 452, 454, 455, 457, 460, 463, 465, 495, 498, 500, 503, 509, 512, 514, 522, 533, 553, 562, 563, 569, 596, 606, 613, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 640, 644, 645, 647, 652, 653, 656, 664, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 683, 688, 691, 711, 716, 723, 725, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 766, 767, 768, 769, 770, 771, 772, 774, 775, 778, 779, 780, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 811, 812, 813, 814, 816, 817, 819, 822, 823, 825, 826, 828, 830, 831, 833, 834, 836, 838, 841, 842, 844, 847, 850, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 881], "_": [1, 54, 58, 456, 840], "squar": [1, 58, 211, 375, 435, 533, 607, 761, 818, 881], "cube": [1, 58], "s2": [1, 107, 133, 238, 621, 668, 683, 750, 771, 802, 872, 881], "renam": [1, 88, 89, 238, 247, 384, 391, 465, 533, 613, 850, 861, 881], "n2": 1, "in_plac": [1, 144, 183, 204, 238, 784, 786, 810, 817, 881], "true": [1, 8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 59, 61, 62, 64, 77, 81, 85, 88, 89, 90, 91, 92, 96, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 124, 130, 133, 134, 136, 137, 139, 145, 147, 148, 149, 152, 153, 156, 161, 162, 164, 167, 168, 185, 191, 198, 199, 200, 201, 202, 207, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 238, 246, 248, 249, 250, 251, 266, 292, 301, 302, 303, 304, 305, 331, 332, 336, 343, 344, 345, 346, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 406, 416, 421, 426, 431, 433, 434, 438, 442, 445, 455, 456, 458, 460, 464, 465, 469, 474, 475, 478, 483, 484, 491, 517, 519, 521, 525, 533, 546, 547, 548, 550, 551, 553, 556, 558, 562, 563, 568, 569, 571, 573, 581, 590, 592, 597, 598, 602, 613, 619, 620, 621, 622, 632, 664, 668, 669, 711, 712, 716, 724, 726, 727, 728, 734, 738, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 761, 771, 779, 780, 785, 795, 802, 815, 817, 822, 826, 829, 839, 840, 842, 844, 863, 866, 871, 872, 881], "s3": [1, 90, 100, 101, 881], "n3": 1, "arg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 166, 195, 238, 503, 580, 613, 622, 863, 881], "ani": [2, 3, 4, 6, 24, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 47, 48, 49, 50, 51, 52, 53, 60, 78, 79, 80, 82, 88, 89, 90, 91, 92, 96, 99, 100, 102, 104, 108, 110, 111, 117, 124, 128, 130, 131, 133, 150, 164, 165, 166, 175, 176, 191, 192, 194, 195, 201, 238, 251, 265, 268, 292, 332, 352, 366, 383, 391, 408, 410, 425, 433, 460, 469, 483, 501, 507, 519, 533, 553, 558, 580, 613, 621, 622, 638, 641, 683, 712, 733, 750, 760, 787, 789, 804, 844, 854, 862, 863, 881], "kwarg": [2, 3, 4, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 165, 166, 195, 207, 238, 580, 602, 613, 863, 881], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 533, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 881, 887], "method": [2, 3, 4, 6, 23, 25, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 88, 89, 91, 108, 124, 146, 162, 169, 222, 238, 248, 337, 361, 403, 404, 411, 412, 413, 414, 415, 417, 418, 419, 476, 515, 526, 527, 529, 533, 534, 537, 538, 539, 542, 553, 567, 582, 613, 622, 717, 742, 782, 783, 794, 865, 873, 875, 877, 881, 884, 885, 886], "A": [4, 24, 42, 61, 64, 83, 88, 89, 96, 99, 100, 133, 139, 152, 164, 167, 191, 193, 201, 202, 221, 238, 245, 284, 314, 317, 320, 322, 324, 327, 333, 364, 367, 368, 370, 383, 384, 389, 401, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 438, 439, 443, 444, 445, 463, 466, 488, 489, 499, 503, 533, 563, 569, 592, 613, 657, 690, 693, 699, 701, 704, 707, 713, 789, 790, 791, 793, 796, 797, 798, 822, 823, 827, 828, 829, 834, 835, 844, 847, 881], "encod": [4, 53, 88, 89, 99, 193, 238, 288, 440, 660, 824], "set": [4, 5, 6, 7, 8, 9, 10, 11, 14, 19, 20, 22, 24, 26, 27, 55, 64, 79, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 106, 107, 109, 110, 111, 120, 141, 152, 158, 177, 184, 198, 238, 251, 280, 284, 340, 341, 358, 366, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 427, 431, 432, 454, 533, 542, 549, 568, 569, 573, 577, 591, 605, 607, 613, 621, 622, 653, 720, 721, 735, 739, 750, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 804, 815, 816, 838, 863, 881], "string": [4, 5, 7, 9, 10, 14, 24, 26, 27, 31, 45, 53, 64, 88, 89, 99, 108, 109, 111, 113, 133, 139, 140, 152, 185, 201, 202, 238, 272, 290, 293, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 437, 438, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 460, 463, 488, 490, 503, 509, 512, 533, 550, 551, 561, 563, 564, 569, 605, 613, 645, 662, 666, 708, 711, 716, 820, 821, 822, 826, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 881], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 561, 583, 613], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], "previous": 5, "save": [5, 542], "share": [5, 45, 126, 238, 725, 881], "option": [5, 6, 7, 54, 64, 78, 88, 90, 91, 92, 96, 100, 102, 104, 105, 108, 109, 110, 111, 124, 152, 158, 162, 191, 193, 198, 202, 207, 238, 375, 410, 411, 412, 413, 414, 415, 417, 418, 419, 431, 453, 454, 459, 481, 484, 507, 533, 542, 568, 569, 577, 602, 613, 761, 789, 790, 791, 792, 793, 794, 796, 797, 798, 804, 815, 832, 837, 838, 843, 861, 881], "paramet": [5, 9, 10, 11, 14, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 39, 42, 44, 46, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 114, 117, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 144, 145, 151, 152, 154, 156, 158, 159, 161, 162, 164, 165, 166, 167, 169, 171, 172, 173, 175, 177, 179, 181, 182, 184, 185, 186, 187, 188, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 211, 214, 221, 222, 224, 238, 247, 250, 251, 260, 262, 265, 266, 267, 268, 270, 271, 272, 279, 280, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 301, 302, 303, 304, 305, 306, 307, 308, 311, 312, 315, 328, 331, 335, 336, 337, 340, 341, 343, 344, 345, 346, 347, 350, 352, 353, 357, 358, 359, 361, 362, 366, 375, 378, 380, 383, 384, 398, 399, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 463, 464, 465, 468, 469, 474, 475, 478, 479, 480, 481, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 502, 503, 505, 507, 508, 509, 514, 515, 516, 517, 518, 519, 521, 522, 523, 533, 548, 551, 552, 553, 556, 557, 558, 559, 561, 562, 563, 564, 565, 568, 569, 572, 573, 577, 578, 580, 581, 582, 583, 584, 587, 588, 589, 590, 591, 592, 595, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 618, 621, 622, 631, 634, 638, 639, 640, 641, 643, 644, 645, 652, 653, 656, 657, 659, 660, 661, 662, 663, 664, 666, 670, 671, 672, 676, 677, 678, 679, 680, 682, 683, 687, 688, 691, 708, 711, 715, 716, 717, 720, 721, 724, 725, 726, 727, 728, 731, 732, 733, 734, 739, 740, 742, 757, 761, 763, 778, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 811, 815, 816, 817, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 847, 848, 850, 853, 854, 861, 862, 863, 866, 867, 869, 870, 871, 872, 881], "json": [5, 7, 26, 27, 94, 95, 103, 238, 445, 542, 561, 583, 605, 613, 829], "produc": [5, 110, 111, 388, 508], "reset": 6, "default": [6, 14, 22, 23, 24, 25, 26, 27, 28, 77, 78, 80, 81, 82, 86, 88, 89, 96, 99, 108, 109, 110, 111, 114, 126, 138, 140, 141, 152, 158, 167, 177, 208, 238, 280, 284, 293, 343, 358, 362, 380, 395, 396, 399, 404, 421, 427, 443, 454, 460, 484, 485, 507, 519, 533, 551, 562, 564, 569, 577, 605, 613, 653, 657, 666, 724, 725, 739, 774, 775, 778, 783, 800, 819, 827, 838, 870, 881], "state": [6, 61, 72, 493, 542, 548, 556, 581, 590, 613], "note": [6, 14, 54, 64, 80, 82, 86, 88, 90, 96, 98, 100, 109, 110, 111, 114, 117, 129, 138, 139, 140, 151, 152, 162, 165, 166, 175, 192, 194, 198, 199, 202, 221, 238, 241, 268, 304, 305, 309, 310, 328, 331, 336, 368, 370, 411, 412, 413, 414, 415, 417, 418, 419, 431, 446, 449, 460, 467, 493, 502, 516, 533, 548, 556, 557, 563, 564, 565, 569, 572, 590, 597, 613, 641, 678, 679, 708, 803, 804, 810, 815, 830, 833, 852, 863, 881], "oper": [6, 45, 62, 68, 69, 77, 78, 79, 80, 81, 82, 88, 96, 117, 128, 133, 138, 145, 153, 159, 162, 164, 166, 170, 190, 194, 195, 198, 201, 209, 221, 238, 246, 284, 301, 302, 303, 304, 305, 306, 374, 391, 404, 406, 481, 482, 499, 533, 556, 562, 565, 568, 572, 578, 613, 621, 676, 677, 678, 679, 680, 783, 785, 859, 862, 863, 871, 881], "remov": [6, 122, 238, 241, 347, 448, 453, 459, 500, 533, 552, 613, 832, 837, 843], "from": [6, 24, 54, 64, 77, 78, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 121, 122, 126, 128, 137, 139, 140, 152, 153, 158, 171, 175, 177, 179, 198, 199, 201, 202, 238, 301, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 347, 361, 375, 395, 396, 399, 421, 433, 434, 443, 460, 476, 478, 487, 488, 496, 497, 498, 500, 507, 519, 532, 533, 552, 553, 556, 561, 563, 564, 569, 577, 583, 584, 587, 597, 601, 603, 613, 621, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 725, 744, 761, 774, 775, 776, 778, 800, 827, 869, 872, 881], "environ": [6, 22], "local": [6, 90, 100, 337, 717, 779, 780, 881], "flag": [6, 108, 207, 238, 423, 533, 551, 573, 602, 613, 805, 881], "back": [6, 54, 128, 238, 621, 881], "valu": [6, 9, 22, 24, 26, 39, 40, 52, 54, 62, 63, 79, 81, 88, 89, 98, 99, 101, 106, 107, 108, 109, 110, 111, 113, 117, 124, 128, 129, 130, 134, 137, 139, 140, 141, 146, 155, 156, 157, 158, 160, 162, 164, 167, 168, 169, 171, 177, 181, 182, 185, 186, 187, 191, 201, 202, 203, 212, 213, 215, 216, 217, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 238, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 269, 270, 271, 273, 275, 276, 277, 279, 282, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 306, 307, 309, 310, 313, 325, 329, 338, 344, 345, 346, 348, 350, 351, 352, 354, 356, 357, 358, 360, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 376, 377, 381, 382, 383, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 407, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 422, 423, 424, 425, 429, 430, 431, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 450, 451, 454, 456, 457, 458, 463, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 487, 490, 491, 493, 494, 495, 501, 502, 507, 509, 510, 511, 512, 513, 516, 517, 522, 525, 533, 553, 557, 558, 563, 564, 566, 567, 574, 575, 576, 577, 579, 582, 584, 588, 589, 592, 593, 594, 599, 605, 606, 613, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 636, 637, 640, 642, 643, 644, 646, 648, 649, 650, 652, 656, 658, 660, 661, 662, 663, 666, 667, 670, 671, 672, 674, 675, 680, 681, 682, 684, 685, 689, 705, 709, 718, 725, 726, 727, 728, 731, 732, 733, 735, 736, 738, 739, 742, 745, 747, 748, 750, 751, 752, 753, 754, 755, 758, 766, 767, 769, 770, 772, 774, 775, 776, 777, 778, 781, 782, 783, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 801, 802, 803, 804, 807, 808, 813, 814, 815, 821, 823, 824, 825, 826, 827, 828, 829, 830, 833, 834, 835, 838, 840, 841, 842, 847, 852, 854, 855, 856, 857, 865, 868, 869, 871, 872, 881], "exampl": [6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 90, 91, 98, 99, 100, 101, 105, 106, 107, 108, 109, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 501, 503, 505, 507, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 533, 542, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613, 618, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 640, 641, 644, 645, 647, 652, 653, 656, 657, 664, 666, 667, 668, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 742, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 762, 763, 766, 767, 768, 769, 770, 771, 772, 778, 779, 780, 782, 783, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 807, 811, 812, 813, 814, 816, 817, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 852, 853, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 881], "current": [7, 22, 118, 119, 207, 238, 284, 331, 399, 533, 542, 546, 547, 602, 613, 669, 673, 711, 778, 881], "activ": [8, 12, 13, 15, 16, 17, 18, 21, 268, 641], "bool": [8, 10, 12, 13, 15, 16, 17, 18, 19, 21, 22, 24, 26, 28, 39, 54, 59, 61, 62, 77, 81, 88, 89, 92, 94, 96, 99, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 118, 119, 130, 131, 133, 134, 136, 138, 139, 144, 145, 147, 148, 149, 152, 164, 167, 177, 183, 185, 191, 195, 198, 199, 200, 202, 204, 207, 213, 215, 216, 219, 238, 248, 249, 250, 260, 262, 266, 268, 281, 292, 301, 302, 303, 304, 305, 306, 332, 343, 344, 345, 346, 350, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 383, 404, 406, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 425, 426, 431, 433, 434, 438, 442, 450, 451, 455, 456, 458, 460, 464, 465, 474, 475, 478, 483, 484, 485, 487, 493, 507, 517, 519, 521, 525, 533, 546, 548, 550, 551, 556, 558, 559, 562, 563, 568, 569, 573, 581, 590, 592, 597, 598, 602, 605, 613, 619, 620, 621, 622, 631, 634, 639, 641, 654, 664, 669, 676, 677, 678, 679, 680, 712, 724, 726, 727, 728, 731, 734, 735, 738, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 779, 780, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 804, 805, 810, 815, 817, 822, 826, 834, 835, 839, 840, 842, 844, 862, 863, 866, 867, 869, 871, 881], "ascii": [8, 14, 447, 449, 452, 463, 831, 833, 836, 847], "charact": [8, 9, 14, 20, 24, 88, 89, 99, 238, 328, 355, 446, 447, 452, 453, 455, 456, 459, 463, 533, 581, 613, 708, 830, 831, 832, 836, 837, 839, 840, 843, 847], "print": [8, 9, 11, 13, 19, 105, 125, 137, 138, 153, 238, 360, 533, 566, 613, 750, 789, 881], "tabl": [8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 44, 77, 88, 89, 90, 99, 100, 167, 190, 195, 201, 221, 238], "outlin": 8, "fals": [8, 10, 12, 13, 15, 16, 17, 18, 19, 22, 26, 28, 54, 59, 61, 64, 88, 89, 91, 92, 96, 99, 103, 104, 106, 107, 108, 109, 110, 111, 118, 119, 121, 133, 134, 136, 137, 138, 139, 144, 145, 147, 148, 149, 152, 153, 156, 161, 162, 164, 167, 168, 177, 183, 185, 191, 195, 198, 199, 202, 204, 207, 212, 213, 215, 216, 217, 219, 223, 238, 248, 249, 260, 262, 266, 268, 281, 301, 302, 303, 304, 305, 306, 332, 343, 344, 345, 346, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 383, 404, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 426, 431, 433, 434, 438, 442, 450, 451, 455, 456, 458, 460, 474, 475, 478, 484, 485, 493, 507, 517, 519, 521, 525, 533, 546, 547, 548, 550, 551, 556, 562, 563, 568, 569, 571, 573, 581, 590, 592, 602, 613, 621, 631, 634, 641, 654, 664, 668, 669, 676, 677, 678, 679, 680, 712, 724, 726, 727, 728, 734, 743, 745, 747, 750, 751, 752, 753, 754, 755, 757, 758, 761, 771, 779, 780, 783, 784, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 802, 805, 810, 815, 817, 822, 826, 834, 835, 839, 840, 842, 844, 862, 863, 866, 867, 869, 871, 872, 881], "revert": 8, "abc": [8, 12, 13, 15, 16, 17, 18, 19, 450, 834], "xyz": [8, 12, 13, 15, 16, 17, 18, 19, 439, 444, 823, 828, 861, 881], "shape": [8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 45, 54, 55, 56, 57, 58, 59, 62, 63, 64, 75, 77, 78, 79, 80, 81, 82, 83, 86, 99, 101, 110, 111, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 177, 179, 181, 182, 184, 185, 186, 187, 188, 189, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 501, 503, 505, 509, 510, 511, 512, 513, 514, 518, 519, 520, 521, 522, 523, 524, 525, 533, 546, 548, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 564, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 607, 608, 609, 613, 621, 622, 623, 624, 625, 626, 627, 628, 631, 632, 633, 640, 641, 644, 645, 647, 652, 653, 656, 657, 664, 666, 667, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 727, 728, 730, 731, 732, 733, 734, 736, 739, 740, 742, 745, 747, 750, 751, 752, 753, 754, 755, 758, 760, 763, 770, 778, 779, 780, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 807, 811, 812, 813, 814, 816, 817, 818, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 840, 841, 842, 844, 853, 854, 855, 856, 857, 860, 861, 865, 867, 868, 869, 872, 881], "f64": [8, 10, 12, 13, 15, 16, 17, 18, 19, 54, 56, 58, 63, 101, 110, 118, 119, 121, 122, 124, 125, 129, 130, 133, 136, 145, 151, 152, 156, 157, 165, 168, 169, 184, 185, 186, 199, 203, 206, 207, 213, 215, 216, 217, 218, 219, 222, 223, 238, 245, 252, 253, 254, 255, 256, 257, 276, 292, 294, 298, 299, 306, 309, 310, 332, 343, 344, 345, 346, 347, 348, 356, 361, 368, 370, 371, 372, 374, 375, 380, 381, 385, 386, 387, 392, 395, 396, 399, 400, 403, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 429, 430, 431, 435, 436, 471, 472, 479, 486, 487, 489, 492, 500, 510, 511, 514, 519, 520, 524, 533, 546, 552, 553, 557, 558, 568, 569, 575, 576, 582, 592, 593, 599, 601, 602, 603, 613, 623, 624, 625, 626, 627, 628, 667, 674, 675, 680, 681, 712, 727, 728, 732, 736, 778, 789, 791, 792, 794, 795, 796, 798, 799, 813, 814, 818, 856, 857, 881], "int": [9, 11, 19, 20, 24, 28, 39, 56, 79, 82, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 108, 109, 110, 111, 112, 114, 117, 126, 129, 130, 132, 141, 142, 143, 145, 152, 154, 155, 156, 160, 161, 162, 173, 175, 177, 180, 181, 182, 184, 186, 187, 188, 189, 196, 201, 203, 205, 208, 214, 224, 238, 266, 267, 270, 271, 279, 280, 283, 284, 286, 295, 296, 297, 306, 307, 344, 345, 346, 350, 351, 352, 357, 358, 359, 362, 378, 399, 400, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 427, 432, 436, 443, 447, 452, 454, 456, 457, 463, 464, 465, 468, 469, 470, 474, 479, 484, 487, 491, 495, 496, 497, 498, 505, 509, 511, 512, 513, 514, 517, 519, 520, 521, 522, 523, 524, 533, 556, 557, 558, 565, 569, 572, 581, 588, 589, 591, 593, 595, 596, 599, 600, 604, 608, 609, 613, 629, 630, 639, 640, 643, 644, 652, 653, 656, 657, 664, 668, 670, 671, 672, 680, 682, 725, 726, 727, 728, 731, 732, 733, 739, 740, 762, 763, 766, 767, 769, 771, 772, 774, 775, 776, 777, 778, 781, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 803, 804, 806, 807, 808, 811, 816, 819, 827, 831, 836, 838, 840, 841, 847, 852, 853, 854, 855, 866, 870, 881], "number": [9, 11, 19, 20, 24, 28, 54, 73, 85, 86, 88, 89, 91, 99, 103, 109, 110, 114, 126, 127, 129, 130, 142, 153, 154, 161, 162, 177, 181, 182, 188, 201, 212, 214, 224, 238, 267, 271, 279, 283, 284, 286, 300, 306, 307, 316, 318, 323, 325, 332, 338, 339, 342, 344, 345, 346, 350, 352, 357, 359, 368, 370, 377, 378, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 424, 425, 427, 446, 449, 456, 457, 468, 474, 491, 505, 519, 523, 533, 555, 556, 557, 558, 565, 572, 581, 588, 589, 595, 608, 609, 613, 640, 644, 652, 656, 657, 680, 682, 692, 694, 703, 705, 712, 718, 719, 722, 725, 726, 727, 728, 731, 733, 740, 749, 763, 771, 772, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 807, 808, 811, 819, 830, 833, 840, 841, 853, 866, 870, 881], "format": [10, 14, 24, 26, 87, 88, 89, 94, 99, 101, 127, 158, 236, 238, 331, 334, 336, 460, 555, 561, 577, 605, 613, 714, 844, 880], "liter": [10, 14, 59, 64, 91, 111, 155, 156, 160, 161, 164, 179, 187, 191, 238, 248, 249, 374, 405, 438, 450, 451, 484, 496, 497, 507, 517, 521, 525, 533, 558, 587, 613, 619, 620, 803, 804, 822, 834, 835, 881], "left": [10, 64, 106, 107, 139, 140, 151, 152, 238, 344, 345, 346, 361, 411, 412, 413, 414, 415, 417, 418, 419, 447, 463, 473, 487, 493, 494, 502, 516, 533, 563, 564, 568, 569, 613, 726, 727, 728, 831, 847, 865, 881], "center": [10, 344, 345, 346, 410, 411, 412, 413, 414, 415, 417, 418, 419, 533, 726, 727, 728, 789, 790, 791, 792, 793, 794, 796, 797, 798, 881], "right": [10, 12, 64, 88, 89, 106, 107, 139, 140, 151, 152, 238, 344, 345, 346, 411, 412, 413, 414, 415, 417, 418, 419, 431, 452, 487, 533, 563, 564, 568, 569, 613, 726, 727, 728, 815, 836, 881], "cell": 10, "align": [10, 54, 463, 847], "keyerror": [10, 14], "recognis": [10, 14, 108], "column_abc": 10, "column_xyz": 10, "If": [11, 24, 26, 27, 28, 45, 60, 63, 64, 78, 80, 81, 82, 88, 89, 90, 91, 92, 96, 98, 99, 100, 102, 103, 104, 117, 128, 139, 140, 152, 158, 162, 164, 177, 184, 194, 195, 198, 221, 238, 251, 280, 284, 295, 296, 297, 353, 375, 383, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 423, 427, 431, 432, 433, 434, 446, 449, 454, 455, 456, 457, 460, 474, 481, 483, 484, 485, 491, 493, 502, 507, 519, 533, 563, 564, 568, 569, 573, 577, 591, 605, 607, 613, 621, 622, 653, 670, 671, 672, 738, 761, 785, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 805, 815, 816, 830, 833, 838, 839, 840, 841, 844, 859, 863, 866, 871, 881], "rang": [11, 63, 64, 98, 126, 139, 238, 313, 325, 329, 330, 331, 336, 338, 361, 484, 489, 496, 497, 533, 563, 613, 689, 705, 709, 710, 711, 716, 718, 725, 778, 881], "100": [11, 88, 89, 99, 103, 463, 484, 790, 791, 793, 881], "98": [11, 145, 238, 433, 434, 469, 474, 533], "99": [11, 129, 130, 145, 148, 238, 246, 350, 352, 433, 434, 469, 474, 487, 533, 557, 558, 613, 724, 731, 881], "imove": [12, 337, 344, 345, 346, 411, 412, 414, 418, 533, 717, 726, 727, 728, 790, 791, 793, 797, 881], "inlin": 12, "parenthes": 12, "below": [13, 90, 100, 124, 138, 238, 361, 525, 533, 553, 613], "when": [13, 17, 28, 45, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 89, 92, 96, 99, 102, 103, 110, 111, 113, 117, 125, 126, 128, 130, 133, 139, 166, 175, 179, 238, 295, 296, 297, 344, 345, 346, 352, 383, 389, 460, 493, 502, 533, 558, 563, 587, 613, 621, 670, 671, 672, 725, 726, 727, 728, 733, 803, 804, 881], "displai": [13, 17], "ascii_ful": 14, "ascii_no_bord": 14, "ascii_borders_onli": 14, "ascii_borders_only_condens": 14, "ascii_horizontal_onli": 14, "ascii_markdown": 14, "utf8_ful": 14, "utf8_full_condens": 14, "utf8_no_bord": 14, "utf8_borders_onli": 14, "utf8_horizontal_onli": 14, "noth": [14, 439, 443, 444, 445, 823, 827, 828, 829], "style": [14, 167, 238], "border": 14, "line": [14, 88, 89, 91, 99, 137, 238], "dens": [14, 137, 238, 404, 533, 783, 881], "row": [14, 19, 24, 26, 28, 54, 55, 57, 70, 73, 76, 79, 80, 82, 88, 89, 91, 92, 96, 99, 102, 103, 104, 109, 110, 117, 124, 128, 131, 133, 137, 139, 141, 142, 147, 149, 152, 153, 154, 158, 162, 184, 188, 189, 192, 199, 201, 208, 211, 214, 224, 238, 251, 349, 355, 359, 378, 399, 408, 432, 468, 493, 494, 502, 505, 509, 512, 516, 523, 533, 548, 553, 556, 559, 560, 563, 565, 569, 570, 572, 573, 577, 591, 595, 596, 597, 604, 607, 608, 609, 613, 621, 730, 740, 763, 778, 787, 816, 853, 881], "space": 14, "horizont": [14, 62, 133, 144, 201, 238, 490, 493, 494, 495, 499, 502, 509, 512, 516, 522], "markdown": 14, "compat": [14, 28, 100, 238, 613], "same": [14, 45, 54, 61, 106, 109, 117, 199, 211, 238, 245, 250, 251, 349, 355, 410, 411, 412, 413, 414, 415, 417, 418, 419, 488, 533, 597, 607, 613, 617, 621, 622, 730, 789, 790, 791, 792, 793, 794, 796, 797, 798, 872, 881], "No": 14, "The": [14, 28, 39, 46, 54, 60, 85, 88, 96, 98, 99, 100, 117, 139, 140, 141, 146, 152, 159, 175, 200, 202, 211, 221, 238, 251, 284, 286, 287, 288, 289, 313, 325, 328, 329, 331, 336, 338, 350, 355, 357, 358, 383, 404, 407, 410, 411, 412, 413, 414, 415, 417, 418, 419, 431, 434, 437, 440, 441, 446, 447, 452, 463, 485, 526, 527, 529, 533, 534, 537, 538, 539, 546, 562, 563, 564, 565, 567, 569, 572, 573, 578, 581, 598, 607, 613, 659, 660, 661, 669, 689, 705, 708, 709, 711, 716, 718, 731, 739, 742, 783, 789, 790, 791, 792, 793, 794, 796, 797, 798, 815, 821, 824, 825, 830, 831, 836, 847, 873, 875, 877, 881, 884, 885, 886], "one": [14, 54, 70, 111, 130, 131, 137, 139, 140, 158, 167, 175, 193, 197, 209, 210, 221, 238, 246, 352, 374, 410, 433, 434, 464, 469, 481, 509, 512, 521, 522, 533, 552, 558, 559, 563, 564, 577, 603, 613, 621, 733, 789, 848, 881], "more": [14, 26, 28, 54, 76, 90, 96, 100, 110, 111, 117, 138, 153, 158, 162, 165, 175, 177, 199, 211, 238, 251, 295, 296, 297, 374, 375, 383, 421, 431, 475, 509, 512, 522, 533, 562, 577, 597, 607, 613, 622, 670, 671, 672, 761, 800, 815, 867, 881, 888], "semigraph": 14, "box": [14, 117, 238], "draw": [14, 19, 20], "found": [14, 24, 71, 125, 238, 445, 460, 465, 829], "unicod": 14, "block": [14, 604, 613, 803, 804, 881], "http": [14, 443, 827, 888], "en": 14, "wikipedia": 14, "org": 14, "wiki": 14, "drawing_charact": 14, "box_draw": 14, "hide": [15, 16, 17, 18], "etc": [15, 80, 82, 88, 90, 92, 96, 100, 102, 104, 484, 803, 804, 881], "inform": [17, 60, 79, 90, 100, 165, 238, 295, 296, 297, 375, 431, 533, 581, 613, 670, 671, 672, 761, 815, 881], "separ": [18, 24, 198, 238, 272, 355, 490, 493, 494, 533, 645], "between": [18, 26, 62, 94, 108, 109, 110, 111, 169, 222, 238, 272, 292, 308, 362, 399, 403, 415, 437, 492, 514, 515, 519, 533, 582, 613, 645, 664, 683, 778, 782, 794, 821, 881], "set_tbl_column_data_type_inlin": 18, "max": [19, 28, 110, 111, 121, 130, 139, 140, 167, 238, 295, 296, 302, 352, 398, 404, 411, 423, 457, 533, 558, 563, 564, 606, 613, 670, 671, 676, 681, 733, 783, 790, 805, 841, 881], "both": [19, 24, 45, 64, 139, 140, 151, 152, 159, 175, 238, 250, 362, 411, 412, 413, 414, 415, 417, 418, 419, 448, 453, 459, 533, 563, 564, 568, 569, 578, 613], "element": [19, 86, 111, 114, 252, 253, 254, 255, 256, 257, 268, 298, 299, 301, 302, 303, 304, 305, 306, 348, 358, 366, 381, 399, 404, 407, 422, 428, 429, 430, 435, 456, 457, 471, 472, 474, 533, 622, 623, 624, 625, 626, 627, 628, 641, 674, 675, 676, 677, 678, 679, 680, 729, 734, 750, 765, 778, 783, 801, 812, 813, 814, 818, 819, 840, 841, 856, 857, 866, 867, 870, 881], "width": [20, 88, 89, 238, 447, 452, 463, 613, 831, 836, 847], "char": [20, 45, 449, 833], "enabl": [21, 423, 533, 805, 881], "addit": [21, 90, 100, 108, 109], "verbos": 21, "debug": [21, 548, 556, 573, 613], "log": [21, 56, 343, 474, 533, 724, 866, 881], "if_set": 22, "dict": [22, 28, 46, 55, 57, 60, 78, 79, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 102, 104, 110, 164, 165, 171, 178, 191, 192, 238, 584, 586, 613, 735, 881], "none": [22, 23, 24, 25, 26, 27, 28, 31, 40, 44, 54, 63, 64, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 117, 118, 121, 124, 129, 130, 137, 139, 140, 141, 146, 151, 152, 153, 156, 158, 162, 163, 175, 177, 182, 184, 191, 193, 198, 199, 200, 201, 202, 207, 238, 247, 250, 251, 261, 270, 280, 284, 286, 295, 296, 297, 300, 309, 310, 331, 336, 341, 344, 345, 346, 347, 350, 351, 352, 357, 358, 361, 368, 369, 370, 371, 372, 377, 383, 397, 399, 405, 410, 411, 412, 413, 414, 415, 417, 418, 419, 421, 425, 426, 427, 428, 432, 437, 438, 441, 442, 445, 446, 447, 448, 449, 452, 453, 454, 456, 457, 458, 459, 460, 463, 464, 465, 473, 481, 483, 484, 487, 490, 491, 497, 498, 500, 501, 507, 508, 517, 520, 521, 524, 533, 546, 547, 553, 557, 558, 563, 564, 567, 568, 569, 571, 573, 577, 589, 590, 591, 592, 597, 598, 602, 603, 605, 607, 613, 622, 629, 630, 643, 653, 657, 669, 670, 681, 683, 711, 716, 721, 724, 726, 727, 728, 731, 732, 733, 738, 739, 741, 742, 754, 755, 761, 789, 790, 791, 792, 793, 794, 796, 797, 798, 800, 808, 811, 812, 815, 816, 819, 821, 822, 825, 826, 829, 830, 831, 832, 833, 836, 837, 838, 840, 841, 842, 843, 844, 858, 861, 862, 865, 870, 871, 881], "show": [22, 124, 137, 153, 163, 238, 553, 581, 590, 613], "variabl": [22, 83, 158, 193, 238, 577, 613, 860, 881], "chang": [22, 54, 63, 88, 89, 101, 201, 202, 238, 306, 331, 399, 411, 412, 413, 414, 415, 417, 418, 419, 533, 680, 688, 711, 778, 810, 881], "restrict": [22, 457, 841], "dictionari": [22, 78, 79, 82, 88, 89, 93, 97, 99, 164, 191, 192, 238, 681, 735, 881], "includ": [22, 24, 60, 90, 100, 110, 126, 139, 198, 201, 238, 332, 362, 455, 456, 493, 533, 563, 613, 712, 725, 839, 840, 871, 881], "those": [22, 404, 533, 783, 881], "_have_": 22, "been": [22, 241, 404, 533, 783, 881], "set_stat": 22, "all_stat": 22, "file": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 128, 238, 556, 583, 605, 613, 621, 881], "binaryio": [23, 25, 87, 88, 91, 92, 93, 96, 97, 238], "bytesio": [23, 24, 25, 28, 87, 88, 89, 91, 92, 96, 238], "path": [23, 24, 25, 26, 27, 28, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 102, 103, 104, 238, 423, 445, 533, 583, 605, 613, 805, 829, 881], "compress": [23, 25, 28, 238, 613], "avrocompress": [23, 238], "uncompress": [23, 25, 28, 92, 102, 238, 613], "write": [23, 24, 25, 26, 28, 238, 295, 296, 297, 533, 571, 590, 605, 613, 670, 671, 672, 881], "apach": [23, 28, 87, 238], "avro": [23, 87, 238, 542], "should": [23, 24, 25, 26, 27, 28, 86, 108, 109, 111, 114, 117, 139, 152, 211, 238, 246, 251, 268, 293, 306, 340, 368, 370, 410, 411, 412, 413, 414, 415, 417, 418, 419, 422, 431, 453, 459, 507, 533, 552, 563, 568, 569, 573, 590, 605, 607, 613, 622, 641, 666, 680, 720, 789, 790, 791, 792, 793, 794, 796, 797, 798, 801, 815, 832, 837, 843, 881], "written": [23, 24, 25, 26, 27, 28, 238, 605, 613], "snappi": [23, 28, 238, 613], "deflat": [23, 238], "import": [23, 24, 25, 28, 31, 64, 77, 80, 81, 98, 99, 100, 101, 106, 107, 108, 109, 110, 111, 121, 137, 139, 152, 195, 201, 202, 238, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 498, 507, 563, 569, 573, 613, 674, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 744, 747, 751, 752, 753, 789, 813, 856, 881], "pathlib": [23, 24, 25, 26, 27, 28, 87, 91, 92, 93, 94, 95, 97, 99, 102, 103, 238, 583, 605, 613], "foo": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 141, 142, 143, 144, 145, 146, 148, 151, 154, 155, 156, 157, 160, 163, 164, 165, 167, 169, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 198, 200, 203, 204, 205, 209, 221, 238, 247, 266, 269, 270, 273, 274, 295, 296, 297, 328, 355, 359, 360, 400, 408, 424, 425, 437, 439, 441, 444, 448, 453, 455, 457, 459, 461, 462, 468, 470, 481, 484, 486, 488, 491, 492, 501, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 518, 519, 520, 523, 524, 525, 533, 549, 552, 553, 554, 559, 566, 567, 568, 584, 586, 587, 592, 597, 598, 600, 602, 603, 605, 613, 645, 670, 708, 823, 825, 828, 841, 881], "bar": [23, 24, 25, 26, 27, 28, 83, 117, 120, 122, 123, 124, 125, 128, 131, 132, 133, 134, 135, 136, 142, 144, 145, 146, 148, 151, 154, 155, 156, 157, 160, 163, 164, 165, 167, 169, 171, 172, 173, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 200, 203, 204, 209, 221, 238, 247, 274, 360, 431, 441, 455, 457, 481, 486, 488, 491, 492, 501, 505, 509, 510, 511, 512, 513, 514, 518, 519, 520, 523, 524, 525, 533, 549, 552, 553, 554, 559, 566, 567, 568, 584, 586, 587, 592, 597, 598, 600, 605, 613, 645, 815, 825, 841, 881], "8": [23, 24, 25, 26, 27, 28, 38, 51, 53, 54, 55, 57, 58, 62, 105, 109, 110, 117, 120, 121, 122, 123, 124, 125, 127, 131, 132, 134, 137, 142, 144, 151, 155, 156, 157, 160, 165, 169, 171, 173, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 189, 194, 195, 196, 201, 203, 204, 207, 238, 250, 261, 267, 268, 300, 306, 309, 310, 361, 377, 398, 400, 401, 408, 409, 412, 413, 415, 417, 419, 426, 432, 447, 452, 460, 466, 470, 486, 491, 492, 495, 499, 501, 505, 509, 510, 511, 512, 513, 514, 519, 520, 521, 522, 523, 524, 533, 549, 552, 553, 554, 555, 559, 565, 568, 572, 573, 581, 584, 586, 587, 592, 595, 596, 601, 602, 605, 613, 640, 641, 680, 694, 778, 789, 792, 794, 795, 796, 798, 831, 836, 844, 881], "9": [23, 24, 25, 28, 54, 62, 117, 133, 140, 142, 146, 165, 179, 188, 201, 204, 206, 207, 209, 223, 238, 250, 261, 278, 281, 300, 305, 309, 310, 313, 329, 338, 339, 361, 366, 374, 377, 398, 408, 410, 412, 418, 428, 432, 470, 487, 489, 521, 533, 564, 565, 567, 572, 587, 592, 595, 601, 602, 613, 689, 698, 700, 706, 711, 712, 716, 718, 730, 750, 789, 797, 799, 812, 881], "ham": [23, 24, 25, 28, 83, 120, 122, 123, 124, 125, 131, 132, 134, 141, 142, 144, 151, 155, 156, 157, 160, 163, 165, 169, 171, 173, 175, 177, 178, 179, 181, 182, 184, 185, 186, 187, 188, 193, 194, 195, 196, 203, 204, 238, 488, 549, 552, 553, 554, 559, 568, 584, 586, 587, 592, 597, 603, 613], "d": [23, 24, 25, 28, 45, 62, 101, 121, 137, 141, 142, 145, 151, 154, 188, 190, 201, 204, 207, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 238, 315, 355, 426, 439, 444, 456, 460, 487, 533, 568, 592, 602, 613, 691, 714, 823, 828, 840, 844], "e": [23, 24, 25, 28, 45, 88, 89, 91, 92, 96, 102, 104, 121, 137, 142, 154, 188, 190, 201, 207, 238, 343, 347, 355, 380, 423, 426, 431, 500, 533, 571, 602, 613, 724, 802, 805, 815, 863, 881], "dirpath": [23, 24, 25, 28, 99, 238], "new_fil": [23, 24, 25, 28, 238], "has_head": [24, 88, 89, 91, 99, 238], "sep": [24, 85, 88, 89, 99, 238, 490], "quot": [24, 88, 89, 99, 238], "batch_siz": [24, 88, 89, 103, 238], "1024": [24, 28, 88, 89, 103, 238, 613], "datetime_format": [24, 238], "date_format": [24, 238], "time_format": [24, 238], "float_precis": [24, 238], "null_valu": [24, 88, 89, 99, 238], "_io": [24, 87, 91, 92, 238], "comma": [24, 238], "csv": [24, 88, 89, 91, 99, 238, 542, 606], "result": [24, 26, 27, 54, 78, 80, 82, 98, 99, 101, 102, 104, 111, 128, 139, 150, 162, 182, 209, 238, 344, 345, 346, 375, 408, 410, 411, 412, 413, 414, 415, 417, 418, 419, 423, 425, 455, 456, 484, 493, 494, 495, 508, 522, 533, 545, 563, 573, 581, 589, 605, 613, 621, 726, 727, 728, 761, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 805, 808, 839, 840, 863, 881], "instead": [24, 26, 27, 86, 96, 110, 114, 117, 139, 162, 164, 238, 260, 262, 446, 484, 509, 512, 522, 533, 557, 562, 563, 605, 613, 631, 634, 803, 804, 830, 881], "whether": [24, 59, 64, 80, 82, 111, 139, 140, 238, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 613], "header": [24, 28, 88, 89, 91, 99, 125, 167, 198, 238, 613], "field": [24, 46, 200, 238, 284, 456, 457, 465, 493, 494, 598, 613, 657, 840, 841, 850], "symbol": [24, 238], "byte": [24, 39, 88, 89, 91, 92, 93, 96, 97, 99, 126, 238, 287, 290, 291, 446, 449, 613, 659, 662, 663, 725, 830, 833, 881], "process": [24, 238, 613], "per": [24, 109, 110, 137, 162, 163, 218, 220, 222, 225, 226, 227, 228, 229, 230, 231, 232, 238, 268, 270, 641, 643], "thread": [24, 85, 88, 89, 98, 112, 238, 268, 641], "specifi": [24, 54, 64, 71, 78, 80, 82, 110, 126, 130, 238, 344, 345, 346, 352, 407, 447, 452, 533, 558, 613, 725, 726, 727, 728, 733, 831, 836, 881], "defin": [24, 31, 64, 108, 109, 110, 117, 139, 140, 162, 166, 211, 238, 251, 411, 412, 413, 414, 415, 417, 418, 419, 483, 507, 533, 563, 564, 580, 607, 613, 622, 881], "chrono": [24, 238, 334, 460, 714, 844], "rust": [24, 28, 72, 92, 96, 117, 211, 238, 251, 533, 607], "crate": [24, 238], "fraction": [24, 106, 107, 177, 238, 332, 399, 421, 460, 533, 712, 778, 800, 881], "second": [24, 64, 139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 460, 485, 497, 498, 533, 563, 564, 569, 613, 708, 711, 716], "precis": [24, 238, 311, 460, 687], "infer": [24, 79, 80, 82, 88, 89, 91, 99, 103, 108, 117, 238, 408, 460, 533, 787, 881], "maximum": [24, 88, 89, 99, 109, 110, 111, 155, 238, 263, 295, 296, 385, 395, 404, 509, 533, 574, 613, 636, 670, 671, 695, 766, 774, 779, 783, 881], "timeunit": [24, 31, 32, 64, 238, 311, 335, 340, 687, 715, 720, 858, 881], "frame": [24, 54, 91, 110, 117, 159, 162, 166, 195, 201, 238, 578, 580, 613], "datetim": [24, 39, 64, 81, 121, 137, 139, 140, 152, 202, 238, 266, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 362, 411, 412, 413, 414, 415, 417, 418, 419, 460, 473, 487, 498, 507, 512, 533, 563, 564, 569, 613, 639, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 744, 766, 769, 774, 775, 804, 844, 858, 865, 881], "decim": [24, 39, 238, 420, 533, 799, 881], "place": [24, 123, 144, 145, 172, 181, 182, 185, 204, 238, 260, 262, 272, 279, 424, 425, 533, 588, 589, 592, 613, 631, 634, 645, 652, 784, 786, 807, 808, 817, 881], "appli": [24, 59, 62, 99, 108, 110, 111, 124, 133, 166, 209, 238, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 342, 345, 346, 383, 398, 410, 411, 412, 414, 418, 460, 481, 484, 493, 494, 502, 508, 516, 533, 553, 565, 572, 573, 580, 613, 689, 692, 694, 698, 700, 703, 705, 706, 709, 710, 712, 718, 719, 722, 727, 728, 789, 790, 791, 793, 797, 844, 881], "float64": [24, 86, 110, 114, 125, 126, 133, 137, 178, 238, 252, 253, 254, 255, 256, 257, 292, 298, 299, 332, 347, 368, 370, 429, 430, 471, 472, 487, 488, 500, 533, 554, 586, 613, 712], "datatyp": [24, 26, 39, 46, 52, 84, 86, 88, 89, 91, 93, 97, 111, 114, 133, 178, 238, 292, 347, 426, 460, 473, 483, 484, 488, 500, 507, 508, 533, 542, 554, 586, 605, 613, 622, 664, 681, 723, 741, 744, 756, 759, 809, 844, 865, 881], "repres": [24, 40, 52, 64, 77, 78, 80, 81, 82, 238, 368, 370, 488, 507, 533, 804, 819, 870, 881], "null": [24, 54, 62, 79, 88, 89, 99, 101, 121, 124, 130, 133, 134, 146, 151, 156, 157, 163, 169, 181, 182, 185, 186, 187, 191, 200, 203, 238, 247, 250, 260, 262, 267, 269, 270, 273, 279, 284, 286, 295, 296, 297, 300, 307, 309, 310, 314, 317, 320, 322, 324, 327, 333, 344, 345, 346, 347, 350, 351, 352, 353, 357, 361, 368, 369, 370, 371, 372, 377, 397, 399, 405, 410, 411, 412, 413, 414, 415, 417, 418, 419, 424, 425, 426, 428, 433, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 449, 452, 454, 456, 457, 458, 463, 473, 480, 481, 487, 489, 490, 500, 507, 521, 533, 553, 558, 567, 568, 588, 589, 592, 598, 603, 605, 613, 622, 631, 634, 640, 652, 657, 670, 682, 685, 690, 693, 699, 701, 704, 707, 713, 726, 727, 728, 731, 733, 738, 754, 755, 777, 778, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 802, 807, 808, 812, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 836, 838, 840, 841, 842, 863, 865, 871, 881], "empti": [24, 69, 91, 118, 119, 148, 158, 238, 518, 546, 547, 577, 613, 669, 673, 746, 881], "ipccompress": [25, 238], "arrow": [25, 65, 77, 92, 102, 190, 221, 238, 859, 863, 881], "ipc": [25, 92, 93, 101, 102, 238, 542], "binari": [25, 238, 287, 289, 290, 291, 659, 661, 662, 663], "stream": [25, 61, 238, 548, 550, 556, 581, 590, 613], "feather": [25, 92, 102, 238, 542], "lz4": [25, 28, 238, 613], "zstd": [25, 28, 238, 613], "pretti": [26, 238], "row_ori": [26, 238], "json_lin": [26, 94, 238], "to_str": [26, 238, 605, 613], "io": [26, 27, 94, 95, 238, 583, 605, 613, 888], "iobas": [26, 27, 94, 95, 238, 583, 605, 613], "serial": [26, 27, 238], "represent": [26, 27, 238, 293, 313, 316, 318, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 342, 473, 533, 550, 551, 571, 613, 666, 689, 692, 694, 698, 700, 703, 705, 706, 709, 710, 712, 718, 719, 722, 865, 881], "orient": [26, 55, 57, 80, 82, 238], "slower": [26, 80, 82, 117, 164, 202, 211, 238, 251, 533, 607], "common": [26, 238], "deprec": [26, 61, 94, 238, 241, 605, 613], "argument": [26, 28, 61, 88, 90, 94, 96, 100, 139, 140, 156, 165, 166, 167, 187, 195, 202, 238, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 580, 605, 613, 711, 716, 881], "toggl": [26, 94, 113, 238, 460, 844], "ndjson": [26, 94, 238], "ignor": [26, 61, 110, 111, 156, 187, 238, 267, 307, 395, 396, 533, 605, 613, 640, 682, 774, 775, 881], "write_ndjson": [26, 238], "newlin": [27, 95, 103, 238], "delimit": [27, 88, 89, 95, 99, 103, 238, 437, 821], "parquetcompress": [28, 238], "compression_level": [28, 238, 613], "statist": [28, 88, 89, 121, 238, 345, 346, 375, 411, 412, 413, 414, 415, 416, 417, 418, 419, 431, 533, 613, 681, 727, 728, 761, 795, 815, 881], "row_group_s": [28, 238, 613], "use_pyarrow": [28, 88, 92, 96, 238, 613, 862, 881], "pyarrow_opt": [28, 90, 96, 100, 238], "object": [28, 64, 78, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 109, 110, 111, 153, 195, 238, 507, 542, 547, 562, 566, 571, 583, 613, 635, 665, 686, 820, 859, 881], "parquet": [28, 96, 97, 104, 238, 542, 613], "gzip": [28, 238, 613], "lzo": [28, 238, 613], "brotli": [28, 238, 613], "choos": [28, 238, 613], "good": [28, 238, 613], "perform": [28, 69, 88, 89, 92, 96, 99, 102, 103, 104, 117, 139, 140, 152, 170, 211, 238, 251, 533, 563, 564, 569, 604, 607, 613], "fast": [28, 238, 423, 533, 613, 805, 881], "decompress": [28, 238, 613], "backward": [28, 130, 152, 238, 286, 352, 533, 558, 569, 613, 733, 881], "guarante": [28, 88, 89, 238, 556, 613], "deal": [28, 238, 404, 460, 533, 613, 783, 844, 881], "older": [28, 238, 613], "reader": [28, 85, 88, 89, 92, 96, 238, 543, 613], "level": [28, 99, 102, 103, 104, 110, 117, 133, 162, 238, 353, 533, 565, 572, 613], "higher": [28, 169, 222, 238, 403, 415, 515, 533, 582, 613, 782, 794, 881], "mean": [28, 83, 88, 89, 96, 99, 121, 130, 167, 193, 238, 349, 352, 355, 412, 431, 443, 486, 533, 558, 613, 681, 730, 733, 738, 791, 815, 827, 881], "smaller": [28, 126, 238, 556, 613, 725, 881], "disk": [28, 238, 590, 613], "min": [28, 110, 111, 121, 130, 139, 140, 167, 238, 295, 297, 303, 352, 404, 414, 518, 533, 558, 563, 564, 613, 670, 672, 677, 681, 733, 783, 793, 881], "11": [28, 138, 140, 238, 309, 310, 328, 331, 336, 361, 399, 418, 432, 463, 488, 522, 533, 548, 562, 564, 565, 572, 581, 595, 613, 622, 708, 711, 716, 789, 881], "22": [28, 238, 331, 336, 340, 460, 488, 613, 711, 716, 720, 844], "extra": [28, 88, 90, 91, 92, 96, 100, 102, 104, 128, 164, 238, 613, 621, 881], "comput": [28, 61, 62, 66, 126, 152, 199, 222, 238, 245, 252, 253, 254, 255, 256, 257, 275, 276, 277, 298, 299, 301, 302, 303, 304, 305, 308, 343, 348, 375, 380, 381, 393, 399, 402, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 428, 429, 430, 431, 435, 471, 472, 492, 499, 514, 519, 533, 566, 568, 569, 597, 603, 613, 617, 623, 624, 625, 626, 627, 628, 648, 649, 650, 674, 675, 676, 677, 678, 679, 683, 724, 725, 729, 761, 764, 765, 770, 778, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 812, 813, 814, 815, 818, 856, 857, 881], "size": [28, 88, 89, 109, 110, 111, 112, 126, 139, 201, 238, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 484, 533, 563, 613, 725, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 881], "group": [28, 138, 139, 140, 162, 164, 167, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238, 246, 251, 268, 398, 433, 434, 443, 469, 483, 533, 562, 563, 564, 606, 607, 608, 609, 613, 641, 827], "chunk": [28, 85, 88, 89, 99, 102, 103, 104, 110, 111, 128, 161, 238, 250, 405, 533, 613, 621, 668, 737, 771, 784, 859, 881], "reduc": [28, 88, 89, 96, 99, 102, 103, 104, 216, 217, 219, 223, 238, 426, 502, 533, 613, 767, 781, 809, 852, 881], "memori": [28, 62, 77, 80, 81, 82, 88, 89, 92, 96, 99, 102, 103, 104, 117, 128, 183, 211, 221, 238, 251, 405, 426, 533, 607, 613, 621, 784, 809, 810, 881], "pressur": [28, 96, 103, 104, 238, 426, 533, 613, 809, 881], "improv": [28, 92, 102, 238, 613], "speed": [28, 238, 613], "minimum": [28, 109, 110, 111, 133, 160, 238, 295, 297, 344, 345, 346, 392, 396, 404, 512, 533, 579, 613, 670, 672, 702, 726, 727, 728, 775, 780, 783, 881], "64": [28, 34, 37, 50, 56, 58, 238, 400, 533, 613, 778, 881], "implement": [28, 100, 117, 211, 238, 251, 533, 607, 803, 804, 881], "v": [28, 63, 126, 238, 422, 533, 801, 881], "At": [28, 238], "moment": [28, 165, 238, 375, 431, 533, 761, 815, 881], "pass": [28, 54, 64, 78, 91, 100, 109, 110, 111, 165, 166, 238, 315, 360, 533, 566, 573, 580, 590, 613, 622, 691, 881], "pyarrow": [28, 77, 81, 88, 90, 92, 96, 100, 101, 105, 190, 194, 195, 238, 543, 859, 862, 863, 881], "write_t": [28, 238], "base": [29, 124, 131, 139, 140, 221, 238, 343, 380, 381, 509, 512, 533, 542, 553, 559, 563, 564, 613, 724, 764, 765, 872, 881], "calendar": [30, 31, 139, 140, 152, 202, 238, 318, 328, 331, 336, 342, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 694, 708, 711, 716, 722], "date": [31, 39, 54, 64, 88, 89, 99, 101, 121, 137, 139, 140, 152, 195, 238, 266, 311, 313, 314, 315, 316, 317, 318, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 362, 411, 412, 413, 414, 415, 417, 418, 419, 460, 473, 487, 512, 533, 542, 563, 564, 569, 613, 639, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 744, 766, 769, 774, 775, 804, 844, 865, 881], "time": [31, 32, 39, 60, 61, 64, 99, 128, 139, 140, 152, 202, 238, 265, 266, 284, 311, 312, 315, 328, 335, 337, 340, 341, 460, 473, 474, 489, 490, 496, 497, 498, 517, 533, 542, 548, 563, 564, 569, 581, 613, 621, 638, 687, 688, 691, 708, 715, 717, 720, 721, 844, 858, 865, 866, 881], "time_unit": [31, 32, 64, 340, 720, 881], "u": [31, 32, 64, 311, 315, 335, 340, 460, 517, 687, 691, 715, 720, 858, 881], "time_zon": [31, 64], "m": [31, 32, 64, 164, 238, 311, 315, 335, 340, 460, 498, 687, 691, 714, 715, 720, 844, 858, 881], "unit": [31, 32, 64, 110, 111, 126, 238, 311, 315, 335, 340, 382, 389, 477, 533, 581, 613, 687, 691, 715, 720, 725, 858, 881], "timezon": [31, 64, 460, 844], "zoneinfo": 31, "run": [31, 61, 117, 153, 211, 238, 251, 268, 306, 517, 518, 533, 548, 556, 581, 590, 607, 613, 641, 680, 881, 887], "available_timezon": 31, "full": [31, 60, 88, 89, 90, 99, 100], "attribut": [31, 32, 39, 108, 238, 526, 527, 529, 534, 537, 538, 539, 613, 873, 875, 877, 881, 884, 885, 886], "delta": [32, 90, 100, 514, 519, 542, 819, 870, 881], "32": [33, 36, 49, 56, 105, 140, 150, 238, 426, 533, 564, 613, 683, 709, 778, 794, 881], "bit": [33, 34, 35, 36, 37, 38, 48, 49, 50, 51, 406, 438, 533, 785, 822, 881], "float": [33, 34, 39, 63, 101, 106, 107, 108, 110, 111, 126, 129, 152, 169, 177, 182, 222, 238, 266, 294, 295, 296, 297, 309, 310, 332, 343, 344, 345, 346, 350, 351, 356, 361, 362, 364, 367, 368, 370, 371, 372, 380, 385, 392, 395, 396, 400, 403, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 425, 486, 487, 495, 509, 510, 511, 512, 515, 517, 520, 522, 524, 533, 557, 569, 582, 589, 590, 613, 639, 664, 667, 670, 671, 672, 683, 712, 724, 725, 726, 727, 728, 731, 732, 736, 749, 761, 764, 766, 767, 768, 769, 774, 775, 781, 782, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 803, 804, 815, 819, 852, 870, 881], "point": [33, 34, 100, 110, 111, 129, 139, 153, 177, 238, 294, 309, 310, 332, 351, 356, 368, 370, 420, 421, 533, 557, 563, 573, 613, 667, 712, 732, 736, 749, 799, 800, 881], "16": [35, 48, 56, 105, 139, 140, 206, 207, 238, 361, 412, 498, 499, 533, 563, 564, 590, 601, 602, 613, 711, 716, 778, 813, 856, 881], "sign": [35, 36, 37, 38, 328, 406, 463, 533, 708, 785, 847, 881], "integ": [35, 36, 37, 38, 48, 49, 50, 51, 109, 110, 139, 140, 238, 294, 332, 356, 406, 411, 412, 413, 414, 415, 416, 417, 418, 419, 484, 507, 533, 563, 564, 613, 629, 630, 667, 712, 736, 785, 795, 804, 881], "inner": [39, 45, 151, 238, 272, 308, 533, 568, 605, 613, 645, 683, 741, 881], "union": [39, 46, 54, 61, 62, 78, 84, 122, 124, 127, 138, 155, 156, 158, 160, 162, 164, 171, 179, 185, 187, 198, 200, 202, 207, 209, 238, 347, 366, 481, 482, 484, 485, 487, 488, 489, 490, 494, 495, 500, 508, 509, 512, 516, 518, 521, 522, 533, 548, 555, 556, 562, 581, 587, 590, 592, 602, 606, 613, 683, 750, 804, 881], "datatypeclass": [39, 46, 84, 484, 488], "timedelta": [39, 64, 139, 140, 202, 238, 313, 315, 316, 323, 325, 328, 329, 330, 331, 332, 335, 336, 338, 339, 342, 411, 412, 413, 414, 415, 417, 418, 419, 487, 533, 563, 564, 613, 695, 697, 702, 708, 711, 716, 766, 769, 774, 775, 881], "tupl": [39, 98, 117, 175, 176, 180, 238, 362, 408, 533, 581, 590, 613, 787, 806, 881], "nest": [39, 45, 126, 238, 542, 725, 881], "arrai": [39, 77, 80, 88, 89, 126, 190, 194, 238, 265, 274, 275, 276, 277, 278, 281, 282, 289, 295, 296, 297, 301, 302, 303, 304, 305, 381, 411, 412, 414, 417, 418, 419, 423, 439, 441, 443, 444, 445, 489, 499, 533, 638, 647, 648, 649, 650, 651, 654, 655, 661, 670, 671, 672, 676, 677, 678, 679, 683, 725, 765, 790, 791, 793, 796, 797, 798, 805, 810, 823, 825, 827, 828, 829, 859, 863, 871, 881], "within": [39, 106, 107, 152, 238, 569, 613], "wrap": [41, 100], "arbitrari": [41, 110], "python": [41, 64, 88, 89, 105, 117, 176, 211, 238, 251, 383, 483, 533, 607, 622, 695, 696, 697, 702, 862, 881], "queri": [42, 61, 92, 98, 99, 102, 103, 104, 128, 153, 166, 238, 284, 445, 548, 550, 551, 556, 565, 572, 581, 590, 604, 607, 613, 621, 829, 881, 887], "pars": [42, 88, 89, 91, 99, 102, 103, 460, 844], "given": [42, 44, 54, 63, 86, 88, 89, 99, 108, 109, 110, 111, 114, 117, 126, 166, 175, 181, 182, 238, 266, 279, 335, 343, 350, 380, 404, 407, 408, 411, 412, 414, 417, 418, 419, 424, 425, 444, 460, 474, 481, 533, 580, 588, 589, 613, 622, 639, 652, 715, 724, 725, 731, 764, 776, 783, 787, 790, 791, 793, 796, 797, 798, 807, 808, 828, 844, 866, 872, 881], "transform": [42, 117, 238, 383, 461, 462, 533], "lf": [44, 554, 559, 586, 600, 613], "under": [44, 55, 56, 57, 58, 526, 527, 529, 534, 537, 538, 539, 873, 875, 877, 884, 885, 886], "add": [44, 117, 128, 139, 207, 208, 238, 401, 466, 498, 525, 533, 563, 568, 601, 602, 603, 604, 613, 621, 881], "context": [45, 162, 238, 246, 251, 268, 353, 388, 433, 434, 478, 483, 491, 501, 518, 532, 533, 603, 613, 641], "manag": 45, "categor": [45, 83, 113, 151, 238, 293, 473, 533, 665, 666, 865, 881], "temporarili": [45, 139, 140, 238, 563, 564, 613], "cach": [45, 61, 92, 99, 102, 104, 113, 411, 412, 413, 414, 415, 417, 418, 419, 460, 533, 548, 556, 581, 590, 613, 844], "categori": [45, 63, 113, 293, 666], "until": [45, 153, 238], "finish": [45, 66, 128, 238, 621, 881], "global": [45, 110, 113], "invalid": [45, 88, 89, 99, 445, 829], "outermost": 45, "exit": 45, "df1": [45, 54, 62, 106, 128, 134, 204, 238], "color": [45, 211, 607], "red": [45, 211, 607], "green": [45, 211, 607], "blue": 45, "orang": [45, 120, 212, 213, 215, 216, 217, 219, 222, 223, 238], "uint8": [45, 108, 304, 305, 467, 533, 678, 679, 852, 881], "df2": [45, 54, 62, 106, 128, 134, 204, 238], "yellow": 45, "black": [45, 117, 238], "join": [45, 54, 61, 152, 238, 361, 398, 533, 548, 556, 569, 581, 590, 603, 613], "succe": [45, 88, 89, 99], "df_join": 45, "how": [45, 62, 79, 82, 98, 124, 151, 201, 238, 267, 293, 307, 361, 407, 533, 553, 568, 613, 640, 666, 682, 881], "cat": [45, 63, 438, 461, 462, 473, 490, 529, 533, 822, 877], "u8": [45, 83, 193, 238, 860, 881], "sequenc": [46, 54, 61, 62, 78, 79, 80, 82, 85, 109, 110, 111, 122, 124, 127, 128, 138, 139, 140, 151, 152, 158, 162, 164, 166, 167, 179, 185, 193, 198, 199, 200, 201, 202, 207, 209, 238, 347, 366, 383, 481, 482, 483, 485, 487, 488, 489, 490, 493, 494, 495, 500, 502, 508, 509, 512, 516, 518, 521, 522, 533, 555, 562, 563, 564, 568, 569, 580, 587, 592, 602, 606, 613, 621, 683, 750, 804, 881], "composit": 46, "make": [46, 62, 77, 81, 88, 89, 92, 96, 98, 102, 104, 138, 139, 140, 159, 162, 170, 202, 238, 337, 345, 346, 407, 456, 463, 533, 562, 563, 564, 578, 613, 717, 727, 728, 840, 847, 881], "up": [46, 152, 238, 294, 463, 533, 568, 569, 573, 613, 667, 847, 881], "dai": [47, 64, 139, 140, 152, 202, 238, 315, 325, 328, 329, 330, 331, 335, 336, 338, 339, 342, 411, 412, 413, 414, 415, 417, 418, 419, 496, 497, 498, 533, 563, 564, 569, 613, 708, 709, 711, 716, 719], "unsign": [48, 49, 50, 51, 406, 533, 785, 881], "could": [52, 66, 124, 139, 238, 292, 493, 502, 533, 553, 563, 613, 664, 881], "determin": [52, 54, 62, 79, 82, 88, 89, 91, 96, 104, 117, 133, 139, 140, 198, 202, 238, 284, 293, 388, 407, 411, 412, 413, 414, 415, 417, 418, 419, 431, 485, 533, 563, 564, 613, 657, 666, 815, 881], "static": [52, 607], "utf": 53, "intern": [54, 59, 64, 91, 191, 238, 484, 495, 509, 512, 517, 521, 522, 635, 665, 686, 820], "revers": [54, 126, 185, 238, 260, 262, 281, 301, 302, 303, 304, 305, 384, 401, 404, 423, 433, 434, 466, 474, 485, 533, 592, 613, 631, 634, 654, 676, 677, 678, 679, 757, 783, 805, 817, 866, 881], "uniqu": [54, 108, 109, 111, 149, 162, 220, 238, 261, 365, 373, 394, 460, 476, 478, 513, 533, 613, 633, 681, 748, 758, 772, 844, 868, 869, 881], "kei": [54, 60, 139, 152, 159, 164, 167, 171, 174, 221, 238, 563, 569, 578, 584, 585, 613], "contain": [54, 60, 78, 81, 90, 100, 162, 167, 238, 366, 439, 442, 443, 444, 445, 457, 458, 533, 581, 613, 735, 771, 823, 826, 827, 828, 829, 841, 842, 859, 881], "have": [54, 88, 89, 91, 106, 110, 111, 113, 128, 170, 221, 238, 306, 344, 345, 346, 389, 404, 533, 590, 604, 613, 621, 680, 688, 726, 727, 728, 738, 783, 881], "inject": 54, "fill": [54, 62, 86, 114, 129, 130, 182, 201, 238, 286, 350, 351, 352, 357, 361, 411, 412, 414, 417, 418, 419, 425, 447, 452, 463, 503, 533, 557, 558, 589, 603, 613, 731, 732, 733, 776, 790, 791, 793, 796, 797, 798, 808, 831, 836, 847, 881], "non": [54, 158, 238, 399, 410, 411, 412, 413, 414, 415, 417, 418, 419, 439, 444, 487, 490, 533, 577, 613, 778, 789, 790, 791, 792, 793, 794, 796, 797, 798, 823, 828, 863, 881], "each": [54, 103, 106, 107, 109, 117, 137, 152, 211, 212, 214, 224, 238, 251, 271, 283, 331, 336, 355, 404, 444, 456, 457, 483, 533, 569, 581, 607, 608, 609, 613, 644, 656, 668, 711, 716, 783, 828, 840, 841, 881], "sort": [54, 55, 138, 139, 140, 152, 159, 164, 166, 167, 202, 209, 214, 224, 238, 260, 262, 293, 353, 423, 434, 478, 480, 485, 533, 551, 563, 564, 569, 578, 580, 581, 590, 608, 609, 613, 631, 634, 666, 757, 805, 867, 869, 881], "origin": [54, 88, 89, 199, 238, 374, 406, 439, 443, 444, 445, 447, 452, 463, 533, 597, 613, 823, 827, 828, 829, 831, 836, 847], "order": [54, 106, 138, 139, 140, 164, 166, 167, 177, 199, 202, 238, 260, 262, 293, 404, 421, 422, 423, 433, 434, 465, 475, 476, 485, 533, 562, 563, 564, 592, 597, 613, 631, 634, 666, 757, 783, 788, 800, 801, 805, 850, 867, 868, 881], "unless": [54, 78, 871, 881], "case": [54, 104, 117, 128, 139, 140, 238, 383, 388, 389, 525, 533, 563, 564, 613, 621, 881], "final": [54, 104, 556, 613], "doe": [54, 73, 80, 82, 88, 89, 90, 91, 99, 100, 101, 106, 107, 128, 238, 337, 340, 465, 476, 501, 533, 556, 562, 573, 613, 621, 717, 720, 738, 810, 871, 881], "receiv": [54, 117, 166, 238, 580, 613], "now": [54, 140, 238, 564, 613], "ha": [54, 100, 202, 238, 241, 251, 306, 374, 389, 474, 483, 533, 546, 607, 613, 669, 680, 738, 749, 866, 881], "whose": [54, 152, 167, 238, 347, 500, 533, 569, 613], "post": 54, "constrain": 54, "newli": 54, "descend": [54, 185, 238, 260, 262, 423, 533, 592, 613, 631, 634, 757, 805, 881], "singl": [54, 62, 88, 89, 98, 99, 109, 124, 128, 135, 185, 209, 238, 328, 353, 383, 405, 408, 437, 453, 459, 480, 483, 488, 508, 517, 533, 553, 592, 606, 613, 621, 708, 784, 787, 821, 832, 837, 843, 859, 881], "boolean": [54, 59, 131, 133, 137, 207, 238, 248, 249, 266, 287, 353, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 480, 533, 559, 602, 613, 619, 620, 632, 639, 659, 734, 743, 745, 747, 748, 750, 751, 752, 753, 754, 755, 758, 779, 780, 803, 822, 872, 881], "associ": 54, "2022": [54, 64, 105, 121, 137, 238, 460, 498, 694, 844], "x": [54, 88, 89, 99, 109, 110, 126, 144, 147, 149, 151, 158, 238, 251, 265, 272, 358, 383, 407, 431, 456, 473, 495, 522, 533, 568, 573, 577, 591, 613, 618, 622, 733, 759, 815, 840, 865, 881], "y": [54, 109, 110, 126, 147, 149, 151, 158, 238, 265, 272, 407, 460, 495, 522, 533, 568, 577, 591, 613, 618, 714, 844, 881], "12": [54, 63, 64, 139, 140, 152, 202, 238, 304, 316, 325, 330, 331, 336, 342, 399, 426, 496, 497, 533, 563, 564, 565, 569, 572, 590, 595, 613, 622, 705, 711, 716, 799, 881], "df3": [54, 238], "09": [54, 140, 238, 564, 613, 689], "01": [54, 64, 121, 137, 139, 140, 202, 238, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 460, 498, 563, 564, 613, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 844], "02": [54, 64, 137, 139, 140, 202, 238, 311, 315, 316, 317, 323, 324, 325, 332, 333, 335, 338, 340, 420, 498, 533, 563, 564, 613, 687, 691, 692, 693, 695, 696, 697, 698, 700, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720], "03": [54, 64, 139, 140, 202, 238, 311, 314, 315, 317, 324, 325, 331, 332, 333, 335, 336, 338, 340, 341, 563, 564, 613, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 700, 702, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 718, 719, 720, 721], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 88, 89, 99, 164, 199, 202, 238, 374, 487, 533, 597, 613], "easili": 54, "calcul": [54, 139, 238, 267, 307, 344, 345, 346, 375, 382, 416, 431, 477, 533, 563, 613, 640, 682, 726, 727, 728, 761, 795, 815, 819, 870, 881], "wise": [54, 124, 133, 238, 252, 253, 254, 255, 256, 257, 298, 299, 348, 381, 428, 429, 430, 471, 472, 493, 494, 502, 516, 533, 553, 613, 623, 624, 625, 626, 627, 628, 674, 675, 729, 765, 812, 813, 814, 856, 857, 881], "dot": [54, 533, 590, 613, 881], "product": [54, 165, 238, 304, 308, 533, 678, 683, 881], "fill_nul": [54, 129, 238, 460, 533, 557, 603, 613, 844, 881], "sum": [54, 126, 133, 138, 140, 150, 167, 209, 238, 251, 284, 304, 305, 343, 353, 398, 411, 412, 414, 417, 418, 419, 480, 481, 493, 495, 502, 512, 533, 548, 551, 556, 562, 564, 581, 590, 613, 678, 679, 724, 725, 790, 791, 793, 796, 797, 798, 881], "167": 54, "47": 54, "callabl": [55, 56, 57, 58, 99, 117, 133, 166, 211, 238, 251, 284, 383, 384, 410, 483, 493, 494, 502, 508, 516, 533, 573, 580, 607, 613, 622, 657, 789, 881], "decor": [55, 56, 57, 58, 110, 111], "access": [55, 56, 57, 58, 603, 613], "by_first_letter_of_column_nam": 55, "f": [55, 100, 117, 121, 124, 137, 154, 190, 198, 201, 211, 238, 251, 284, 383, 384, 426, 460, 483, 489, 493, 494, 502, 508, 516, 533, 553, 573, 602, 607, 613, 657, 844], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 438, 442, 826], "slice": [55, 61, 126, 238, 271, 283, 410, 411, 412, 413, 414, 415, 417, 418, 419, 533, 548, 556, 573, 581, 590, 613, 644, 656, 725, 789, 790, 791, 792, 793, 794, 796, 797, 798, 881], "to_seri": [55, 59, 238, 284, 657], "xx": [55, 57], "xy": [55, 57], "yy": [55, 57], "yz": [55, 57], "a1": [55, 57], "a2": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 286, 404, 533, 783, 881], "p": 56, "ceil": [56, 533, 881], "previou": [56, 399, 533, 778, 881], "floor": [56, 533, 881], "nearest": [56, 152, 169, 222, 238, 294, 356, 403, 415, 515, 533, 569, 582, 613, 667, 736, 782, 794, 881], "round": [56, 294, 356, 471, 533, 667, 736, 881], "24": [56, 117, 126, 140, 238, 304, 306, 317, 533, 564, 613, 680, 693, 881], "55": 56, "001": [56, 320, 322, 327, 498, 699, 701, 707], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "128": [56, 778, 881], "split_by_column_dtyp": 57, "dtype": [57, 79, 86, 88, 89, 99, 108, 109, 110, 111, 114, 139, 140, 152, 195, 238, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 272, 292, 295, 296, 297, 298, 299, 304, 305, 314, 317, 320, 322, 324, 327, 333, 340, 347, 349, 355, 382, 383, 406, 407, 411, 412, 413, 414, 415, 417, 418, 419, 426, 429, 430, 437, 454, 467, 469, 471, 472, 473, 477, 478, 483, 484, 488, 489, 491, 500, 507, 508, 521, 533, 563, 564, 569, 613, 636, 637, 638, 645, 664, 669, 670, 671, 672, 678, 679, 690, 693, 699, 701, 704, 707, 713, 720, 725, 730, 741, 746, 788, 802, 809, 821, 838, 844, 852, 863, 864, 865, 881], "collect": [57, 61, 100, 101, 153, 190, 238, 251, 398, 484, 489, 517, 521, 533, 552, 553, 555, 556, 557, 558, 559, 560, 562, 563, 565, 567, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 580, 582, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 599, 601, 602, 603, 604, 607, 613], "i16": [57, 426, 533], "i32": [57, 79, 110, 179, 238, 292, 342, 426, 525, 533, 587, 613, 694, 722], "f32": [57, 238, 268, 404, 426, 499, 533, 641, 783, 881], "31": [58, 105, 313, 314, 325, 338, 460, 496, 497, 689, 690, 844], "42": [58, 140, 141, 238, 564, 613, 739, 881], "25": [58, 64, 139, 140, 152, 202, 206, 207, 238, 331, 336, 342, 563, 564, 569, 575, 599, 601, 602, 613, 711, 716, 724, 778, 881], "961": 58, "1764": 58, "4160": 58, "27": [58, 223, 330, 342, 400, 533], "125": [58, 778, 881], "condit": [59, 124, 131, 175, 238, 442, 458, 553, 559, 613], "eager": [59, 139, 201, 238, 484, 507, 517, 521, 532, 542, 563, 613], "indic": [59, 83, 87, 88, 89, 92, 96, 99, 108, 109, 111, 139, 140, 238, 364, 367, 368, 370, 371, 372, 411, 412, 413, 414, 415, 417, 418, 419, 422, 428, 469, 533, 563, 564, 613, 747, 751, 752, 753, 754, 755, 801, 812, 854, 881], "where": [59, 98, 124, 128, 158, 206, 238, 339, 343, 422, 431, 519, 525, 533, 577, 613, 621, 632, 719, 724, 801, 815, 819, 870, 872, 881], "evalu": [59, 129, 131, 152, 207, 238, 306, 360, 362, 366, 482, 484, 499, 521, 533, 559, 566, 568, 569, 601, 602, 613, 632, 680, 872, 881], "eagerli": [59, 517], "oppos": 59, "lazili": [59, 88, 89, 99, 100, 102, 103, 104], "u32": [59, 139, 163, 208, 212, 220, 223, 238, 246, 258, 259, 260, 261, 262, 263, 264, 274, 300, 301, 313, 316, 323, 325, 329, 330, 332, 338, 339, 377, 394, 397, 404, 422, 439, 446, 449, 473, 476, 491, 513, 533, 563, 604, 613, 631, 632, 633, 647, 664, 689, 692, 698, 700, 703, 705, 706, 709, 710, 712, 718, 719, 783, 823, 830, 833, 865, 868, 869, 881], "build": 60, "wa": 60, "compil": [60, 263, 264, 636, 637], "gate": 60, "info": [60, 90, 100, 105], "otherwis": [60, 159, 179, 238, 295, 296, 297, 344, 345, 346, 406, 525, 533, 578, 587, 613, 622, 670, 671, 672, 726, 727, 728, 785, 803, 804, 881], "version": [60, 90, 100, 105, 241, 516], "follow": [60, 88, 89, 90, 98, 99, 100, 117, 139, 140, 152, 166, 202, 238, 251, 328, 331, 336, 355, 404, 411, 412, 413, 414, 415, 417, 418, 419, 483, 526, 527, 529, 533, 534, 537, 538, 539, 562, 563, 564, 569, 580, 613, 708, 711, 716, 783, 803, 804, 873, 875, 877, 881, 884, 885, 886, 888], "depend": [60, 105, 251, 263, 264, 388, 404, 483, 501, 533, 636, 637, 783, 881], "host": [60, 88, 92, 96, 102, 104], "git": 60, "lazy_fram": 61, "type_coercion": [61, 548, 550, 556, 581, 590, 613], "predicate_pushdown": [61, 548, 550, 556, 573, 581, 590, 613], "projection_pushdown": [61, 548, 550, 556, 573, 581, 590, 613], "simplify_express": [61, 548, 550, 556, 581, 590, 613], "string_cach": 61, "no_optim": [61, 548, 556, 573, 581, 613], "slice_pushdown": [61, 548, 550, 556, 573, 581, 590, 613], "common_subplan_elimin": [61, 548, 550, 556, 581, 590, 613], "multipl": [61, 62, 88, 89, 99, 102, 104, 109, 111, 126, 128, 131, 139, 144, 164, 167, 185, 207, 209, 238, 347, 389, 393, 408, 411, 412, 413, 414, 415, 417, 418, 419, 434, 485, 493, 494, 500, 502, 508, 516, 525, 533, 552, 559, 563, 592, 602, 606, 613, 621, 725, 770, 787, 881], "graph": [61, 153, 238, 566, 603, 613], "parallel": [61, 62, 85, 96, 98, 104, 139, 152, 153, 166, 238, 268, 306, 533, 542, 563, 568, 569, 613, 641, 680, 881], "threadpool": 61, "coercion": [61, 407, 533, 548, 556, 581, 590, 613], "optim": [61, 96, 99, 102, 103, 104, 153, 166, 170, 238, 548, 550, 551, 556, 573, 581, 590, 604, 613], "predic": [61, 99, 101, 102, 103, 104, 131, 175, 238, 353, 480, 525, 533, 548, 556, 559, 573, 581, 590, 604, 613, 734, 803, 804, 881], "pushdown": [61, 548, 556, 573, 581, 590, 604, 613, 803, 804, 881], "project": [61, 99, 100, 102, 103, 104, 251, 433, 434, 533, 548, 556, 573, 581, 590, 605, 613], "simplifi": [61, 548, 556, 581, 590, 613], "turn": [61, 88, 89, 99, 113, 355, 478, 533, 548, 556, 573, 581, 613], "off": [61, 88, 89, 99, 113, 478, 533, 548, 556, 573, 581, 613], "Will": [61, 198, 238, 509, 512, 548, 556, 581, 590, 613, 881], "try": [61, 74, 75, 88, 89, 91, 92, 96, 99, 102, 104, 548, 556, 581, 590, 613], "branch": [61, 548, 556, 581, 590, 613], "subplan": [61, 548, 556, 581, 590, 613], "occur": [61, 393, 404, 533, 548, 556, 581, 590, 613, 770, 783, 881], "part": [61, 77, 456, 457, 548, 556, 581, 590, 603, 613, 689, 692, 698, 700, 703, 705, 706, 712, 722, 840, 841], "fashion": [61, 151, 238, 548, 556, 581, 590, 613], "alpha": [61, 344, 345, 346, 533, 548, 556, 581, 590, 613, 726, 727, 728, 881], "item": [62, 177, 238, 266, 270, 272, 349, 355, 421, 457, 533, 639, 643, 645, 730, 800, 841, 881], "rechunk": [62, 77, 81, 88, 89, 92, 96, 99, 102, 103, 104, 128, 238, 533, 621, 668, 771, 881], "concatmethod": 62, "vertic": [62, 128, 201, 204, 238, 437, 509, 821], "aggreg": [62, 88, 89, 133, 138, 139, 155, 156, 157, 160, 162, 167, 168, 169, 186, 187, 201, 203, 209, 210, 213, 215, 221, 238, 246, 353, 379, 383, 398, 410, 411, 412, 413, 414, 415, 417, 418, 419, 478, 493, 494, 495, 502, 506, 509, 512, 516, 522, 533, 563, 573, 574, 575, 576, 579, 582, 593, 594, 599, 606, 613, 789, 790, 791, 793, 796, 797, 798, 881], "concaten": [62, 133, 238, 668, 771, 881], "sure": [62, 77, 81, 88, 89, 92, 98, 138, 170, 238, 484, 562, 613], "contigu": [62, 77, 81, 88, 89, 92, 99, 102, 103, 104, 170, 238], "diagon": [62, 198, 238], "strategi": [62, 88, 108, 109, 110, 111, 130, 139, 151, 152, 161, 238, 284, 352, 533, 558, 563, 568, 569, 613, 657, 733, 881], "vstack": [62, 128, 238], "find": [62, 132, 238, 422, 485, 533, 801, 881], "schema": [62, 74, 79, 88, 89, 93, 97, 99, 103, 110, 117, 118, 119, 125, 159, 238, 284, 388, 546, 547, 554, 573, 578, 605, 607, 613, 673, 881], "miss": [62, 129, 238, 286, 357, 361, 368, 370, 519, 533, 557, 613, 871, 881], "stack": [62, 144, 204, 238], "length": [62, 63, 86, 103, 109, 114, 139, 140, 184, 238, 280, 306, 331, 336, 389, 410, 411, 412, 413, 414, 415, 417, 418, 419, 432, 447, 449, 452, 454, 463, 484, 533, 563, 564, 581, 591, 613, 653, 668, 680, 711, 716, 762, 776, 789, 790, 791, 792, 793, 794, 796, 797, 798, 816, 831, 833, 836, 838, 847, 881], "don": [62, 201, 238, 268, 306, 483, 533, 641, 680, 802, 871, 881], "t": [62, 91, 99, 117, 201, 238, 268, 306, 343, 344, 345, 346, 460, 483, 525, 533, 641, 680, 724, 726, 727, 728, 802, 844, 871, 881], "match": [62, 73, 78, 80, 82, 106, 107, 130, 152, 175, 238, 438, 439, 442, 444, 445, 448, 450, 451, 453, 458, 459, 460, 558, 569, 613, 822, 823, 826, 828, 829, 832, 834, 835, 837, 842, 843, 844], "relev": 62, "execut": [62, 153, 238, 268, 545, 581, 613, 641], "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "bin": [63, 527, 875], "label": [63, 78, 80, 82, 238, 410, 411, 412, 413, 414, 415, 417, 418, 419, 533, 581, 613, 789, 790, 791, 792, 793, 794, 796, 797, 798, 881], "break_point_label": 63, "break_point": 63, "category_label": 63, "discret": [63, 267, 307, 343, 533, 640, 682, 724, 881], "creat": [63, 64, 77, 80, 82, 100, 109, 110, 111, 118, 119, 139, 140, 163, 167, 202, 238, 331, 336, 405, 454, 478, 484, 489, 496, 497, 498, 533, 546, 547, 550, 551, 563, 564, 613, 669, 673, 685, 711, 716, 776, 784, 838, 863, 881], "assign": [63, 109, 139, 238, 404, 456, 457, 533, 563, 613, 783, 840, 841, 881], "must": [63, 78, 80, 82, 90, 100, 106, 139, 140, 152, 159, 175, 238, 284, 347, 383, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 573, 578, 613, 881], "len": [63, 109, 110, 301, 408, 447, 452, 463, 533, 787, 831, 836, 847, 881], "breakpoint": 63, "experiment": [63, 101, 201, 207, 238, 306, 331, 411, 412, 413, 414, 415, 417, 418, 419, 533, 602, 613, 680, 711, 881], "being": [63, 88, 89, 99, 101, 201, 238, 306, 331, 411, 412, 413, 414, 415, 417, 418, 419, 499, 525, 533, 680, 711, 881], "consid": [63, 101, 134, 158, 201, 207, 209, 221, 238, 295, 296, 297, 306, 331, 411, 412, 413, 414, 415, 417, 418, 419, 433, 493, 502, 533, 565, 572, 577, 602, 613, 670, 671, 672, 680, 711, 802, 803, 804, 881], "break": [63, 101, 201, 238, 306, 331, 411, 412, 413, 414, 415, 417, 418, 419, 533, 680, 711, 881], "30": [63, 128, 139, 144, 166, 172, 173, 191, 207, 238, 258, 259, 260, 262, 307, 314, 330, 331, 336, 342, 358, 426, 533, 563, 580, 602, 613, 690, 711, 716], "inf": [63, 110, 111, 257, 364, 367, 533, 628, 747, 751, 778, 881], "low": [64, 139, 238, 332, 484, 563, 613], "high": [64, 139, 238, 332, 484, 563, 613], "interv": [64, 139, 140, 202, 238, 331, 332, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 613, 689, 691, 692, 698, 700, 703, 705, 706, 709, 710, 711, 712, 714, 715, 716, 718, 719, 722], "close": [64, 139, 140, 238, 411, 412, 413, 414, 415, 417, 418, 419, 431, 533, 563, 564, 613, 815, 881], "closedwindow": [64, 139, 140, 238, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 613], "lower": [64, 99, 139, 169, 222, 238, 362, 382, 403, 406, 415, 484, 515, 533, 556, 563, 582, 613, 782, 785, 794, 881], "bound": [64, 88, 89, 126, 139, 238, 270, 362, 382, 477, 484, 533, 563, 613, 643, 725, 881], "upper": [64, 88, 89, 126, 139, 238, 362, 477, 484, 533, 563, 613, 725, 881], "period": [64, 139, 140, 181, 182, 238, 279, 331, 336, 344, 345, 346, 399, 424, 425, 533, 563, 564, 588, 589, 613, 652, 711, 716, 726, 727, 728, 778, 807, 808, 881], "It": [64, 117, 159, 166, 211, 238, 251, 284, 337, 388, 533, 573, 578, 607, 613, 717, 803, 804, 881], "like": [64, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 151, 221, 238, 268, 391, 404, 533, 556, 583, 613, 641, 783, 881], "durat": [64, 152, 202, 238, 314, 317, 320, 322, 324, 327, 333, 340, 473, 533, 569, 613, 690, 693, 699, 701, 704, 707, 713, 720, 865, 881], "3d12h4m25": [64, 139, 140, 152, 202, 238, 331, 336, 563, 564, 569, 613, 711, 716], "hour": [64, 139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 497, 498, 533, 563, 564, 569, 613, 708, 711, 716], "minut": [64, 139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 497, 498, 533, 563, 564, 569, 613, 708, 711, 716], "tempor": [64, 139, 140, 238, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 613], "window": [64, 139, 140, 238, 306, 331, 336, 344, 345, 346, 398, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 489, 533, 563, 564, 613, 680, 711, 716, 726, 727, 728, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 881], "granular": 64, "finer": 64, "than": [64, 76, 80, 82, 88, 89, 101, 110, 111, 117, 138, 152, 175, 177, 201, 211, 238, 251, 374, 421, 431, 433, 447, 452, 457, 463, 509, 512, 519, 522, 533, 562, 569, 607, 613, 800, 815, 831, 836, 841, 847, 881], "1d": [64, 139, 140, 152, 202, 238, 311, 317, 324, 328, 331, 336, 340, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 687, 691, 693, 695, 696, 697, 702, 704, 708, 711, 714, 715, 716, 719, 720], "also": [64, 110, 111, 125, 138, 139, 140, 159, 162, 185, 238, 312, 347, 361, 404, 411, 412, 413, 414, 415, 417, 418, 419, 493, 494, 502, 516, 532, 533, 563, 564, 578, 592, 603, 613, 688, 783, 881], "permut": 64, "1mo": [64, 139, 140, 152, 202, 238, 314, 328, 331, 336, 341, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 688, 690, 705, 708, 709, 710, 711, 716, 718, 721], "dtrang": 64, "1985": 64, "00": [64, 139, 152, 202, 238, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 460, 498, 563, 569, 613, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 844], "04": [64, 101, 139, 202, 238, 313, 314, 317, 323, 324, 325, 329, 331, 332, 333, 338, 339, 340, 341, 460, 498, 563, 613, 688, 690, 693, 698, 700, 703, 704, 705, 706, 710, 712, 713, 714, 718, 719, 720, 721, 844], "05": [64, 101, 106, 107, 152, 202, 238, 314, 332, 341, 569, 613, 688, 689, 690, 711, 716, 719, 721], "07": [64, 313, 329, 331, 336, 339, 460, 689, 719, 844], "08": [64, 106, 107, 140, 238, 331, 460, 498, 564, 613, 711, 716, 844], "zone": [64, 312, 337, 341, 688, 717, 721], "america": [64, 688], "new_york": [64, 688], "\u03bc": [64, 139, 140, 152, 202, 238, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 563, 564, 569, 613, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722], "est": [64, 688], "encount": [65, 139, 238, 395, 396, 445, 493, 502, 519, 533, 563, 613, 774, 775, 829, 881], "error": [65, 88, 89, 99, 175, 238, 272, 292, 374, 445, 460, 533, 607, 645, 664, 829, 844, 881], "duplic": [67, 147, 151, 152, 199, 238, 363, 485, 533, 568, 569, 597, 613, 745, 881], "certain": [68, 145, 202, 238, 347, 500, 533, 548, 581, 613, 881], "structur": [69, 74, 75, 128, 166, 238, 580, 613, 621, 881], "least": [70, 110, 399, 478, 533, 778, 869, 881], "expect": [70, 73, 76, 251, 483, 533, 571, 573, 613], "unexpect": [72, 238], "caus": [72, 88, 89, 99, 128, 238, 621, 881], "panic": 72, "combin": [74, 75, 139, 140, 141, 152, 202, 209, 238, 563, 564, 569, 590, 613], "mismatch": 74, "incompat": 75, "lib": [77, 859, 881], "chunkedarrai": [77, 161, 238, 683, 881], "zero": [77, 87, 88, 89, 92, 96, 130, 175, 190, 238, 351, 352, 422, 431, 463, 533, 558, 613, 733, 815, 847, 859, 863, 881], "copi": [77, 118, 119, 190, 238, 463, 546, 547, 613, 618, 669, 673, 685, 847, 859, 863, 881], "most": [77, 389, 393, 399, 457, 478, 533, 770, 778, 841, 869, 881], "closest": 77, "construct": [77, 78, 79, 80, 81, 82, 238, 561, 583, 613, 881], "pa": [77, 100, 101, 238], "map": [78, 79, 88, 89, 92, 93, 96, 97, 99, 102, 117, 125, 171, 191, 238, 331, 336, 384, 478, 483, 533, 554, 584, 613, 711, 716], "clone": [78, 79, 80, 81, 82, 118, 194, 195, 238, 546, 613, 669, 862, 863, 871, 881], "two": [78, 80, 82, 98, 133, 158, 159, 167, 197, 209, 210, 211, 221, 238, 246, 308, 433, 434, 469, 481, 492, 514, 519, 521, 533, 577, 578, 607, 613, 683, 881], "dimension": [78, 80, 82, 238, 881], "alreadi": [78, 238, 268, 306, 533, 641, 680, 881], "present": [78, 110, 238, 366, 533, 871, 881], "dimens": [78, 80, 82, 238, 408, 533, 787, 881], "infer_schema_length": [79, 82, 88, 89, 91, 99, 103], "50": [79, 82, 128, 238, 295, 296, 297, 331, 336, 533, 670, 716, 881], "mani": [79, 82, 98, 128, 238, 621, 881], "scan": [79, 82, 88, 89, 96, 99, 100, 101, 102, 103, 104, 556, 565, 572, 613], "slow": [79, 82, 88, 89, 99, 192, 238, 306, 533, 680, 881], "partial": 79, "overwrit": [79, 88, 89, 99, 207, 238, 556, 601, 602, 613], "first": [79, 88, 89, 91, 98, 99, 103, 117, 137, 139, 142, 152, 154, 161, 166, 167, 198, 199, 202, 214, 221, 238, 260, 261, 262, 268, 270, 271, 306, 328, 331, 359, 365, 378, 443, 445, 450, 451, 485, 487, 493, 502, 505, 533, 548, 563, 565, 569, 572, 580, 597, 603, 608, 613, 631, 634, 641, 643, 644, 680, 681, 708, 711, 740, 748, 763, 827, 829, 834, 835, 881], "let": 79, "about": [79, 431, 533, 815, 881], "3rd": 79, "unknown": [79, 507], "np": [80, 238, 747, 751, 752, 753, 789, 881], "ndarrai": [80, 131, 194, 238, 469, 533, 683, 804, 854, 863, 881], "numpi": [80, 105, 131, 165, 194, 238, 395, 396, 469, 533, 747, 751, 752, 753, 774, 775, 789, 854, 863, 871, 881], "columnar": [80, 82, 176, 238], "column_0": [80, 82, 117, 198, 238], "column_1": [80, 82, 117, 198, 238], "interpret": [80, 82, 88, 89, 99, 238], "yield": [80, 82, 88, 89, 99, 126, 128, 198, 238, 621, 725, 881], "conclus": [80, 82, 238], "nan_to_non": 81, "panda": [81, 91, 98, 105, 195, 238, 473, 533, 864, 865, 881], "index": [81, 84, 105, 132, 139, 140, 145, 152, 167, 173, 175, 184, 196, 202, 208, 238, 246, 258, 259, 260, 261, 262, 263, 264, 270, 280, 328, 411, 412, 413, 414, 415, 417, 418, 419, 432, 443, 454, 469, 485, 533, 563, 564, 569, 591, 604, 613, 629, 630, 631, 632, 633, 634, 636, 637, 643, 653, 708, 776, 804, 816, 827, 838, 854, 881], "datetimeindex": [81, 683, 881], "instal": [81, 88, 89, 92, 96, 98, 100, 105, 165, 194, 195, 238, 590, 613, 863, 881], "nan": [81, 106, 107, 110, 129, 238, 309, 310, 351, 361, 368, 370, 371, 372, 385, 392, 395, 396, 519, 533, 557, 613, 624, 628, 684, 732, 752, 753, 774, 775, 789, 881], "convert": [81, 83, 90, 91, 98, 100, 176, 191, 192, 193, 194, 195, 197, 238, 284, 460, 657, 844, 851, 862, 863, 864, 871, 881], "pd": [81, 91, 98, 238, 473, 533, 865, 881], "pd_df": 81, "pd_seri": 81, "dummi": [83, 193, 238, 860, 881], "subset": [83, 124, 162, 193, 199, 238, 553, 597, 613], "to_dummi": [83, 238, 881], "foo_1": [83, 193, 238], "foo_2": [83, 193, 238], "bar_3": [83, 193, 238], "bar_4": [83, 193, 238], "ham_a": [83, 193, 238], "ham_b": [83, 193, 238], "get": [84, 93, 97, 112, 120, 125, 135, 136, 139, 140, 142, 143, 147, 149, 154, 161, 175, 178, 180, 184, 188, 193, 205, 214, 224, 226, 227, 228, 229, 230, 231, 232, 238, 246, 258, 259, 260, 261, 262, 269, 273, 274, 285, 301, 302, 303, 304, 305, 315, 354, 359, 363, 365, 373, 376, 378, 385, 386, 387, 388, 390, 392, 395, 396, 403, 432, 436, 446, 449, 467, 468, 475, 479, 501, 505, 509, 510, 511, 512, 520, 523, 524, 533, 549, 554, 560, 563, 564, 565, 570, 572, 586, 591, 595, 600, 608, 609, 613, 629, 630, 631, 632, 633, 634, 642, 646, 647, 658, 668, 676, 677, 678, 679, 691, 723, 735, 737, 740, 741, 745, 748, 758, 763, 766, 768, 769, 771, 773, 774, 775, 779, 780, 782, 816, 819, 830, 833, 853, 858, 859, 860, 867, 870, 871, 881], "uint32": [84, 105, 126, 238, 260, 262, 263, 264, 274, 313, 316, 319, 321, 323, 325, 326, 329, 330, 332, 338, 339, 407, 439, 446, 449, 469, 473, 533, 632, 636, 637, 647, 664, 689, 692, 698, 700, 703, 705, 706, 709, 710, 712, 718, 719, 725, 802, 823, 865, 881], "regular": [84, 202, 238, 347, 488, 500, 533], "uint64": [84, 141, 238, 263, 264, 358, 406, 533, 636, 637, 739, 785, 881], "bigidx": 84, "read": [85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 128, 238, 383, 533, 556, 561, 583, 613, 621, 881], "over": [85, 88, 89, 99, 110, 117, 128, 138, 198, 211, 221, 238, 251, 306, 352, 361, 383, 384, 410, 411, 412, 413, 414, 415, 417, 418, 419, 483, 493, 494, 502, 508, 516, 533, 607, 621, 622, 680, 789, 790, 791, 793, 797, 881], "avail": [85, 90, 100, 109, 237, 241, 404, 526, 527, 529, 532, 533, 534, 537, 538, 539, 542, 543, 556, 612, 613, 783, 873, 875, 877, 881, 884, 885, 886], "fetch": [85, 99, 153, 238, 546, 548, 565, 572, 598, 613], "ideal": [85, 221], "read_csv_batch": [85, 543], "tpch": [85, 89], "tables_scale_100": [85, 89], "lineitem": [85, 89, 98], "tbl": [85, 89], "parse_d": [85, 88, 89, 99], "polarsdatatyp": [86, 99, 108, 109, 110, 111, 114, 117, 125, 178, 238, 251, 292, 383, 533, 622, 664, 881], "new": [86, 114, 117, 122, 124, 144, 145, 162, 163, 171, 172, 189, 201, 206, 238, 247, 349, 355, 361, 384, 450, 451, 456, 457, 464, 465, 470, 533, 542, 584, 596, 607, 613, 618, 622, 685, 730, 776, 786, 834, 835, 840, 841, 848, 850, 855, 861, 872, 881], "In": [86, 90, 100, 104, 110, 111, 114, 117, 126, 128, 139, 140, 162, 238, 251, 388, 433, 434, 533, 563, 564, 613, 621, 725, 784, 881], "probabl": [86, 114, 343, 533, 724, 881], "n_row": [87, 88, 89, 92, 96, 99, 102, 103, 104, 556, 613], "accept": [87, 88, 89, 90, 92, 96, 185, 238], "start": [87, 88, 89, 92, 96, 99, 102, 103, 104, 138, 139, 153, 184, 202, 208, 238, 280, 291, 313, 315, 316, 323, 325, 329, 330, 331, 332, 335, 336, 338, 339, 342, 347, 362, 432, 438, 442, 454, 458, 488, 493, 500, 502, 525, 533, 562, 563, 581, 591, 604, 613, 653, 663, 687, 688, 689, 691, 692, 698, 700, 703, 705, 706, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 816, 826, 838, 842, 881], "stop": [87, 88, 89, 92, 96, 99, 102, 103, 104, 313, 315, 316, 323, 325, 329, 330, 331, 332, 335, 336, 338, 339, 342, 687, 688, 689, 691, 692, 698, 700, 703, 705, 706, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722], "after": [87, 88, 89, 92, 96, 99, 102, 103, 104, 128, 200, 237, 238, 241, 404, 463, 533, 598, 613, 621, 688, 783, 847, 881], "textio": 88, "new_column": [88, 89, 91], "comment_char": [88, 89, 99], "quote_char": [88, 89, 99], "skip_row": [88, 89, 99], "ignore_error": [88, 89, 99], "n_thread": [88, 89], "8192": 88, "csvencod": [88, 89, 99], "low_memori": [88, 89, 96, 99, 103, 104], "storage_opt": [88, 90, 92, 96, 100, 102, 104], "skip_rows_after_head": [88, 89, 99], "row_count_nam": [88, 89, 92, 96, 99, 102, 103, 104], "row_count_offset": [88, 89, 92, 96, 99, 102, 103, 104], "sample_s": [88, 89], "eol_char": [88, 89, 99], "By": [88, 89, 91, 152, 185, 238, 507, 569, 613, 819, 863, 870, 881], "we": [88, 89, 91, 99, 138, 152, 185, 238, 268, 507, 525, 569, 573, 592, 613, 622, 641, 881], "handler": [88, 89, 91], "g": [88, 89, 90, 91, 92, 96, 100, 102, 104, 201, 238, 347, 423, 426, 500, 533, 802, 805, 863, 881], "via": [88, 89, 91, 99, 102, 104, 207, 238, 602, 613], "builtin": [88, 89, 91], "open": [88, 89, 91, 92, 96, 102, 104], "stringio": [88, 89], "fsspec": [88, 89, 92, 96, 100, 102, 104, 105], "remot": [88, 89, 92, 96], "dataset": [88, 89, 99, 101, 375, 533, 542, 761, 881], "autogener": [88, 89, 99], "column_x": [88, 89, 99], "enumer": [88, 89, 99], "everi": [88, 89, 99, 139, 189, 192, 202, 238, 263, 264, 267, 270, 271, 280, 283, 301, 302, 303, 304, 305, 306, 331, 336, 349, 355, 470, 493, 494, 533, 556, 563, 596, 613, 636, 637, 640, 643, 644, 653, 656, 676, 677, 678, 679, 680, 711, 716, 730, 855, 881], "shorter": [88, 89], "remain": [88, 89, 99, 126, 138, 238, 251, 456, 457, 533, 562, 573, 613, 725, 840, 841, 881], "comment": [88, 89, 99], "instanc": [88, 89, 99, 110, 111, 128, 133, 238, 284, 292, 389, 411, 412, 413, 414, 415, 417, 418, 419, 493, 502, 533, 573, 604, 613, 621, 664, 881], "special": [88, 89, 99, 622, 881], "handl": [88, 89, 99, 101, 267, 307, 463, 533, 640, 682, 847, 881], "escap": [88, 89, 99], "dure": [88, 89, 99, 128, 238, 621, 881], "provid": [88, 89, 90, 98, 99, 100, 110, 111, 207, 238, 284, 288, 289, 440, 441, 443, 445, 542, 602, 607, 613, 660, 661, 824, 825, 827, 829, 888], "equal": [88, 89, 99, 106, 107, 113, 134, 139, 152, 159, 238, 410, 411, 412, 413, 414, 415, 417, 418, 419, 446, 447, 452, 463, 484, 533, 563, 569, 578, 613, 789, 790, 791, 792, 793, 794, 796, 797, 798, 802, 830, 831, 836, 847, 881], "some": [88, 89, 99, 124, 238, 553, 613, 750, 881], "check": [88, 89, 99, 106, 107, 134, 148, 150, 238, 248, 249, 266, 287, 290, 291, 362, 366, 438, 442, 458, 533, 573, 613, 619, 620, 639, 659, 662, 663, 743, 744, 746, 749, 750, 756, 757, 759, 760, 802, 822, 826, 842, 881], "might": [88, 89, 99, 388, 476, 533], "issu": [88, 89, 91, 99, 304, 305, 467, 533, 678, 679, 852, 881], "automat": [88, 89, 98, 99, 110, 111, 238, 460, 844, 881], "alwai": [88, 117, 211, 238, 251, 388, 533, 573, 607, 613], "physic": [88, 89, 152, 238, 293, 473, 533, 545, 568, 569, 613, 666, 865, 881], "cpu": [88, 89], "your": [88, 89, 106, 107, 238, 548, 565, 572, 573, 613], "system": [88, 89], "done": [88, 89, 99, 101, 137, 152, 238, 250, 292, 447, 452, 533, 569, 592, 606, 613, 664, 831, 836, 881], "buffer": [88, 89, 126, 238, 725, 881], "onc": [88, 89, 91, 177, 238, 421, 533, 545, 613, 800, 881], "modifi": [88, 89, 99, 144, 204, 238, 312, 340, 688, 720, 786, 845, 846, 881], "multi": [88, 89], "lossi": [88, 89, 99], "replac": [88, 89, 99, 129, 130, 173, 198, 206, 238, 451, 557, 601, 613, 803, 804, 835, 881], "decod": [88, 89], "im": [88, 89], "usag": [88, 89, 99, 110, 111, 183, 238, 810, 881], "expens": [88, 89, 96, 99, 103, 104, 138, 198, 238, 562, 613, 621, 881], "nativ": [88, 92, 96, 117, 211, 238, 251, 533, 607], "parser": 88, "even": 88, "possibl": [88, 117, 211, 238, 251, 382, 388, 457, 477, 533, 607, 841, 881], "differ": [88, 101, 128, 139, 140, 198, 238, 267, 307, 312, 313, 328, 329, 338, 395, 396, 460, 476, 501, 509, 512, 533, 563, 564, 613, 621, 640, 682, 688, 689, 708, 709, 718, 774, 775, 802, 844, 881], "regard": [88, 519], "sens": [88, 92, 96, 102, 104, 139, 140, 159, 202, 238, 563, 564, 578, 613], "particular": [88, 92, 96, 102, 104, 126, 238, 725, 881], "storag": [88, 90, 92, 96, 100, 102, 104], "connect": [88, 92, 96, 98, 101, 102, 104, 543], "port": [88, 92, 96, 98, 102, 104], "usernam": [88, 92, 96, 98, 102, 104], "password": [88, 92, 96, 98, 102, 104], "skip": [88, 89, 91, 99, 201, 238, 622, 881], "insert": [88, 89, 92, 96, 99, 102, 103, 104, 145, 172, 198, 200, 238, 422, 437, 463, 533, 598, 613, 801, 821, 847, 881], "count": [88, 89, 92, 96, 99, 102, 103, 104, 121, 139, 140, 152, 162, 163, 167, 198, 202, 208, 211, 220, 238, 301, 328, 377, 394, 397, 411, 412, 413, 414, 415, 417, 418, 419, 439, 476, 478, 513, 533, 563, 564, 569, 604, 607, 613, 681, 708, 772, 777, 823, 868, 869, 881], "offset": [88, 89, 92, 96, 99, 102, 103, 104, 139, 140, 184, 202, 208, 238, 280, 328, 331, 336, 432, 454, 533, 563, 564, 591, 604, 613, 653, 708, 711, 716, 816, 838, 881], "row_count": [88, 89, 92, 96, 99, 102, 103, 104], "sampl": [88, 89, 211, 238, 431, 533, 607, 815, 881], "estim": [88, 89, 126, 238, 345, 346, 375, 533, 725, 727, 728, 761, 881], "alloc": [88, 89, 126, 170, 238, 725, 881], "need": [88, 89, 91, 106, 107, 139, 140, 183, 194, 238, 284, 426, 446, 533, 563, 564, 606, 613, 809, 830, 863, 881], "end": [88, 89, 96, 99, 139, 238, 280, 290, 331, 347, 362, 438, 442, 454, 458, 488, 500, 533, 563, 565, 572, 581, 613, 653, 662, 711, 826, 838, 842], "scan_csv": [88, 89, 606], "glob": [88, 89, 99, 102, 104], "pattern": [88, 89, 99, 102, 104, 438, 439, 443, 444, 450, 451, 803, 804, 822, 823, 827, 828, 834, 835, 881], "store": [88, 96, 128, 238, 621, 881], "continu": [88, 96, 431, 533, 815, 881], "benchmark": [88, 96], "50000": 89, "batchedcsvread": [89, 542], "batch": [89, 103], "upon": 89, "creation": 89, "gather": 89, "work": [89, 91, 138, 140, 172, 199, 238, 268, 294, 295, 296, 297, 356, 449, 465, 475, 533, 562, 564, 597, 613, 641, 667, 670, 671, 672, 736, 833, 867, 881], "next_batch": 89, "call": [89, 110, 111, 153, 237, 238, 241, 543, 612, 613, 622, 881], "table_uri": [90, 100], "delta_table_opt": [90, 100], "lake": [90, 100, 542], "uri": [90, 98, 100], "root": [90, 100, 374, 384, 390, 401, 435, 466, 532, 533, 818, 881], "For": [90, 91, 100, 128, 140, 151, 152, 185, 211, 238, 284, 292, 389, 406, 431, 493, 502, 503, 533, 564, 569, 592, 607, 613, 621, 785, 815, 863, 881], "filesystem": [90, 100], "absolut": [90, 100, 106, 107, 245, 533, 617, 881], "rel": [90, 100, 106, 107, 221, 328, 344, 345, 346, 533, 708, 726, 727, 728, 881], "But": [90, 100], "gc": [90, 100], "azur": [90, 100], "thu": [90, 99, 100, 128, 238, 519, 621, 881], "latest": [90, 100, 357, 389, 533], "backend": [90, 98, 100], "deltalak": [90, 100], "cloud": [90, 100, 101], "configur": [90, 100], "authent": [90, 100], "here": [90, 98, 100, 109, 110, 111, 445, 829], "keyword": [90, 96, 100, 165, 166, 175, 238, 580, 613, 881], "while": [90, 91, 100, 110, 111, 158, 198, 238, 577, 613], "sinc": [90, 100, 241, 315, 691], "table_path": [90, 100], "fail": [90, 100, 199, 238, 284, 460, 597, 613, 622, 844, 881], "aw": [90, 100], "see": [90, 91, 98, 100, 106, 107, 110, 111, 151, 165, 166, 238, 295, 296, 297, 334, 352, 361, 375, 383, 431, 516, 533, 670, 671, 672, 714, 761, 815, 881, 888], "bucket": [90, 100, 331, 336, 711, 716], "aws_access_key_id": [90, 100], "the_aws_access_key_id": [90, 100], "aws_secret_access_kei": [90, 100], "the_aws_secret_access_kei": [90, 100], "googl": [90, 100], "service_account": [90, 100], "service_account_json_absolute_path": [90, 100], "az": [90, 100], "adl": [90, 100], "abf": [90, 100], "azure_storage_account_nam": [90, 100], "azure_storage_account_kei": [90, 100], "without_fil": [90, 100], "load": [90, 98, 100, 542, 565, 572, 613], "track": [90, 100, 117, 238], "sheet_id": 91, "sheet_nam": 91, "xlsx2csv_option": 91, "read_csv_opt": 91, "excel": [91, 542], "xlsx": 91, "sheet": 91, "xlsx2csv": [91, 105], "read_csv": [91, 99], "skip_empty_lin": 91, "my": [91, 100, 101], "datasheet": 91, "excel_fil": 91, "As": [91, 517], "correct": [91, 345, 346, 375, 416, 431, 533, 573, 613, 727, 728, 761, 795, 815, 881], "look": [91, 284, 287, 659], "document": [91, 98, 445, 460, 829, 844], "fix": [91, 109, 110, 340, 411, 412, 413, 414, 415, 417, 418, 419, 533, 720], "whole": [91, 433, 434, 443, 533, 827], "twice": 91, "actual": [91, 110, 111, 810, 881], "With": 91, "1000": [91, 126, 238, 320, 463, 699], "spreadsheet": [91, 167, 238], "xl": 91, "xlsm": 91, "xlsb": 91, "odf": 91, "od": 91, "odt": 91, "from_panda": [91, 98], "memory_map": [92, 96, 102], "v2": [92, 102], "valid": [92, 96, 111, 126, 238, 306, 433, 438, 439, 443, 444, 445, 533, 680, 725, 738, 822, 823, 827, 828, 829, 834, 835, 881], "greatli": [92, 102], "repeat": [92, 102, 405, 407, 533], "o": [92, 102, 306, 355, 474, 533, 680, 866, 881], "page": [92, 102, 238, 533, 542, 613, 881], "give": [92, 96, 102, 103, 104, 158, 238, 315, 375, 407, 533, 542, 577, 613, 691, 761, 881], "read_ndjson": 94, "parallelstrategi": [96, 104], "auto": [96, 104, 198, 238], "directori": 96, "partit": [96, 98, 101, 164, 238], "awar": [96, 337, 460, 717, 844], "stabl": 96, "increas": [96, 306, 533, 680, 881], "row_group": [96, 104], "direct": [96, 98, 104, 201, 238], "read_tabl": 96, "connection_uri": 98, "partition_on": 98, "partition_rang": 98, "partition_num": 98, "protocol": 98, "postgr": [98, 398, 533], "mysql": 98, "sqlite": 98, "redshift": 98, "through": [98, 881], "clickhous": 98, "databas": 98, "altern": 98, "solut": 98, "engin": [98, 117, 211, 238, 251, 533, 607], "raw": 98, "connectorx": [98, 105], "postgresql": 98, "server": 98, "transfer": 98, "detail": [98, 106, 107, 888], "partition_col": 98, "explicitli": [98, 109, 110], "with_column_nam": 99, "push": [99, 101, 102, 103, 104], "down": [99, 101, 102, 103, 104, 356, 533, 736, 881], "therebi": [99, 102, 103, 104], "potenti": [99, 102, 103, 104], "overhead": [99, 102, 103, 104], "updat": 99, "just": [99, 158, 238, 577, 613], "befor": [99, 128, 139, 152, 200, 238, 304, 305, 306, 399, 410, 411, 412, 413, 414, 415, 417, 418, 419, 463, 467, 533, 563, 566, 569, 598, 613, 621, 678, 679, 680, 778, 789, 790, 791, 792, 793, 794, 796, 797, 798, 847, 852, 881], "realloc": [99, 102, 103, 128, 238, 621, 881], "my_long_fil": 99, "doesn": [99, 343, 533, 724, 871, 881], "thing": [99, 481, 501], "less": [99, 152, 238, 447, 452, 457, 463, 569, 613, 831, 836, 841, 847], "limit": [99, 130, 238, 286, 295, 296, 297, 352, 357, 533, 558, 565, 613, 670, 671, 672, 733, 881], "breezah": 99, "languag": [99, 139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 708, 711, 716], "terribl": 99, "mydf": 99, "write_csv": [99, 238], "lambda": [99, 117, 124, 133, 166, 211, 238, 251, 284, 344, 345, 346, 383, 384, 410, 495, 522, 533, 553, 573, 580, 607, 613, 622, 657, 726, 727, 728, 881], "raw_filesystem": 100, "adjust": [100, 344, 345, 346, 431, 533, 726, 727, 728, 815, 881], "subtreefilesystem": 100, "reli": 100, "mention": 100, "pleas": 100, "ensur": [100, 110, 111, 113, 175, 238, 478, 533, 573, 613, 863, 869, 881], "gcsf": 100, "pyfilesystem": 100, "fsspechandl": 100, "gcsfilesystem": 100, "id": [100, 211, 450, 451, 476, 478, 533, 607, 868, 881], "token": 100, "pa_f": 100, "adlf": 100, "azureblobfilesystem": 100, "account_nam": 100, "account_kei": 100, "allow_pyarrow_filt": 101, "lead": [101, 238, 423, 448, 453, 459, 463, 469, 478, 509, 512, 519, 533, 573, 607, 613, 805, 832, 843, 847, 881], "comparison": 101, "dset": 101, "folder": 101, "out": [101, 105, 140, 238, 270, 364, 367, 533, 564, 613, 643], "1970": 101, "stdout": 105, "14": [105, 117, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 238, 361, 533, 711], "platform": 105, "linux": 105, "microsoft": 105, "standard": [105, 186, 238, 318, 345, 417, 431, 436, 445, 520, 533, 593, 613, 694, 727, 815, 819, 829, 881], "wsl2": 105, "x86_64": 105, "glibc2": 105, "main": 105, "jul": [105, 460, 844], "56": [105, 471, 533], "gcc": 105, "20210110": 105, "23": [105, 139, 140, 238, 241, 316, 331, 497, 563, 564, 613, 692], "check_dtyp": [106, 107], "check_exact": [106, 107], "check_column_nam": 106, "rtol": [106, 107], "1e": [106, 107], "atol": [106, 107], "nans_compare_equ": [106, 107], "assertionerror": [106, 107], "compar": [106, 107, 134, 199, 238, 597, 613, 802, 881], "exactli": [106, 107, 110, 111, 456, 457, 810, 840, 841, 881], "toler": [106, 107, 152, 238, 569, 613], "inexact": [106, 107], "assert": [106, 107, 109, 110, 111, 140, 238, 542, 564, 613, 738, 881], "check_nam": 107, "s1": [107, 133, 238, 872, 881], "searchstrategi": [108, 110, 111], "null_prob": [108, 110, 111], "percentag": [108, 110, 111, 399, 533, 778, 881], "chanc": [108, 110, 111], "hypothesi": [108, 109, 110, 111, 888], "sampled_from": 108, "unique_small_int": 108, "ccy": 108, "gbp": 108, "eur": [108, 121, 137, 238], "jpy": 108, "min_col": [109, 110], "max_col": [109, 110], "suitabl": 109, "standalon": [109, 110], "itself": [109, 571, 613], "explicit": [109, 484, 516], "omit": [109, 110, 111, 162, 238], "random": [109, 110, 111, 141, 177, 238, 358, 404, 421, 427, 533, 739, 783, 800, 811, 881], "mincol": 109, "exact": [109, 110, 111, 183, 238, 460, 844], "control": [109, 551, 613], "especi": 109, "punctuat": 109, "test_special_char_colname_init": 109, "z": [109, 110, 126, 147, 149, 151, 158, 238, 265, 293, 358, 407, 533, 568, 577, 591, 613, 666, 733, 881], "test_unique_xyz": 109, "assert_someth": 109, "min_siz": [110, 111], "max_siz": [110, 111], "include_col": 110, "allow_infin": [110, 111], "allowed_dtyp": [110, 111], "excluded_dtyp": [110, 111], "describ": [110, 137, 238, 606, 881], "desir": 110, "param": [110, 111, 175, 238], "n_chunk": [110, 111, 238, 881], "randomis": 110, "individu": [110, 140, 238, 251, 444, 533, 564, 613, 668, 828, 881], "append": [110, 128, 151, 152, 238, 405, 533, 568, 569, 613, 881], "onto": 110, "independ": [110, 111], "either": [110, 140, 153, 156, 175, 187, 238, 564, 571, 613], "basi": 110, "pct": 110, "take": [110, 133, 159, 166, 189, 238, 328, 337, 470, 499, 501, 533, 578, 596, 613, 708, 717, 855, 872, 881], "preced": 110, "disallow": [110, 111], "exclud": [110, 111, 362, 488, 519, 533], "deploi": [110, 111], "characterist": [110, 111], "develop": [110, 111], "directli": [110, 111, 344, 345, 346, 533, 726, 727, 728, 881], "concret": [110, 111], "test_repr": [110, 111], "isinst": [110, 111, 238], "repr": [110, 111], "known": [110, 607], "colnam": [110, 125, 238, 384, 533, 554, 613], "df_strategi": 110, "15836": 110, "1755e": 110, "38": 110, "575050513": 110, "constructor": 111, "op": [111, 407, 533], "max_data_s": 111, "distinct": [111, 164, 238, 285, 404, 496, 497, 498, 533, 658, 783, 881], "54666": 111, "35": 111, "6414": 111, "63290": 111, "pool": 112, "return_dtyp": [117, 238, 251, 383, 483, 508, 533, 622, 881], "inference_s": [117, 238], "256": [117, 238, 778, 881], "user": [117, 166, 211, 238, 251, 423, 483, 533, 580, 607, 613, 622, 805, 881], "udf": [117, 166, 211, 238, 251, 483, 533, 580, 607, 613, 622, 881], "logic": [117, 211, 238, 251, 473, 533, 561, 568, 583, 605, 607, 613, 865, 881], "almost": [117, 211, 238, 251, 533, 607], "_significantly_": [117, 211, 238, 251, 533, 607], "intens": [117, 211, 238, 251, 533, 607], "becaus": [117, 126, 139, 153, 201, 211, 238, 251, 268, 533, 563, 607, 613, 622, 641, 725, 881], "forc": [117, 152, 211, 238, 251, 533, 568, 569, 607, 613], "materi": [117, 211, 238, 251, 533, 581, 607, 613], "parallelis": [117, 211, 238, 251, 533, 607], "optimis": [117, 211, 238, 251, 533, 607, 803, 804, 881], "wherev": [117, 211, 238, 251, 533, 607], "strongli": [117, 211, 238, 251, 533, 607], "prefer": [117, 128, 211, 238, 251, 410, 533, 607, 613, 621, 789, 881], "achiev": [117, 211, 238, 251, 533, 607], "best": [117, 211, 238, 251, 533, 607], "tri": [117, 238], "arbitrarili": [117, 238], "rearrang": [117, 238], "want": [117, 128, 162, 238, 295, 296, 297, 353, 383, 411, 412, 413, 414, 415, 417, 418, 419, 493, 502, 533, 548, 565, 572, 613, 621, 670, 671, 672, 863, 881], "preserv": [117, 238], "syntax": [117, 162, 185, 238, 590, 592, 613, 881], "15": [117, 139, 140, 145, 238, 306, 331, 336, 533, 563, 564, 613, 680, 711, 716, 881], "better": [117, 211, 238, 251, 478, 533, 607, 803, 804, 881], "scalar": [117, 150, 238, 422, 483, 533, 760, 801, 881], "ident": [118, 119, 238, 546, 547, 613, 669, 673, 881], "cheap": [118, 119, 238, 546, 547, 613, 621, 669, 673, 881], "deepcopi": [118, 119, 238, 546, 547, 613, 669, 673, 881], "13": [118, 119, 129, 130, 136, 140, 145, 153, 161, 207, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 238, 241, 410, 412, 489, 524, 533, 546, 547, 557, 558, 564, 571, 602, 613, 622, 711, 716, 718, 881], "clear": [119, 238, 547, 613, 673, 881], "properti": [120, 125, 143, 178, 180, 205, 238, 542, 549, 554, 586, 600, 613, 723, 735, 741, 773, 806, 858, 881], "appl": [120, 144, 151, 171, 173, 191, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 238, 401, 409, 442, 458, 466, 533, 568, 584, 613, 826, 842], "banana": [120, 191, 212, 213, 215, 216, 217, 218, 219, 220, 222, 223, 238, 401, 409, 466, 533], "summari": [121, 238, 681, 881], "glimps": [121, 142, 238], "usd": [121, 137, 238], "2020": [121, 137, 140, 238, 314, 317, 320, 322, 324, 327, 333, 341, 564, 613, 688, 690, 693, 699, 701, 704, 707, 713, 721], "2021": [121, 137, 139, 202, 238, 460, 507, 563, 613, 694, 744, 844, 881], "null_count": [121, 124, 238, 306, 533, 680, 681, 881], "266667": [121, 238], "666667": [121, 156, 203, 217, 238, 344, 533, 599, 613], "std": [121, 238, 410, 533, 613, 681, 796, 881], "101514": [121, 238], "707107": [121, 238, 345, 533, 727, 881], "57735": [121, 238], "median": [121, 167, 238, 413, 533, 603, 613, 792, 881], "snippet": [124, 238, 553, 613], "fold": [124, 238, 389, 487, 493, 494, 516, 522, 553, 613], "acc": [124, 238, 493, 494, 502, 516, 553, 613], "is_nul": [124, 238, 533, 553, 613, 881], "height": [124, 238], "sizeunit": [126, 238, 725, 881], "total": [126, 238, 725, 881], "heap": [126, 238, 725, 881], "its": [126, 200, 238, 331, 336, 598, 613, 711, 716, 725, 881], "bitmap": [126, 238, 725, 881], "therefor": [126, 238, 284, 725, 881], "structarrai": [126, 238, 725, 881], "constant": [126, 140, 238, 564, 613, 725, 881], "unchang": [126, 238, 251, 473, 533, 573, 607, 613, 725, 865, 881], "visibl": [126, 238, 725, 881], "capac": [126, 183, 238, 725, 810, 881], "ffi": [126, 238, 725, 881], "kb": [126, 238, 725, 881], "mb": [126, 238, 725, 881], "gb": [126, 238, 725, 881], "tb": [126, 238, 725, 881], "scale": [126, 238, 725, 881], "1_000_000": [126, 238, 725, 881], "25888898": [126, 238], "689577102661133": [126, 238], "long": [127, 158, 201, 238, 555, 577, 613], "largelist": [127, 238], "letter": [127, 214, 224, 238, 347, 500, 533, 555, 608, 609, 613], "locat": [128, 173, 196, 200, 238, 598, 613, 621, 804, 854, 881], "faster": [128, 201, 238, 410, 449, 476, 533, 613, 621, 622, 789, 833, 881], "onlin": [128, 238, 621, 881], "rerun": [128, 238, 621, 881], "them": [128, 139, 140, 152, 159, 202, 238, 272, 395, 396, 489, 533, 563, 564, 569, 578, 613, 621, 645, 774, 775, 881], "latter": [128, 238, 621, 881], "20": [128, 144, 145, 166, 168, 172, 173, 238, 258, 259, 260, 262, 307, 331, 336, 358, 361, 507, 533, 580, 613, 716], "40": [128, 166, 238, 331, 336, 358, 533, 580, 613, 694, 716], "60": [128, 238, 332, 333, 460, 709, 712, 713, 844], "fill_valu": [129, 182, 201, 238, 351, 425, 533, 557, 589, 613, 732, 808, 881], "Not": [129, 238, 368, 370, 533, 557, 613], "To": [129, 238, 309, 310, 352, 509, 512, 522, 533, 557, 613], "fillnullstrategi": [130, 238, 352, 533, 558, 613, 733, 881], "matches_supertyp": [130, 238, 558, 613], "forward": [130, 152, 238, 352, 357, 533, 558, 569, 613, 733, 881], "consecut": [130, 238, 286, 352, 357, 437, 533, 558, 613, 733, 821, 881], "supertyp": [130, 238, 250, 533, 558, 613], "fill_nan": [130, 238, 533, 613, 881], "OR": [131, 238, 482, 559, 613], "reduct": [133, 238], "effect": [133, 238, 604, 613], "supercast": [133, 238], "similar": [133, 152, 238, 398, 533, 569, 613], "parent": [133, 238], "rule": [133, 238, 334, 714], "arithmet": [133, 238], "zip_with": [133, 238, 881], "foo11": [133, 238], "bar22": [133, 238], "null_equ": [134, 238, 802, 881], "retriev": [135, 238, 263, 264, 464, 636, 637, 848], "preview": [137, 238], "wide": [137, 158, 201, 238, 577, 613], "nice": [137, 238], "few": [137, 238], "head": [137, 154, 188, 238, 250, 378, 533, 572, 613, 763, 881], "tail": [137, 142, 209, 238, 250, 431, 533, 613, 815, 881], "maintain_ord": [138, 164, 167, 199, 202, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 238, 246, 251, 469, 475, 491, 533, 548, 551, 556, 562, 581, 590, 597, 613, 867, 881], "consist": [138, 238, 562, 613], "agg": [138, 139, 140, 238, 246, 251, 353, 433, 469, 480, 491, 533, 548, 551, 556, 562, 563, 564, 581, 590, 613], "loop": [138, 238], "sub_df": [138, 238], "index_column": [139, 140, 238, 563, 564, 613], "truncat": [139, 238, 563, 581, 613], "include_boundari": [139, 238, 563, 613], "start_bi": [139, 238, 563, 613], "startbi": [139, 238, 563, 613], "dynamicgroupbi": [139, 238], "normal": [139, 238, 343, 375, 431, 533, 563, 613, 724, 761, 815, 881], "groupbi": [139, 140, 162, 238, 241, 246, 251, 268, 306, 353, 398, 433, 434, 469, 480, 483, 491, 533, 548, 551, 556, 563, 564, 581, 590, 613, 641, 680, 881], "member": [139, 238, 563, 613, 750, 881], "seen": [139, 238, 286, 357, 533, 563, 613], "roll": [139, 140, 238, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 489, 533, 563, 564, 613, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 881], "slot": [139, 238, 267, 306, 307, 533, 563, 613, 640, 680, 682, 881], "1n": [139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 708, 711, 716], "nanosecond": [139, 140, 152, 202, 238, 328, 331, 332, 336, 411, 412, 413, 414, 415, 417, 418, 419, 498, 533, 563, 564, 569, 613, 708, 711, 712, 716], "1u": [139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 708, 711, 716], "microsecond": [139, 140, 152, 202, 238, 328, 331, 332, 336, 411, 412, 413, 414, 415, 417, 418, 419, 497, 498, 533, 563, 564, 569, 581, 613, 708, 711, 716], "1m": [139, 140, 152, 202, 238, 320, 322, 327, 328, 331, 333, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 699, 701, 707, 708, 711, 713, 716], "millisecond": [139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 498, 533, 563, 564, 569, 613, 708, 711, 716], "1h": [139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 692, 708, 711, 716], "1w": [139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 708, 711, 716], "week": [139, 140, 152, 202, 238, 328, 331, 336, 339, 411, 412, 413, 414, 415, 417, 418, 419, 498, 533, 563, 564, 569, 613, 708, 711, 716, 719], "month": [139, 140, 152, 202, 238, 313, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 496, 497, 533, 563, 564, 569, 613, 689, 708, 711, 716], "1y": [139, 140, 152, 202, 238, 328, 331, 336, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 708, 711, 716, 722], "year": [139, 140, 152, 202, 238, 318, 328, 329, 331, 336, 338, 411, 412, 413, 414, 415, 417, 418, 419, 496, 497, 533, 563, 564, 569, 613, 694, 708, 709, 711, 716, 718], "1i": [139, 140, 152, 202, 238, 328, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 564, 569, 613, 708], "Or": [139, 140, 152, 202, 238, 398, 525, 533, 563, 564, 569, 613], "10i": [139, 140, 238, 563, 564, 613], "often": [139, 140, 238, 407, 533, 563, 564, 613], "ascend": [139, 140, 238, 485, 563, 564, 613], "dynam": [139, 238, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 613], "matter": [139, 140, 238, 563, 564, 613], "neg": [139, 181, 182, 184, 238, 279, 280, 424, 425, 432, 454, 533, 563, 588, 589, 591, 604, 613, 652, 653, 807, 808, 816, 838, 881], "_lower_bound": [139, 238, 563, 613], "_upper_bound": [139, 238, 563, 613], "impact": [139, 238, 563, 613], "harder": [139, 238, 563, 613], "datapoint": [139, 238, 563, 613], "mondai": [139, 238, 336, 339, 563, 613, 719], "date_rang": [139, 202, 238, 311, 313, 314, 315, 316, 317, 320, 322, 323, 324, 325, 327, 328, 329, 330, 331, 332, 333, 335, 336, 338, 339, 340, 341, 342, 563, 613, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722], "30m": [139, 238, 331, 336, 563, 613, 711, 716], "time_min": [139, 238, 563, 613], "time_max": [139, 238, 563, 613], "boundari": [139, 238, 295, 296, 297, 533, 563, 613, 670, 671, 672, 881], "ad": [139, 198, 206, 238, 250, 493, 494, 533, 563, 601, 613], "time_count": [139, 238, 563, 613], "_lower_boundari": [139, 238, 563, 613], "_upper_boundari": [139, 238, 563, 613], "lower_bound": [139, 238, 533, 563, 613], "upper_bound": [139, 238, 284, 533, 563, 613], "time_agg_list": [139, 238, 563, 613], "idx": [139, 238, 284, 563, 613, 657, 804, 881], "arang": [139, 201, 211, 238, 563, 607, 613], "2i": [139, 238, 563, 613], "3i": [139, 238, 563, 613], "a_agg_list": [139, 238, 563, 613], "rollinggroupbi": [140, 238], "dynamic_groupbi": [140, 238, 564, 613], "groupby_dynam": [140, 238, 564, 613], "45": [140, 238, 331, 336, 439, 444, 564, 613, 711, 716, 823, 828], "48": [140, 238, 564, 613], "18": [140, 238, 331, 336, 340, 361, 374, 533, 564, 581, 613, 720], "19": [140, 152, 238, 331, 564, 569, 613, 711, 716], "43": [140, 238, 564, 613], "strptime": [140, 238, 334, 564, 613, 714], "2d": [140, 194, 238, 564, 613, 689], "sum_a": [140, 238, 564, 613], "min_a": [140, 238, 564, 613], "max_a": [140, 238, 564, 613], "to_list": [140, 238, 284, 564, 613, 657, 881], "seed": [141, 177, 238, 358, 421, 427, 533, 739, 800, 811, 881], "seed_1": [141, 238, 358, 533, 739, 881], "seed_2": [141, 238, 358, 533, 739, 881], "seed_3": [141, 238, 358, 533, 739, 881], "hash": [141, 238, 533, 881], "u64": [141, 238, 358, 406, 533, 581, 613, 739, 881], "10783150408545073287": [141, 238], "1438741209321515184": [141, 238], "10047419486152048166": [141, 238], "2047317070637311557": [141, 238], "grown": [144, 238], "baz": [145, 146, 167, 200, 221, 238, 455, 457, 567, 598, 613, 841], "intermedi": [146, 238, 567, 613, 742, 881], "linear": [146, 169, 222, 238, 265, 361, 387, 403, 415, 489, 490, 515, 533, 567, 582, 613, 638, 742, 782, 794, 881], "mask": [147, 149, 238, 266, 287, 363, 365, 373, 533, 639, 659, 734, 745, 748, 758, 779, 780, 803, 822, 872, 881], "equival": [150, 162, 238, 449, 760, 833, 845, 846, 881], "left_on": [151, 152, 238, 568, 569, 613], "right_on": [151, 152, 238, 568, 569, 613], "joinstrategi": [151, 238, 568, 613], "suffix": [151, 152, 209, 238, 290, 368, 370, 371, 372, 409, 442, 533, 568, 569, 603, 613, 662, 826], "_right": [151, 152, 238, 568, 569, 613], "outer": [151, 238, 568, 613], "semi": [151, 238, 568, 613], "anti": [151, 238, 568, 613, 803, 804, 881], "cross": [151, 238, 568, 613], "join_asof": [151, 238, 568, 613], "stringcach": [151, 238, 542], "other_df": [151, 238, 568, 613], "by_left": [152, 238, 569, 613], "by_right": [152, 238, 569, 613], "asofjoinstrategi": [152, 238, 569, 613], "allow_parallel": [152, 238, 568, 569, 613], "force_parallel": [152, 238, 568, 569, 613], "asof": [152, 238, 569, 613], "rather": [152, 238, 463, 569, 613, 847], "asof_join": [152, 238], "search": [152, 238, 569, 613], "last": [152, 167, 185, 188, 199, 224, 238, 260, 262, 270, 283, 306, 313, 329, 338, 457, 468, 523, 533, 569, 592, 595, 597, 609, 613, 631, 634, 643, 656, 680, 689, 709, 718, 841, 853, 881], "greater": [152, 238, 431, 457, 533, 569, 613, 815, 841, 881], "numer": [152, 238, 295, 296, 297, 407, 426, 533, 542, 569, 613, 670, 671, 672, 756, 802, 809, 881], "distanc": [152, 238, 569, 613], "plan": [152, 153, 238, 545, 550, 551, 561, 568, 569, 583, 590, 605, 613], "gdp": [152, 238, 569, 613], "2016": [152, 238, 569, 613], "2017": [152, 238, 569, 613], "2018": [152, 238, 569, 613], "2019": [152, 238, 569, 613], "record": [152, 238, 569, 613], "jan": [152, 238, 569, 613], "1st": [152, 238, 569, 613], "4164": [152, 238, 569, 613], "4411": [152, 238, 569, 613], "4566": [152, 238, 569, 613], "4696": [152, 238, 569, 613], "popul": [152, 238, 569, 613], "12th": [152, 238, 569, 613], "82": [152, 238, 569, 613], "66": [152, 238, 569, 613, 794, 881], "83": [152, 238, 569, 613], "52": [152, 207, 238, 420, 533, 569, 602, 613], "request": [153, 238], "small": [153, 238, 331, 336, 433, 434, 533, 556, 613], "describe_plan": [153, 238, 613], "unoptim": [153, 238, 551, 613], "describe_optimized_plan": [153, 238, 551, 613], "show_graph": [153, 238, 613], "un": [153, 238], "graphviz": [153, 238, 590, 613], "advis": [153, 238], "thei": [153, 238, 347, 410, 533, 613, 789, 881], "axi": [155, 156, 158, 160, 187, 238, 577, 613], "null_strategi": [156, 187, 238], "nullstrategi": [156, 187, 238], "propag": [156, 187, 238, 395, 396, 533, 774, 775, 881], "spam": [156, 238], "id_var": [158, 238, 577, 613], "value_var": [158, 238, 577, 613], "variable_nam": [158, 238, 577, 613], "value_nam": [158, 238, 577, 613], "unpivot": [158, 238, 577, 613], "leav": [158, 238, 577, 613], "identifi": [158, 238, 577, 613], "massag": [158, 238, 577, 613], "measur": [158, 238, 577, 613], "merg": [159, 238, 578, 613], "caller": [159, 238, 284, 573, 578, 607, 613], "respons": [159, 238, 578, 613], "One": [162, 167, 238, 881], "what": [162, 238, 863, 871, 881], "struct": [162, 197, 200, 238, 284, 456, 457, 478, 493, 494, 495, 533, 598, 613, 657, 840, 841], "pack": [162, 238], "expr_unique_subset": [162, 238], "df_nuniqu": [162, 238], "df_agg_nuniqu": [162, 238], "simpl": [162, 238], "as_dict": [164, 238], "predict": [164, 167, 170, 202, 238], "k": [164, 238, 293, 375, 474, 533, 666, 761, 866, 881], "l": [164, 238, 355, 533], "pearson": [165, 238, 375, 431, 514, 533, 761, 815, 881], "correl": [165, 238, 514, 519], "coeffici": [165, 238, 431, 533, 815, 881], "corrcoef": [165, 238], "func": [166, 238, 580, 613, 622, 881], "offer": [166, 238, 580, 613], "wai": [166, 238, 580, 613], "recommend": [166, 238], "fulli": [166, 238], "advantag": [166, 238], "cast_str_to_int": [166, 238, 580, 613], "col_nam": [166, 238, 580, 613], "tdf": [166, 238, 580, 613], "aggregate_fn": [167, 238], "pivotagg": [167, 238], "sort_column": [167, 238], "well": [167, 238], "predefin": [167, 238], "transpos": [167, 221, 238], "discoveri": [167, 238], "interpol": [169, 222, 238, 352, 387, 403, 415, 515, 533, 582, 613, 782, 794, 881], "rollinginterpolationmethod": [169, 222, 238, 403, 415, 515, 533, 582, 613, 782, 794, 881], "midpoint": [169, 222, 238, 403, 415, 515, 533, 582, 613, 782, 794, 881], "subsequ": [170, 238], "pair": [171, 238, 584, 613], "old": [171, 238, 584, 613], "new_col": [172, 238], "val": [174, 238, 293, 473, 533, 585, 613, 666], "by_pred": [175, 238], "accord": [175, 238, 694], "mutual": [175, 238], "exclus": [175, 238], "addition": [175, 238], "clariti": [175, 238], "suppli": [175, 238], "anyth": [175, 238], "toomanyrowsreturn": [175, 238, 542], "norowsreturn": [175, 238, 542], "inherit": [175, 238], "rowsexcept": [175, 238, 542], "frac": [177, 238, 344, 345, 346, 421, 431, 474, 533, 726, 727, 728, 800, 815, 866, 881], "with_replac": [177, 238, 421, 533, 800, 881], "shuffl": [177, 211, 238, 421, 533, 607, 800, 881], "modul": [177, 238, 421, 427, 532, 533, 800, 881], "whenthen": [179, 238, 587, 613], "whenthenthen": [179, 238, 587, 613], "shift_and_fil": [181, 238, 533, 613, 881], "shift": [182, 238, 267, 307, 399, 425, 489, 533, 589, 613, 640, 682, 778, 808, 881], "shrink": [183, 238, 426, 533, 809, 810, 881], "fit": [183, 201, 238, 426, 533, 809, 810, 881], "hold": [183, 238, 488], "nulls_last": [185, 238, 260, 262, 433, 533, 592, 613, 631, 634, 881], "ddof": [186, 203, 238, 436, 479, 514, 519, 520, 524, 533, 593, 599, 613, 819, 870, 881], "deviat": [186, 238, 345, 417, 436, 520, 533, 593, 613, 727, 819, 881], "degre": [186, 203, 238, 436, 479, 514, 519, 533, 819, 870, 881], "freedom": [186, 203, 238, 436, 479, 514, 519, 533, 819, 870, 881], "816497": [186, 238], "21": [187, 238], "16a": [187, 238], "27b": [187, 238], "38c": [187, 238], "nth": [189, 238, 457, 470, 533, 596, 613, 841, 855, 881], "mostli": [190, 238, 353, 533], "categoricaltyp": [190, 238], "large_str": [190, 238], "as_seri": [191, 238], "fruit": [191, 238, 401, 409, 442, 458, 466, 533, 826, 842], "car": [191, 238, 401, 409, 466, 533], "beetl": [191, 238, 401, 409, 466, 533], "audi": [191, 238, 401, 409, 466, 533], "28": [191, 238, 340, 720], "300": [191, 238, 790, 791, 793, 881], "hot": [193, 238], "re": [194, 238, 506], "ll": [194, 238, 863, 881], "numpy_arrai": [194, 238], "date_as_object": [195, 238], "sent": [195, 238, 863, 881], "datetime64": [195, 238], "pandas_df": [195, 238], "three": [197, 238, 422, 521, 533], "four": [197, 238, 521], "five": [197, 238], "num": [197, 238, 362, 365, 463, 533], "include_head": [198, 238], "header_nam": [198, 238], "column_nam": [198, 238], "iter": [198, 238, 306, 533, 680, 881], "veri": [198, 238, 547, 613, 673, 881], "perhap": [198, 238], "column_2": [198, 238], "name_gener": [198, 238, 284, 657], "base_nam": [198, 238], "my_column_": [198, 238], "my_column_0": [198, 238], "my_column_1": [198, 238], "my_column_2": [198, 238], "uniquekeepstrategi": [199, 238, 597, 613], "conjunct": [199, 238], "decompos": [200, 238, 598, 613], "t_a": [200, 238, 598, 613], "t_b": [200, 238, 598, 613], "t_c": [200, 238, 598, 613], "t_d": [200, 238, 598, 613], "womp": [200, 238, 598, 613], "t_": [200, 238, 598, 613], "t_struct": [200, 238, 598, 613], "step": [201, 238, 484], "unstackdirect": [201, 238], "form": [201, 238, 399, 533, 778, 881], "much": [201, 238, 306, 533, 680, 881], "pivot": [201, 238], "phase": [201, 238], "subject": [201, 238], "ascii_uppercas": [201, 238], "col1": [201, 238], "col2": [201, 238], "h": [201, 238, 355, 426, 533], "col1_0": [201, 238], "col1_1": [201, 238], "col1_2": [201, 238], "col2_0": [201, 238], "col2_1": [201, 238], "col2_2": [201, 238], "time_column": [202, 238], "frequenc": [202, 238], "forward_fil": [202, 238, 533], "06": [202, 238, 330, 342, 711, 719], "varianc": [203, 238, 346, 375, 419, 479, 524, 533, 599, 613, 728, 761, 798, 870, 881], "grow": [204, 238], "b_squar": [206, 238, 601, 613], "36": [206, 238, 601, 613], "named_expr": [207, 238, 602, 613], "is_not": [207, 238, 533, 602, 613], "opt": [207, 238, 602, 613], "with_columns_kwarg": [207, 238, 602, 613], "row_nr": [208, 238, 604, 613, 804, 881], "complet": [209, 863, 881], "idiomat": 209, "_sum": 209, "_tail_sum": 209, "bar_sum": 209, "bar_tail_sum": 209, "sub": [211, 290, 291, 442, 458, 662, 663, 826, 842], "triangl": [211, 607], "group_df": [211, 607], "nr": [214, 224, 608, 609], "maxim": [216, 228, 258, 533, 629, 881], "833333": 217, "minim": [219, 231, 259, 264, 426, 533, 630, 637, 769, 809, 881], "pivot_column": 221, "values_column": 221, "pivotop": 221, "larg": [221, 433, 434, 533], "overview": [238, 533, 542, 613, 881], "public": [238, 533, 542, 613, 881], "columnstyp": 238, "variou": [238, 533, 613, 881], "behavior": [238, 251, 483, 509, 512, 533], "mydatafram": 238, "notic": [238, 881], "initi": [238, 493, 502], "df4": 238, "drop_in_plac": 238, "drop_nul": [238, 309, 533, 613, 881], "estimated_s": [238, 881], "explod": [238, 355, 533, 613, 881], "find_idx_by_nam": 238, "frame_equ": [238, 331, 336], "get_column": [238, 522], "groupby_rol": [238, 411, 412, 413, 414, 415, 417, 418, 419, 533, 563, 613], "hash_row": 238, "hstack": 238, "insert_at_idx": 238, "is_dupl": [238, 533, 881], "is_empti": [238, 881], "is_uniqu": [238, 533, 881], "melt": [238, 613], "merge_sort": [238, 613], "n_uniqu": [238, 533, 606, 881], "partition_bi": 238, "pearson_corr": 238, "pipe": [238, 613], "quantil": [238, 415, 533, 613, 794, 881], "replace_at_idx": 238, "shrink_to_fit": [238, 881], "take_everi": [238, 533, 613, 881], "to_arrow": [238, 881], "to_dict": 238, "to_numpi": [238, 383, 533, 881], "to_panda": [238, 881], "to_struct": [238, 464, 465], "unnest": [238, 456, 457, 613, 840, 841], "unstack": 238, "upsampl": 238, "var": [238, 533, 613, 881], "write_avro": 238, "write_ipc": 238, "write_json": [238, 583, 613], "write_parquet": 238, "favor": 241, "futur": 241, "94": [246, 533], "confus": [248, 368, 370, 533], "tt": [248, 533], "tf": [248, 249, 533], "ff": [248, 249, 533], "upcast": [250, 533], "assum": [251, 533, 573, 607, 613], "a_times_2": [251, 533], "invers": [252, 253, 254, 255, 256, 257, 533, 623, 624, 625, 626, 627, 628, 881], "cosin": [252, 253, 298, 299, 383, 533, 623, 624, 674, 675, 881], "570796": [252, 254, 533, 623, 625, 881], "hyperbol": [253, 255, 257, 299, 430, 472, 533, 624, 626, 628, 675, 814, 857, 881], "sine": [254, 255, 383, 429, 430, 533, 625, 626, 813, 814, 881], "881374": [255, 533, 626, 881], "tangent": [256, 257, 471, 472, 533, 627, 628, 856, 857, 881], "785398": [256, 533, 627, 881], "would": [260, 262, 270, 388, 404, 485, 533, 631, 634, 643, 783, 863, 881], "arg_sort": [262, 533, 634, 881], "sublist": [263, 264, 266, 267, 269, 270, 271, 272, 273, 280, 283, 636, 637, 639, 640, 642, 643, 644, 645, 646, 653, 656, 750, 881], "membership": [266, 639], "null_behavior": [267, 307, 533, 640, 682, 881], "nullbehavior": [267, 307, 533, 640, 682, 881], "th": [267, 307, 431, 533, 640, 682, 815, 881], "against": [268, 613, 641, 887], "blindli": [268, 641], "worth": [268, 641], "enough": [268, 431, 533, 641, 815, 881], "concat_list": [268, 499, 641], "rank": [268, 499, 519, 533, 641, 881], "taken": [280, 454, 469, 533, 653, 838], "n_field_strategi": [284, 657], "tostructstrategi": [284, 657], "first_non_nul": [284, 657], "max_width": [284, 657], "field_0": [284, 657], "field_1": [284, 657], "field_n": [284, 657], "know": [284, 449, 833, 863, 871, 881], "incorrectli": 284, "downstream": [284, 423, 533, 805, 881], "advic": 284, "col_name_": [284, 657], "col_name_0": [284, 657], "col_name_1": [284, 657], "col_name_2": [284, 657], "substr": [287, 290, 291, 438, 442, 450, 451, 455, 456, 457, 458, 659, 662, 663, 822, 826, 834, 835, 839, 840, 841, 842], "transferencod": [288, 289, 440, 441, 660, 661, 824, 825], "hex": [288, 289, 440, 441, 660, 661, 824, 825], "base64": [288, 289, 440, 441, 660, 661, 824, 825], "prefix": [291, 458, 463, 533, 663, 842, 847], "strict": [292, 460, 533, 664, 802, 844, 881], "throw": [292, 445, 533, 664, 829, 881], "due": [292, 533, 664, 881], "overflow": [292, 304, 305, 467, 533, 664, 678, 679, 852, 881], "categoricalord": [293, 666], "lexic": [293, 666], "min_val": [295, 297, 533, 670, 672, 881], "max_val": [295, 296, 533, 670, 671, 881], "foo_clip": [295, 296, 297, 533], "clip": [296, 297, 533, 671, 672, 881], "543081": [299, 533, 675, 881], "cumul": [301, 302, 303, 304, 305, 493, 494, 495, 533, 676, 677, 678, 679, 881], "a_revers": [301, 302, 303, 304, 305, 384, 409, 466, 533], "uint16": [304, 305, 467, 533, 678, 679, 852, 881], "prevent": [304, 305, 374, 467, 533, 678, 679, 852, 881], "min_period": [306, 344, 345, 346, 410, 411, 412, 413, 414, 415, 417, 418, 419, 533, 680, 726, 727, 728, 789, 790, 791, 792, 793, 794, 796, 797, 798, 881], "slide": [306, 533, 680, 881], "anoth": [306, 311, 337, 434, 533, 603, 613, 622, 680, 687, 717, 802, 881], "realli": [306, 533, 680, 881], "complex": [306, 474, 533, 680, 866, 881], "visit": [306, 533, 680, 881], "44": [308, 533], "drop_nan": [310, 533, 881], "tu": [311, 315, 335, 340, 687, 688, 691, 715, 720], "lose": [311, 687], "2001": [311, 313, 315, 316, 323, 325, 328, 329, 330, 331, 332, 335, 336, 338, 339, 340, 342, 460, 687, 689, 691, 692, 695, 696, 697, 698, 700, 702, 703, 705, 706, 708, 709, 710, 711, 712, 714, 715, 716, 718, 719, 720, 722, 844], "tu_m": [311, 687], "tu_n": [311, 687], "tz": [312, 337, 341, 688, 717, 721], "with_time_zon": [312, 688], "timestamp": [312, 688], "extract": [313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 332, 333, 338, 339, 342, 444, 445, 689, 690, 692, 693, 694, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 712, 713, 718, 719, 722, 828, 829], "weekdai": [313, 329], "day_of_month": [313, 329, 339], "ordinal_dai": [313, 339], "day_of_year": [313, 329, 339], "diff": [314, 317, 320, 322, 324, 327, 333, 533, 690, 693, 699, 701, 704, 707, 713, 881], "days_diff": 314, "epochtimeunit": [315, 691], "unix": [315, 691], "epoch_n": [315, 691], "epoch_": [315, 691], "978307200000000": [315, 335, 691, 715], "978307200": [315, 691], "978393600000000": [315, 335, 691, 715], "978393600": [315, 691], "978480000000000": [315, 335, 691, 715], "978480000": [315, 691], "hours_diff": 317, "iso": [318, 338, 339, 694, 718, 719], "correspond": [318, 404, 533, 694, 783, 881], "microseconds_diff": 320, "1001": [320, 322, 327], "002": [320, 322, 327, 498, 699, 701, 707], "003": [320, 322, 327], "997": [320, 322, 327], "998": [320, 322, 327], "999": [320, 322, 327], "milliseconds_diff": 322, "59": [323, 332, 497, 703, 712], "minutes_diff": 324, "1440": [324, 704], "nanoseconds_diff": 327, "1000000": [327, 463, 707], "leap": [328, 708], "account": [328, 344, 345, 346, 533, 708, 726, 727, 728, 881], "minu": [328, 708], "dictat": [328, 708], "2000": [328, 708], "2005": [328, 708], "date_plus_1i": [328, 708], "1y2mo": [328, 708], "date_min": 328, "1998": [328, 708], "2002": [328, 330, 342, 708, 722], "1999": [328, 708], "2003": [328, 708], "2004": [328, 708], "2006": [328, 708], "ordin": [329, 404, 533, 709, 783, 881], "366": [329, 709], "180": [330, 342], "divid": [331, 336, 344, 345, 346, 375, 533, 711, 716, 726, 727, 728, 761, 881], "half": [331, 344, 345, 346, 533, 711, 726, 727, 728, 881], "seconod": [331, 711], "eg": [331, 336, 460], "225": [331, 336], "to_fram": [331, 336, 460, 464, 465, 803, 804, 840, 841, 844, 881], "10m": [331, 336, 711, 716], "milli": [332, 712], "micro": [332, 712], "compon": [332, 460, 496, 497, 498, 712], "456789": 332, "654321": 332, "111110": 332, "765431": 332, "sec": 332, "11111": 332, "seconds_diff": 333, "fmt": [334, 360, 460, 503, 533, 566, 613, 714, 844], "timestamp_n": [335, 715], "timestamp_m": 335, "978307200000": 335, "978393600000": 335, "978480000000": 335, "naiv": [337, 717], "53": [338, 718], "sundai": [339, 719], "incorrect": [340, 423, 533, 607, 720, 805, 881], "tu_u": [340, 720], "32971": [340, 720], "32974": [340, 720], "32976": [340, 720], "europ": [341, 688, 721], "london": [341, 688, 721], "gmt": [341, 688, 721], "bst": [341, 688, 721], "718281828459045": [343, 380, 533, 724, 764, 881], "formula": [343, 533, 724, 881], "pk": [343, 533, 724, 881], "459148": [343, 533], "754888": [343, 533], "com": [344, 345, 346, 443, 533, 726, 727, 728, 827, 881], "span": [344, 345, 346, 533, 726, 727, 728, 881], "half_lif": [344, 345, 346, 533, 726, 727, 728, 881], "exponenti": [344, 345, 346, 348, 533, 726, 727, 728, 729, 881], "weight": [344, 345, 346, 410, 411, 412, 413, 414, 415, 417, 418, 419, 431, 533, 726, 727, 728, 789, 790, 791, 792, 793, 794, 796, 797, 798, 815, 881], "averag": [344, 404, 533, 726, 783, 881], "decai": [344, 345, 346, 533, 726, 727, 728, 881], "term": [344, 345, 346, 446, 449, 533, 726, 727, 728, 830, 833, 881], "mass": [344, 345, 346, 533, 726, 727, 728, 881], "gamma": [344, 345, 346, 533, 726, 727, 728, 881], "foral": [344, 345, 346, 533, 726, 727, 728, 881], "geq": [344, 345, 346, 533, 726, 727, 728, 881], "theta": [344, 345, 346, 533, 726, 727, 728, 881], "life": [344, 345, 346, 533, 726, 727, 728, 881], "exp": [344, 345, 346, 533, 726, 727, 728, 881], "ln": [344, 345, 346, 533, 726, 727, 728, 881], "smooth": [344, 345, 346, 533, 726, 727, 728, 881], "factor": [344, 345, 346, 473, 533, 726, 727, 728, 865, 881], "leq": [344, 345, 346, 533, 726, 727, 728, 881], "begin": [344, 345, 346, 443, 533, 726, 727, 728, 827, 881], "imbal": [344, 345, 346, 533, 726, 727, 728, 881], "ew": [344, 345, 346, 533, 726, 727, 728, 881], "w_i": [344, 345, 346, 533, 726, 727, 728, 881], "recurs": [344, 345, 346, 533, 726, 727, 728, 881], "y_0": [344, 345, 346, 533, 726, 727, 728, 881], "x_0": [344, 345, 346, 533, 726, 727, 728, 881], "y_t": [344, 345, 346, 533, 726, 727, 728, 881], "y_": [344, 345, 346, 533, 726, 727, 728, 881], "x_t": [344, 345, 346, 533, 726, 727, 728, 881], "observ": [344, 345, 346, 533, 726, 727, 728, 881], "428571": [344, 533], "bia": [345, 346, 375, 416, 431, 533, 727, 728, 761, 795, 815, 881], "unbias": [345, 346, 533, 727, 728, 881], "963624": [345, 533, 727, 881], "928571": [346, 533, 728, 881], "wildcard": [347, 481, 488, 493, 494, 500, 502, 516, 533], "regex": [347, 438, 439, 442, 443, 444, 450, 451, 458, 488, 500, 533, 822, 823, 826, 827, 828, 834, 835, 842], "aa": [347, 500, 533], "ba": [347, 500, 533], "cc": [347, 500, 533], "718282": [348, 533], "389056": [348, 533], "54": [348, 533], "59815": [348, 533], "expand": [349, 355, 407, 533, 730, 881], "group_col": [353, 480, 533], "g1": [353, 398, 480, 533], "g2": [353, 398, 480, 533], "lt": [353, 480, 533], "gte": [353, 480, 533], "r": [355, 439, 443, 444, 450, 533, 823, 827, 828, 834], "word": [355, 533], "9774092659964970114": [358, 533], "13614470193936745724": [358, 533], "1101441246220388612": [358, 533], "11638928888656214026": [358, 533], "13382926553367784577": [358, 533], "cumsum": [360, 533, 566, 613, 881], "interpolationmethod": [361, 533, 742, 881], "regrid": [361, 533], "grid": [361, 533], "df_original_grid": [361, 533], "grid_point": [361, 533], "df_new_grid": [361, 533], "include_bound": [362, 533], "primit": [362, 366, 533, 863, 881], "finit": [364, 519, 533, 747, 881], "optional_memb": [366, 533, 750, 881], "infinit": [367, 533, 751, 881], "_isnan": [368, 533], "b_isnan": [368, 533], "negat": [369, 533], "_is_not_nan": [370, 533], "b_is_not_nan": [370, 533], "_not_nul": [371, 533], "a_not_nul": [371, 533], "b_not_nul": [371, 533], "_isnul": [372, 533], "a_isnul": [372, 533], "b_isnul": [372, 533], "undo": [374, 391, 533], "duplicateerror": [374, 533, 542], "occurr": [374, 533], "333333": [374, 419, 533, 778, 798, 881], "fisher": [375, 431, 533, 761, 815, 881], "fourth": [375, 533, 761, 881], "central": [375, 431, 533, 761, 815, 881], "definit": [375, 533, 761, 881], "subtract": [375, 533, 761, 881], "distribut": [375, 431, 533, 761, 815, 881], "elimin": [375, 533, 761, 881], "come": [375, 533, 543, 612, 761, 881], "bias": [375, 431, 533, 761, 815, 881], "scipi": [375, 431, 533, 761, 815, 881], "stat": [375, 431, 533, 761, 815, 881], "153061": [375, 533], "logarithm": [380, 381, 533, 764, 765, 881], "584963": [380, 533], "30103": [381, 533], "60206": [381, 533], "lowest": [382, 533], "9223372036854775808": [382, 533], "agg_list": [383, 533], "elementwis": [383, 410, 411, 412, 413, 414, 415, 417, 418, 419, 481, 482, 533, 789, 790, 791, 792, 793, 794, 796, 797, 798, 881], "third": [383, 533], "parti": [383, 533], "book": [383, 533], "argmax": [383, 533], "_revers": [384, 409, 466, 533], "b_revers": [384, 409, 466, 533], "computeerror": [388, 542], "keep_nam": [391, 533], "poison": [395, 396, 533, 774, 775, 881], "nanmax": [395, 396, 533, 774, 775, 881], "wherea": [395, 396, 533, 565, 572, 613, 774, 775, 881], "subgroup": [398, 533], "max_by_group": [398, 533], "recent": [399, 533, 778, 881], "percent": [399, 533, 778, 881], "090909": [399, 533], "expon": [400, 533], "power": [400, 533], "reverse_": [401, 533], "reverse_a": [401, 533], "reverse_fruit": [401, 533], "reverse_b": [401, 533], "reverse_car": [401, 533], "rankmethod": [404, 533, 783, 881], "ti": [404, 533, 783, 881], "appropri": [404, 533, 783, 881], "competit": [404, 533, 783, 881], "highest": [404, 477, 519, 533, 783, 881], "immedi": [404, 521, 533, 783, 881], "64bit": [406, 533, 785, 881], "safe": [406, 533, 785, 863, 881], "coerc": [407, 533], "dim": [408, 533, 787, 881], "flat": [408, 533, 787, 881], "fruits_revers": [409, 466, 533], "cars_revers": [409, 466, 533], "window_s": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 533, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 881], "rolling_min": [410, 533, 789, 881], "rolling_max": [410, 533, 789, 881], "rolling_mean": [410, 533, 789, 881], "rolling_sum": [410, 533, 789, 881], "multipli": [410, 411, 412, 413, 414, 415, 417, 418, 419, 533, 789, 790, 791, 792, 793, 794, 796, 797, 798, 881], "358899": [410, 533], "041452": [410, 533], "567764": [410, 533], "travers": [411, 412, 414, 417, 418, 419, 533, 790, 791, 793, 796, 797, 798, 881], "vector": [411, 412, 414, 417, 418, 419, 533, 790, 791, 793, 796, 797, 798, 881], "5h": [411, 412, 413, 414, 415, 417, 418, 419, 533], "33": [415, 420, 488, 533, 794, 881], "skew": [416, 533, 795, 881], "527525": [417, 533, 796, 881], "digit": [420, 463, 533, 799, 823, 847, 881], "17": [420, 533, 674, 711, 881], "maintain": [422, 475, 533, 613, 801, 867, 881], "six": [422, 533], "code": [423, 533, 571, 613, 805, 881], "care": [423, 533, 805, 881], "extrema": [426, 533, 809, 881], "112": [426, 533], "129": [426, 533], "i8": [426, 533, 788, 881], "8589934592": [426, 533], "1073741824": [426, 533], "content": [427, 478, 533, 811, 881], "175201": [430, 533, 814, 881], "unimod": [431, 533, 815, 881], "skewtest": [431, 533, 815, 881], "speak": [431, 533, 815, 881], "g_1": [431, 533, 815, 881], "m_3": [431, 533, 815, 881], "m_2": [431, 533, 815, 881], "m_i": [431, 533, 815, 881], "sum_": [431, 533, 815, 881], "texttt": [431, 533, 815, 881], "k_3": [431, 533, 815, 881], "k_2": [431, 533, 815, 881], "sqrt": [431, 533, 815, 881], "343622": [431, 533], "larger": [433, 519, 533], "414214": [435, 533, 818, 881], "treat": [438, 450, 451, 822, 834, 835], "ends_with": [438, 458, 842], "crab": [438, 822], "dog": [438, 461, 462, 490, 822], "rab": [438, 822], "success": [439, 444, 823, 828], "overlap": [439, 444, 823, 828], "captur": [439, 443, 444, 823, 827, 828], "123": [439, 444, 451, 823, 828, 835, 861, 881], "bla": [439, 444, 823, 828], "asd": [439, 444, 823, 828], "678": [439, 444, 823, 828], "910t": [439, 444, 823, 828], "count_digit": 439, "666f6f": [441, 825], "626172": [441, 825], "mango": [442, 458, 826, 842], "go": [442, 826], "has_suffix": 442, "group_index": [443, 827], "vote": [443, 827], "ballon_dor": [443, 827], "candid": [443, 827], "messi": [443, 827], "ref": [443, 827], "candidat": [443, 827], "jorginho": [443, 827], "ronaldo": [443, 827], "w": [443, 827], "extracted_nr": 444, "910": [444, 828], "json_path": [445, 829], "jsonpath": [445, 829], "regardless": [445, 829], "json_val": [445, 829], "n_char": [446, 830], "caf\u00e9": [446, 449, 830, 833], "345": [446, 449, 830, 833], "\u6771\u4eac": [446, 449, 830, 833], "nchar": [446, 449], "fillchar": [447, 452, 831, 836], "justifi": [447, 452, 831, 836], "pad": [447, 452, 463, 831, 836, 847], "cow": [447, 452, 831, 836], "monkei": [447, 452, 831, 836], "hippopotamu": [447, 452, 831, 836], "whitespac": [448, 453, 459, 832, 837, 843], "trail": [448, 453, 459, 837, 843], "text": [449, 450, 451, 833], "replace_al": [450, 834], "123abc": [450, 834], "abc456": [450, 834], "abcabc": [451, 835], "123a123": [451, 835], "bc": [451, 835], "trim": [453, 459, 832, 837, 843], "subslic": [454, 838], "pear": [454, 838], "papaya": [454, 838], "dragonfruit": [454, 838], "s_slice": 454, "ear": [454, 838], "aya": [454, 838], "uit": [454, 838], "ya": [454, 838], "onf": [454, 838], "inclus": [455, 456, 839, 840], "a_1": [456, 840, 860, 881], "d_4": [456, 840], "rename_field": [456, 457, 840, 841], "first_part": [456, 457, 840, 841], "second_part": [456, 457, 840, 841], "remaind": [457, 841], "app": [458, 842], "has_prefix": 458, "polarstemporaltyp": [460, 844], "tz_awar": [460, 844], "strftime": [460, 844], "convers": [460, 542, 844, 862, 863, 881], "anywher": [460, 844], "3f": 460, "sun": [460, 844], "34": [460, 844], "lowercas": [461, 845], "variant": [461, 462], "uppercas": [462, 846], "10000": 463, "100000": 463, "0010": 463, "0001": 463, "00000": 463, "00001": 463, "my_struct": [464, 465, 521], "NOT": [465, 562, 613], "anymor": 465, "panicexcept": [465, 542], "761594": [472, 533, 857, 881], "replic": [473, 533, 865, 881], "vals_phys": [473, 533], "largest": [474, 533, 866, 881], "smallest": [474, 533, 866, 881], "bottom_k": [474, 533], "appear": [476, 533, 868, 881], "value_count": [476, 533, 881], "9223372036854775807": [477, 533], "multithread": [478, 533], "columnwis": [481, 482], "AND": 481, "bitwis": [481, 482], "returns_scalar": 483, "Be": 484, "argsort": [485, 533, 881], "hamburg": 488, "concat": [489, 490, 668, 771, 881], "lag": 489, "mimic": 489, "a_lag_": 489, "a_rol": 489, "plai": 490, "swim": 490, "walk": 490, "full_sent": 490, "covari": 492, "intoexpr": [493, 502], "include_init": 493, "accumul": [493, 494, 502, 516], "fn": [493, 494, 502, 516], "new_valu": [493, 494, 502, 516], "simpli": [493, 502], "cumreduc": 493, "across": [495, 522], "syntact": [495, 500, 501, 504, 515, 518, 522, 818, 881], "sugar": [495, 500, 501, 504, 515, 518, 522, 818, 881], "cumfold": 495, "999999": 497, "add_week": 498, "add_dai": 498, "add_second": 498, "add_millisecond": 498, "add_hour": 498, "add_millisec": 498, "ond": 498, "eval": 499, "arr": [499, 526, 863, 873, 881], "mathemat": 499, "a_b_doubl": 499, "fstring": 503, "placehold": 503, "hello_": 503, "_world": 503, "foo_": 503, "_bar_": 503, "foo_a_bar_1": 503, "foo_b_bar_2": 503, "foo_c_bar_3": 503, "agg_group": [504, 533], "export": 506, "allow_object": 507, "valueexcept": 507, "544705": 514, "mode": [517, 533, 881], "propagate_nan": 519, "spearman": 519, "605551": 520, "605551275463989": 520, "sever": 521, "a_and_b": 521, "isn": 525, "thens": 525, "chain": 525, "sometim": 532, "ab": [533, 881], "arcco": [533, 881], "arccosh": [533, 881], "arcsin": [533, 881], "arcsinh": [533, 881], "arctan": [533, 881], "arctanh": [533, 881], "arg_max": [533, 881], "arg_min": [533, 881], "arg_uniqu": [533, 881], "backward_fil": 533, "clip_max": [533, 881], "clip_min": [533, 881], "co": [533, 881], "cosh": [533, 881], "cumcount": 533, "cummax": [533, 881], "cummin": [533, 881], "cumprod": [533, 881], "cumulative_ev": [533, 881], "entropi": [533, 881], "ewm_mean": [533, 881], "ewm_std": [533, 881], "ewm_var": [533, 881], "extend_const": [533, 881], "flatten": 533, "inspect": [533, 613], "is_between": 533, "is_finit": [533, 881], "is_first": [533, 881], "is_in": [533, 881], "is_infinit": [533, 881], "is_nan": [533, 881], "is_not_nan": [533, 881], "is_not_nul": [533, 881], "kurtosi": [533, 881], "log10": [533, 881], "map_alia": 533, "nan_max": [533, 881], "nan_min": [533, 881], "pct_chang": [533, 881], "pow": 533, "reinterpret": [533, 881], "repeat_bi": 533, "reshap": [533, 881], "rolling_appli": [533, 881], "rolling_median": [533, 881], "rolling_quantil": [533, 881], "rolling_skew": [533, 881], "rolling_std": [533, 881], "rolling_var": [533, 881], "search_sort": [533, 881], "set_sort": [533, 881], "shrink_dtyp": [533, 881], "sin": [533, 881], "sinh": [533, 881], "sort_bi": 533, "tan": [533, 881], "tanh": [533, 881], "to_phys": [533, 881], "top_k": [533, 881], "unique_count": [533, 881], "expos": 542, "registr": 542, "miscellan": 542, "unset": 542, "arrowerror": 542, "invalidoperationerror": 542, "nodataerror": 542, "notfounderror": 542, "schemaerror": 542, "shapeerror": 542, "build_info": 542, "show_vers": 542, "sqlcontext": [542, 887], "hit": [545, 613], "node": [545, 566, 573, 581, 613], "huge": [548, 613], "saver": [548, 613], "500": [556, 613, 698, 700, 706, 712, 790, 791, 793, 881], "purpos": [556, 613], "help": [556, 613], "influenc": [556, 573, 613], "read_json": [561, 605, 613], "lazygroupbi": [562, 563, 564, 613], "typeerror": [562, 613], "subscript": [562, 613], "validate_output_schema": [573, 613], "past": [573, 613], "paramount": [573, 613], "hard": [573, 613], "bug": [573, 607, 613], "invari": [573, 613], "upheld": [573, 613], "prune": [573, 613], "show_plot": [581, 613], "truncate_nod": [581, 613], "figsiz": [581, 590, 613], "gantt": [581, 613], "chart": [581, 613], "matplotlib": [581, 590, 613], "plot": [581, 590, 613], "groupby_partit": [581, 613], "470": [581, 613], "475": [581, 613], "1964": [581, 613], "from_json": [583, 613], "output_path": [590, 613], "raw_output": [590, 613], "figur": [590, 613], "290994": [593, 613], "118034": [593, 613], "433013": [593, 613], "1875": [599, 613], "extern": [603, 613], "df_a": [603, 613], "df_other": [603, 613], "afoo": [603, 613], "cfoo": [603, 613], "train_df": [603, 613], "feature_0": [603, 613], "feature_1": [603, 613], "test_df": [603, 613], "_train": [603, 613], "feature_0_train": [603, 613], "dataframescan": [605, 613], "output_schema": [605, 613], "unique_nam": 606, "instanti": 613, "profil": 613, "sink_parquet": 613, "data_pagesize_limit": 613, "slightli": 613, "with_context": 613, "sr": [618, 881], "new_aliased_sr": [618, 881], "append_chunk": [621, 881], "super": [621, 881], "skip_nul": [622, 881], "141593": [623, 881], "292432": [624, 881], "549306": [628, 881], "listnamespac": 635, "catnamespac": 665, "12345": [667, 736, 799, 881], "56789": [667, 736, 799, 881], "901234": [667, 736, 799, 881], "pi": [674, 813, 856, 881], "1232e": [674, 881], "quick": [681, 881], "mix": [681, 881], "series_num": [681, 881], "581139": [681, 881], "series_str": [681, 881], "datetimenamespac": 686, "epoch": 688, "1583020800": 688, "1585699200": 688, "1588291200": 688, "nyc": 688, "edt": 688, "1583038800": 688, "1585717200": 688, "1588309200": 688, "500m": [698, 700, 706, 712], "500000": 698, "2m": 703, "500000000": 706, "date_minus_1y_2mon": 708, "165": [711, 716], "series_equ": [711, 716, 881], "timestamp_u": 715, "978307200000000000": 715, "978393600000000000": 715, "978480000000000000": 715, "005": [724, 881], "06293300616044681": [724, 881], "65": [724, 881], "8568409950394724": [724, 881], "4000000": [725, 881], "814697265625": [725, 881], "bitmask": [738, 881], "swiftli": [738, 881], "10734580197236529959": [739, 881], "3022416320763508302": [739, 881], "13756996518000038261": [739, 881], "datelik": [744, 881], "166667": [778, 881], "142857": [778, 881], "512": [778, 881], "peak": [779, 780, 881], "nanstd": [789, 881], "858612": [789, 881], "200": [790, 791, 793, 881], "400": [790, 791, 793, 881], "150": [791, 881], "250": [791, 881], "350": [791, 881], "450": [791, 881], "381802": [795, 881], "dev": [796, 881], "57": [799, 881], "frequent": [803, 804, 881], "mutat": [804, 881], "2246e": [813, 856, 881], "divisor": [819, 870, 881], "stringnamespac": 820, "6331e16": [856, 881], "int64arrai": [859, 881], "a_2": [860, 881], "a_3": [860, 881], "456": [861, 881], "zero_copy_onli": [863, 881], "writabl": [863, 881], "view": [863, 881], "presenc": [863, 881], "immut": [863, 881], "made": [863, 881], "ignore_nul": [871, 881], "seriesview": [871, 881], "arraylik": 881, "nan_to_nul": 881, "dtype_if_empti": 881, "position": 881, "posit": 881, "scenario": 881, "arg_tru": 881, "chunk_length": 881, "get_chunk": 881, "has_valid": 881, "inner_dtyp": 881, "is_boolean": 881, "is_datelik": 881, "is_float": 881, "is_numer": 881, "is_sort": 881, "is_utf8": 881, "new_from_index": 881, "peak_max": 881, "peak_min": 881, "set_at_idx": 881, "readthedoc": 888}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [29, 0, 1, "", "DataType"], [30, 0, 1, "", "Date"], [31, 0, 1, "", "Datetime"], [32, 0, 1, "", "Duration"], [33, 0, 1, "", "Float32"], [34, 0, 1, "", "Float64"], [35, 0, 1, "", "Int16"], [36, 0, 1, "", "Int32"], [37, 0, 1, "", "Int64"], [38, 0, 1, "", "Int8"], [39, 0, 1, "", "List"], [40, 0, 1, "", "Null"], [41, 0, 1, "", "Object"], [887, 0, 1, "", "SQLContext"], [45, 0, 1, "", "StringCache"], [46, 0, 1, "", "Struct"], [47, 0, 1, "", "Time"], [48, 0, 1, "", "UInt16"], [49, 0, 1, "", "UInt32"], [50, 0, 1, "", "UInt64"], [51, 0, 1, "", "UInt8"], [52, 0, 1, "", "Unknown"], [53, 0, 1, "", "Utf8"], [54, 4, 1, "", "align_frames"], [481, 4, 1, "", "all"], [482, 4, 1, "", "any"], [483, 4, 1, "", "apply"], [484, 4, 1, "", "arange"], [59, 4, 1, "", "arg_where"], [485, 4, 1, "", "argsort_by"], [486, 4, 1, "", "avg"], [60, 4, 1, "", "build_info"], [487, 4, 1, "", "coalesce"], [488, 4, 1, "", "col"], [61, 4, 1, "", "collect_all"], [62, 4, 1, "", "concat"], [489, 4, 1, "", "concat_list"], [490, 4, 1, "", "concat_str"], [491, 4, 1, "", "count"], [492, 4, 1, "", "cov"], [493, 4, 1, "", "cumfold"], [494, 4, 1, "", "cumreduce"], [495, 4, 1, "", "cumsum"], [63, 4, 1, "", "cut"], [496, 4, 1, "", "date"], [64, 4, 1, "", "date_range"], [497, 4, 1, "", "datetime"], [498, 4, 1, "", "duration"], [499, 4, 1, "", "element"], [500, 4, 1, "", "exclude"], [501, 4, 1, "", "first"], [502, 4, 1, "", "fold"], [503, 4, 1, "", "format"], [77, 4, 1, "", "from_arrow"], [78, 4, 1, "", "from_dict"], [79, 4, 1, "", "from_dicts"], [80, 4, 1, "", "from_numpy"], [81, 4, 1, "", "from_pandas"], [82, 4, 1, "", "from_records"], [83, 4, 1, "", "get_dummies"], [84, 4, 1, "", "get_idx_type"], [504, 4, 1, "", "groups"], [505, 4, 1, "", "head"], [506, 4, 1, "", "list"], [507, 4, 1, "", "lit"], [508, 4, 1, "", "map"], [509, 4, 1, "", "max"], [510, 4, 1, "", "mean"], [511, 4, 1, "", "median"], [512, 4, 1, "", "min"], [513, 4, 1, "", "n_unique"], [86, 4, 1, "", "ones"], [514, 4, 1, "", "pearson_corr"], [515, 4, 1, "", "quantile"], [87, 4, 1, "", "read_avro"], [88, 4, 1, "", "read_csv"], [89, 4, 1, "", "read_csv_batched"], [90, 4, 1, "", "read_delta"], [91, 4, 1, "", "read_excel"], [92, 4, 1, "", "read_ipc"], [93, 4, 1, "", "read_ipc_schema"], [94, 4, 1, "", "read_json"], [95, 4, 1, "", "read_ndjson"], [96, 4, 1, "", "read_parquet"], [97, 4, 1, "", "read_parquet_schema"], [98, 4, 1, "", "read_sql"], [516, 4, 1, "", "reduce"], [517, 4, 1, "", "repeat"], [99, 4, 1, "", "scan_csv"], [100, 4, 1, "", "scan_delta"], [101, 4, 1, "", "scan_ds"], [102, 4, 1, "", "scan_ipc"], [103, 4, 1, "", "scan_ndjson"], [104, 4, 1, "", "scan_parquet"], [518, 4, 1, "", "select"], [105, 4, 1, "", "show_versions"], [519, 4, 1, "", "spearman_rank_corr"], [520, 4, 1, "", "std"], [521, 4, 1, "", "struct"], [522, 4, 1, "", "sum"], [523, 4, 1, "", "tail"], [112, 4, 1, "", "threadpool_size"], [113, 4, 1, "", "toggle_string_cache"], [524, 4, 1, "", "var"], [525, 4, 1, "", "when"], [114, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_str_lengths"], [10, 1, 1, "", "set_tbl_cell_alignment"], [11, 1, 1, "", "set_tbl_cols"], [12, 1, 1, "", "set_tbl_column_data_type_inline"], [13, 1, 1, "", "set_tbl_dataframe_shape_below"], [14, 1, 1, "", "set_tbl_formatting"], [15, 1, 1, "", "set_tbl_hide_column_data_types"], [16, 1, 1, "", "set_tbl_hide_column_names"], [17, 1, 1, "", "set_tbl_hide_dataframe_shape"], [18, 1, 1, "", "set_tbl_hide_dtype_separator"], [19, 1, 1, "", "set_tbl_rows"], [20, 1, 1, "", "set_tbl_width_chars"], [21, 1, 1, "", "set_verbose"], [22, 1, 1, "", "state"]], "polars.DataFrame": [[117, 1, 1, "", "apply"], [118, 1, 1, "", "cleared"], [119, 1, 1, "", "clone"], [120, 2, 1, "", "columns"], [121, 1, 1, "", "describe"], [122, 1, 1, "", "drop"], [123, 1, 1, "", "drop_in_place"], [124, 1, 1, "", "drop_nulls"], [125, 2, 1, "", "dtypes"], [126, 1, 1, "", "estimated_size"], [127, 1, 1, "", "explode"], [128, 1, 1, "", "extend"], [129, 1, 1, "", "fill_nan"], [130, 1, 1, "", "fill_null"], [131, 1, 1, "", "filter"], [132, 1, 1, "", "find_idx_by_name"], [133, 1, 1, "", "fold"], [134, 1, 1, "", "frame_equal"], [135, 1, 1, "", "get_column"], [136, 1, 1, "", "get_columns"], [137, 1, 1, "", "glimpse"], [138, 1, 1, "", "groupby"], [139, 1, 1, "", "groupby_dynamic"], [140, 1, 1, "", "groupby_rolling"], [141, 1, 1, "", "hash_rows"], [142, 1, 1, "", "head"], [143, 2, 1, "", "height"], [144, 1, 1, "", "hstack"], [145, 1, 1, "", "insert_at_idx"], [146, 1, 1, "", "interpolate"], [147, 1, 1, "", "is_duplicated"], [148, 1, 1, "", "is_empty"], [149, 1, 1, "", "is_unique"], [150, 1, 1, "", "item"], [151, 1, 1, "", "join"], [152, 1, 1, "", "join_asof"], [153, 1, 1, "", "lazy"], [154, 1, 1, "", "limit"], [155, 1, 1, "", "max"], [156, 1, 1, "", "mean"], [157, 1, 1, "", "median"], [158, 1, 1, "", "melt"], [159, 1, 1, "", "merge_sorted"], [160, 1, 1, "", "min"], [161, 1, 1, "", "n_chunks"], [162, 1, 1, "", "n_unique"], [163, 1, 1, "", "null_count"], [164, 1, 1, "", "partition_by"], [165, 1, 1, "", "pearson_corr"], [166, 1, 1, "", "pipe"], [167, 1, 1, "", "pivot"], [168, 1, 1, "", "product"], [169, 1, 1, "", "quantile"], [170, 1, 1, "", "rechunk"], [171, 1, 1, "", "rename"], [172, 1, 1, "", "replace"], [173, 1, 1, "", "replace_at_idx"], [174, 1, 1, "", "reverse"], [175, 1, 1, "", "row"], [176, 1, 1, "", "rows"], [177, 1, 1, "", "sample"], [178, 2, 1, "", "schema"], [179, 1, 1, "", "select"], [180, 2, 1, "", "shape"], [181, 1, 1, "", "shift"], [182, 1, 1, "", "shift_and_fill"], [183, 1, 1, "", "shrink_to_fit"], [184, 1, 1, "", "slice"], [185, 1, 1, "", "sort"], [186, 1, 1, "", "std"], [187, 1, 1, "", "sum"], [188, 1, 1, "", "tail"], [189, 1, 1, "", "take_every"], [190, 1, 1, "", "to_arrow"], [191, 1, 1, "", "to_dict"], [192, 1, 1, "", "to_dicts"], [193, 1, 1, "", "to_dummies"], [194, 1, 1, "", "to_numpy"], [195, 1, 1, "", "to_pandas"], [196, 1, 1, "", "to_series"], [197, 1, 1, "", "to_struct"], [198, 1, 1, "", "transpose"], [199, 1, 1, "", "unique"], [200, 1, 1, "", "unnest"], [201, 1, 1, "", "unstack"], [202, 1, 1, "", "upsample"], [203, 1, 1, "", "var"], [204, 1, 1, "", "vstack"], [205, 2, 1, "", "width"], [206, 1, 1, "", "with_column"], [207, 1, 1, "", "with_columns"], [208, 1, 1, "", "with_row_count"], [23, 1, 1, "", "write_avro"], [24, 1, 1, "", "write_csv"], [25, 1, 1, "", "write_ipc"], [26, 1, 1, "", "write_json"], [27, 1, 1, "", "write_ndjson"], [28, 1, 1, "", "write_parquet"]], "polars.DataType": [[29, 1, 1, "", "__init__"]], "polars.Date": [[30, 1, 1, "", "__init__"]], "polars.Datetime": [[31, 1, 1, "", "__init__"]], "polars.Duration": [[32, 1, 1, "", "__init__"]], "polars.Expr": [[245, 1, 1, "", "abs"], [246, 1, 1, "", "agg_groups"], [247, 1, 1, "", "alias"], [248, 1, 1, "", "all"], [249, 1, 1, "", "any"], [250, 1, 1, "", "append"], [251, 1, 1, "", "apply"], [252, 1, 1, "", "arccos"], [253, 1, 1, "", "arccosh"], [254, 1, 1, "", "arcsin"], [255, 1, 1, "", "arcsinh"], [256, 1, 1, "", "arctan"], [257, 1, 1, "", "arctanh"], [258, 1, 1, "", "arg_max"], [259, 1, 1, "", "arg_min"], [260, 1, 1, "", "arg_sort"], [261, 1, 1, "", "arg_unique"], [262, 1, 1, "", "argsort"], [286, 1, 1, "", "backward_fill"], [292, 1, 1, "", "cast"], [294, 1, 1, "", "ceil"], [295, 1, 1, "", "clip"], [296, 1, 1, "", "clip_max"], [297, 1, 1, "", "clip_min"], [298, 1, 1, "", "cos"], [299, 1, 1, "", "cosh"], [300, 1, 1, "", "count"], [301, 1, 1, "", "cumcount"], [302, 1, 1, "", "cummax"], [303, 1, 1, "", "cummin"], [304, 1, 1, "", "cumprod"], [305, 1, 1, "", "cumsum"], [306, 1, 1, "", "cumulative_eval"], [307, 1, 1, "", "diff"], [308, 1, 1, "", "dot"], [309, 1, 1, "", "drop_nans"], [310, 1, 1, "", "drop_nulls"], [343, 1, 1, "", "entropy"], [344, 1, 1, "", "ewm_mean"], [345, 1, 1, "", "ewm_std"], [346, 1, 1, "", "ewm_var"], [347, 1, 1, "", "exclude"], [348, 1, 1, "", "exp"], [349, 1, 1, "", "explode"], [350, 1, 1, "", "extend_constant"], [351, 1, 1, "", "fill_nan"], [352, 1, 1, "", "fill_null"], [353, 1, 1, "", "filter"], [354, 1, 1, "", "first"], [355, 1, 1, "", "flatten"], [356, 1, 1, "", "floor"], [357, 1, 1, "", "forward_fill"], [358, 1, 1, "", "hash"], [359, 1, 1, "", "head"], [360, 1, 1, "", "inspect"], [361, 1, 1, "", "interpolate"], [362, 1, 1, "", "is_between"], [363, 1, 1, "", "is_duplicated"], [364, 1, 1, "", "is_finite"], [365, 1, 1, "", "is_first"], [366, 1, 1, "", "is_in"], [367, 1, 1, "", "is_infinite"], [368, 1, 1, "", "is_nan"], [369, 1, 1, "", "is_not"], [370, 1, 1, "", "is_not_nan"], [371, 1, 1, "", "is_not_null"], [372, 1, 1, "", "is_null"], [373, 1, 1, "", "is_unique"], [374, 1, 1, "", "keep_name"], [375, 1, 1, "", "kurtosis"], [376, 1, 1, "", "last"], [377, 1, 1, "", "len"], [378, 1, 1, "", "limit"], [379, 1, 1, "", "list"], [380, 1, 1, "", "log"], [381, 1, 1, "", "log10"], [382, 1, 1, "", "lower_bound"], [383, 1, 1, "", "map"], [384, 1, 1, "", "map_alias"], [385, 1, 1, "", "max"], [386, 1, 1, "", "mean"], [387, 1, 1, "", "median"], [392, 1, 1, "", "min"], [393, 1, 1, "", "mode"], [394, 1, 1, "", "n_unique"], [395, 1, 1, "", "nan_max"], [396, 1, 1, "", "nan_min"], [397, 1, 1, "", "null_count"], [398, 1, 1, "", "over"], [399, 1, 1, "", "pct_change"], [400, 1, 1, "", "pow"], [401, 1, 1, "", "prefix"], [402, 1, 1, "", "product"], [403, 1, 1, "", "quantile"], [404, 1, 1, "", "rank"], [405, 1, 1, "", "rechunk"], [406, 1, 1, "", "reinterpret"], [407, 1, 1, "", "repeat_by"], [408, 1, 1, "", "reshape"], [409, 1, 1, "", "reverse"], [410, 1, 1, "", "rolling_apply"], [411, 1, 1, "", "rolling_max"], [412, 1, 1, "", "rolling_mean"], [413, 1, 1, "", "rolling_median"], [414, 1, 1, "", "rolling_min"], [415, 1, 1, "", "rolling_quantile"], [416, 1, 1, "", "rolling_skew"], [417, 1, 1, "", "rolling_std"], [418, 1, 1, "", "rolling_sum"], [419, 1, 1, "", "rolling_var"], [420, 1, 1, "", "round"], [421, 1, 1, "", "sample"], [422, 1, 1, "", "search_sorted"], [423, 1, 1, "", "set_sorted"], [424, 1, 1, "", "shift"], [425, 1, 1, "", "shift_and_fill"], [426, 1, 1, "", "shrink_dtype"], [427, 1, 1, "", "shuffle"], [428, 1, 1, "", "sign"], [429, 1, 1, "", "sin"], [430, 1, 1, "", "sinh"], [431, 1, 1, "", "skew"], [432, 1, 1, "", "slice"], [433, 1, 1, "", "sort"], [434, 1, 1, "", "sort_by"], [435, 1, 1, "", "sqrt"], [436, 1, 1, "", "std"], [466, 1, 1, "", "suffix"], [467, 1, 1, "", "sum"], [468, 1, 1, "", "tail"], [469, 1, 1, "", "take"], [470, 1, 1, "", "take_every"], [471, 1, 1, "", "tan"], [472, 1, 1, "", "tanh"], [473, 1, 1, "", "to_physical"], [474, 1, 1, "", "top_k"], [475, 1, 1, "", "unique"], [476, 1, 1, "", "unique_counts"], [477, 1, 1, "", "upper_bound"], [478, 1, 1, "", "value_counts"], [479, 1, 1, "", "var"], [480, 1, 1, "", "where"]], "polars.Expr.arr": [[263, 1, 1, "", "arg_max"], [264, 1, 1, "", "arg_min"], [265, 1, 1, "", "concat"], [266, 1, 1, "", "contains"], [267, 1, 1, "", "diff"], [268, 1, 1, "", "eval"], [269, 1, 1, "", "first"], [270, 1, 1, "", "get"], [271, 1, 1, "", "head"], [272, 1, 1, "", "join"], [273, 1, 1, "", "last"], [274, 1, 1, "", "lengths"], [275, 1, 1, "", "max"], [276, 1, 1, "", "mean"], [277, 1, 1, "", "min"], [278, 1, 1, "", "reverse"], [279, 1, 1, "", "shift"], [280, 1, 1, "", "slice"], [281, 1, 1, "", "sort"], [282, 1, 1, "", "sum"], [283, 1, 1, "", "tail"], [284, 1, 1, "", "to_struct"], [285, 1, 1, "", "unique"]], "polars.Expr.bin": [[287, 1, 1, "", "contains"], [288, 1, 1, "", "decode"], [289, 1, 1, "", "encode"], [290, 1, 1, "", "ends_with"], [291, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[293, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[311, 1, 1, "", "cast_time_unit"], [312, 1, 1, "", "cast_time_zone"], [313, 1, 1, "", "day"], [314, 1, 1, "", "days"], [315, 1, 1, "", "epoch"], [316, 1, 1, "", "hour"], [317, 1, 1, "", "hours"], [318, 1, 1, "", "iso_year"], [319, 1, 1, "", "microsecond"], [320, 1, 1, "", "microseconds"], [321, 1, 1, "", "millisecond"], [322, 1, 1, "", "milliseconds"], [323, 1, 1, "", "minute"], [324, 1, 1, "", "minutes"], [325, 1, 1, "", "month"], [326, 1, 1, "", "nanosecond"], [327, 1, 1, "", "nanoseconds"], [328, 1, 1, "", "offset_by"], [329, 1, 1, "", "ordinal_day"], [330, 1, 1, "", "quarter"], [331, 1, 1, "", "round"], [332, 1, 1, "", "second"], [333, 1, 1, "", "seconds"], [334, 1, 1, "", "strftime"], [335, 1, 1, "", "timestamp"], [336, 1, 1, "", "truncate"], [337, 1, 1, "", "tz_localize"], [338, 1, 1, "", "week"], [339, 1, 1, "", "weekday"], [340, 1, 1, "", "with_time_unit"], [341, 1, 1, "", "with_time_zone"], [342, 1, 1, "", "year"]], "polars.Expr.meta": [[388, 1, 1, "", "output_name"], [389, 1, 1, "", "pop"], [390, 1, 1, "", "root_names"], [391, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[437, 1, 1, "", "concat"], [438, 1, 1, "", "contains"], [439, 1, 1, "", "count_match"], [440, 1, 1, "", "decode"], [441, 1, 1, "", "encode"], [442, 1, 1, "", "ends_with"], [443, 1, 1, "", "extract"], [444, 1, 1, "", "extract_all"], [445, 1, 1, "", "json_path_match"], [446, 1, 1, "", "lengths"], [447, 1, 1, "", "ljust"], [448, 1, 1, "", "lstrip"], [449, 1, 1, "", "n_chars"], [450, 1, 1, "", "replace"], [451, 1, 1, "", "replace_all"], [452, 1, 1, "", "rjust"], [453, 1, 1, "", "rstrip"], [454, 1, 1, "", "slice"], [455, 1, 1, "", "split"], [456, 1, 1, "", "split_exact"], [457, 1, 1, "", "splitn"], [458, 1, 1, "", "starts_with"], [459, 1, 1, "", "strip"], [460, 1, 1, "", "strptime"], [461, 1, 1, "", "to_lowercase"], [462, 1, 1, "", "to_uppercase"], [463, 1, 1, "", "zfill"]], "polars.Expr.struct": [[464, 1, 1, "", "field"], [465, 1, 1, "", "rename_fields"]], "polars.Float32": [[33, 1, 1, "", "__init__"]], "polars.Float64": [[34, 1, 1, "", "__init__"]], "polars.Int16": [[35, 1, 1, "", "__init__"]], "polars.Int32": [[36, 1, 1, "", "__init__"]], "polars.Int64": [[37, 1, 1, "", "__init__"]], "polars.Int8": [[38, 1, 1, "", "__init__"]], "polars.LazyFrame": [[545, 1, 1, "", "cache"], [546, 1, 1, "", "cleared"], [547, 1, 1, "", "clone"], [548, 1, 1, "", "collect"], [549, 2, 1, "", "columns"], [550, 1, 1, "", "describe_optimized_plan"], [551, 1, 1, "", "describe_plan"], [552, 1, 1, "", "drop"], [553, 1, 1, "", "drop_nulls"], [554, 2, 1, "", "dtypes"], [555, 1, 1, "", "explode"], [556, 1, 1, "", "fetch"], [557, 1, 1, "", "fill_nan"], [558, 1, 1, "", "fill_null"], [559, 1, 1, "", "filter"], [560, 1, 1, "", "first"], [561, 1, 1, "", "from_json"], [562, 1, 1, "", "groupby"], [563, 1, 1, "", "groupby_dynamic"], [564, 1, 1, "", "groupby_rolling"], [565, 1, 1, "", "head"], [566, 1, 1, "", "inspect"], [567, 1, 1, "", "interpolate"], [568, 1, 1, "", "join"], [569, 1, 1, "", "join_asof"], [570, 1, 1, "", "last"], [571, 1, 1, "", "lazy"], [572, 1, 1, "", "limit"], [573, 1, 1, "", "map"], [574, 1, 1, "", "max"], [575, 1, 1, "", "mean"], [576, 1, 1, "", "median"], [577, 1, 1, "", "melt"], [578, 1, 1, "", "merge_sorted"], [579, 1, 1, "", "min"], [580, 1, 1, "", "pipe"], [581, 1, 1, "", "profile"], [582, 1, 1, "", "quantile"], [583, 1, 1, "", "read_json"], [584, 1, 1, "", "rename"], [585, 1, 1, "", "reverse"], [586, 2, 1, "", "schema"], [587, 1, 1, "", "select"], [588, 1, 1, "", "shift"], [589, 1, 1, "", "shift_and_fill"], [590, 1, 1, "", "show_graph"], [591, 1, 1, "", "slice"], [592, 1, 1, "", "sort"], [593, 1, 1, "", "std"], [594, 1, 1, "", "sum"], [595, 1, 1, "", "tail"], [596, 1, 1, "", "take_every"], [597, 1, 1, "", "unique"], [598, 1, 1, "", "unnest"], [599, 1, 1, "", "var"], [600, 2, 1, "", "width"], [601, 1, 1, "", "with_column"], [602, 1, 1, "", "with_columns"], [603, 1, 1, "", "with_context"], [604, 1, 1, "", "with_row_count"], [605, 1, 1, "", "write_json"]], "polars.List": [[39, 1, 1, "", "__init__"]], "polars.Null": [[40, 1, 1, "", "__init__"]], "polars.Object": [[41, 1, 1, "", "__init__"]], "polars.SQLContext": [[42, 1, 1, "", "execute"], [43, 1, 1, "", "query"], [44, 1, 1, "", "register"]], "polars.Series": [[617, 1, 1, "", "abs"], [618, 1, 1, "", "alias"], [619, 1, 1, "", "all"], [620, 1, 1, "", "any"], [621, 1, 1, "", "append"], [622, 1, 1, "", "apply"], [623, 1, 1, "", "arccos"], [624, 1, 1, "", "arccosh"], [625, 1, 1, "", "arcsin"], [626, 1, 1, "", "arcsinh"], [627, 1, 1, "", "arctan"], [628, 1, 1, "", "arctanh"], [629, 1, 1, "", "arg_max"], [630, 1, 1, "", "arg_min"], [631, 1, 1, "", "arg_sort"], [632, 1, 1, "", "arg_true"], [633, 1, 1, "", "arg_unique"], [634, 1, 1, "", "argsort"], [635, 3, 1, "", "arr"], [664, 1, 1, "", "cast"], [665, 3, 1, "", "cat"], [667, 1, 1, "", "ceil"], [668, 1, 1, "", "chunk_lengths"], [669, 1, 1, "", "cleared"], [670, 1, 1, "", "clip"], [671, 1, 1, "", "clip_max"], [672, 1, 1, "", "clip_min"], [673, 1, 1, "", "clone"], [674, 1, 1, "", "cos"], [675, 1, 1, "", "cosh"], [676, 1, 1, "", "cummax"], [677, 1, 1, "", "cummin"], [678, 1, 1, "", "cumprod"], [679, 1, 1, "", "cumsum"], [680, 1, 1, "", "cumulative_eval"], [681, 1, 1, "", "describe"], [682, 1, 1, "", "diff"], [683, 1, 1, "", "dot"], [684, 1, 1, "", "drop_nans"], [685, 1, 1, "", "drop_nulls"], [686, 3, 1, "", "dt"], [723, 2, 1, "", "dtype"], [724, 1, 1, "", "entropy"], [725, 1, 1, "", "estimated_size"], [726, 1, 1, "", "ewm_mean"], [727, 1, 1, "", "ewm_std"], [728, 1, 1, "", "ewm_var"], [729, 1, 1, "", "exp"], [730, 1, 1, "", "explode"], [731, 1, 1, "", "extend_constant"], [732, 1, 1, "", "fill_nan"], [733, 1, 1, "", "fill_null"], [734, 1, 1, "", "filter"], [735, 2, 1, "", "flags"], [736, 1, 1, "", "floor"], [737, 1, 1, "", "get_chunks"], [738, 1, 1, "", "has_validity"], [739, 1, 1, "", "hash"], [740, 1, 1, "", "head"], [741, 2, 1, "", "inner_dtype"], [742, 1, 1, "", "interpolate"], [743, 1, 1, "", "is_boolean"], [744, 1, 1, "", "is_datelike"], [745, 1, 1, "", "is_duplicated"], [746, 1, 1, "", "is_empty"], [747, 1, 1, "", "is_finite"], [748, 1, 1, "", "is_first"], [749, 1, 1, "", "is_float"], [750, 1, 1, "", "is_in"], [751, 1, 1, "", "is_infinite"], [752, 1, 1, "", "is_nan"], [753, 1, 1, "", "is_not_nan"], [754, 1, 1, "", "is_not_null"], [755, 1, 1, "", "is_null"], [756, 1, 1, "", "is_numeric"], [757, 1, 1, "", "is_sorted"], [758, 1, 1, "", "is_unique"], [759, 1, 1, "", "is_utf8"], [760, 1, 1, "", "item"], [761, 1, 1, "", "kurtosis"], [762, 1, 1, "", "len"], [763, 1, 1, "", "limit"], [764, 1, 1, "", "log"], [765, 1, 1, "", "log10"], [766, 1, 1, "", "max"], [767, 1, 1, "", "mean"], [768, 1, 1, "", "median"], [769, 1, 1, "", "min"], [770, 1, 1, "", "mode"], [771, 1, 1, "", "n_chunks"], [772, 1, 1, "", "n_unique"], [773, 2, 1, "", "name"], [774, 1, 1, "", "nan_max"], [775, 1, 1, "", "nan_min"], [776, 1, 1, "", "new_from_index"], [777, 1, 1, "", "null_count"], [778, 1, 1, "", "pct_change"], [779, 1, 1, "", "peak_max"], [780, 1, 1, "", "peak_min"], [781, 1, 1, "", "product"], [782, 1, 1, "", "quantile"], [783, 1, 1, "", "rank"], [784, 1, 1, "", "rechunk"], [785, 1, 1, "", "reinterpret"], [786, 1, 1, "", "rename"], [787, 1, 1, "", "reshape"], [788, 1, 1, "", "reverse"], [789, 1, 1, "", "rolling_apply"], [790, 1, 1, "", "rolling_max"], [791, 1, 1, "", "rolling_mean"], [792, 1, 1, "", "rolling_median"], [793, 1, 1, "", "rolling_min"], [794, 1, 1, "", "rolling_quantile"], [795, 1, 1, "", "rolling_skew"], [796, 1, 1, "", "rolling_std"], [797, 1, 1, "", "rolling_sum"], [798, 1, 1, "", "rolling_var"], [799, 1, 1, "", "round"], [800, 1, 1, "", "sample"], [801, 1, 1, "", "search_sorted"], [802, 1, 1, "", "series_equal"], [803, 1, 1, "", "set"], [804, 1, 1, "", "set_at_idx"], [805, 1, 1, "", "set_sorted"], [806, 2, 1, "", "shape"], [807, 1, 1, "", "shift"], [808, 1, 1, "", "shift_and_fill"], [809, 1, 1, "", "shrink_dtype"], [810, 1, 1, "", "shrink_to_fit"], [811, 1, 1, "", "shuffle"], [812, 1, 1, "", "sign"], [813, 1, 1, "", "sin"], [814, 1, 1, "", "sinh"], [815, 1, 1, "", "skew"], [816, 1, 1, "", "slice"], [817, 1, 1, "", "sort"], [818, 1, 1, "", "sqrt"], [819, 1, 1, "", "std"], [820, 3, 1, "", "str"], [852, 1, 1, "", "sum"], [853, 1, 1, "", "tail"], [854, 1, 1, "", "take"], [855, 1, 1, "", "take_every"], [856, 1, 1, "", "tan"], [857, 1, 1, "", "tanh"], [858, 2, 1, "", "time_unit"], [859, 1, 1, "", "to_arrow"], [860, 1, 1, "", "to_dummies"], [861, 1, 1, "", "to_frame"], [862, 1, 1, "", "to_list"], [863, 1, 1, "", "to_numpy"], [864, 1, 1, "", "to_pandas"], [865, 1, 1, "", "to_physical"], [866, 1, 1, "", "top_k"], [867, 1, 1, "", "unique"], [868, 1, 1, "", "unique_counts"], [869, 1, 1, "", "value_counts"], [870, 1, 1, "", "var"], [871, 1, 1, "", "view"], [872, 1, 1, "", "zip_with"]], "polars.Series.arr": [[636, 1, 1, "", "arg_max"], [637, 1, 1, "", "arg_min"], [638, 1, 1, "", "concat"], [639, 1, 1, "", "contains"], [640, 1, 1, "", "diff"], [641, 1, 1, "", "eval"], [642, 1, 1, "", "first"], [643, 1, 1, "", "get"], [644, 1, 1, "", "head"], [645, 1, 1, "", "join"], [646, 1, 1, "", "last"], [647, 1, 1, "", "lengths"], [648, 1, 1, "", "max"], [649, 1, 1, "", "mean"], [650, 1, 1, "", "min"], [651, 1, 1, "", "reverse"], [652, 1, 1, "", "shift"], [653, 1, 1, "", "slice"], [654, 1, 1, "", "sort"], [655, 1, 1, "", "sum"], [656, 1, 1, "", "tail"], [657, 1, 1, "", "to_struct"], [658, 1, 1, "", "unique"]], "polars.Series.bin": [[659, 1, 1, "", "contains"], [660, 1, 1, "", "decode"], [661, 1, 1, "", "encode"], [662, 1, 1, "", "ends_with"], [663, 1, 1, "", "starts_with"]], "polars.Series.cat": [[666, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[687, 1, 1, "", "cast_time_unit"], [688, 1, 1, "", "cast_time_zone"], [689, 1, 1, "", "day"], [690, 1, 1, "", "days"], [691, 1, 1, "", "epoch"], [692, 1, 1, "", "hour"], [693, 1, 1, "", "hours"], [694, 1, 1, "", "iso_year"], [695, 1, 1, "", "max"], [696, 1, 1, "", "mean"], [697, 1, 1, "", "median"], [698, 1, 1, "", "microsecond"], [699, 1, 1, "", "microseconds"], [700, 1, 1, "", "millisecond"], [701, 1, 1, "", "milliseconds"], [702, 1, 1, "", "min"], [703, 1, 1, "", "minute"], [704, 1, 1, "", "minutes"], [705, 1, 1, "", "month"], [706, 1, 1, "", "nanosecond"], [707, 1, 1, "", "nanoseconds"], [708, 1, 1, "", "offset_by"], [709, 1, 1, "", "ordinal_day"], [710, 1, 1, "", "quarter"], [711, 1, 1, "", "round"], [712, 1, 1, "", "second"], [713, 1, 1, "", "seconds"], [714, 1, 1, "", "strftime"], [715, 1, 1, "", "timestamp"], [716, 1, 1, "", "truncate"], [717, 1, 1, "", "tz_localize"], [718, 1, 1, "", "week"], [719, 1, 1, "", "weekday"], [720, 1, 1, "", "with_time_unit"], [721, 1, 1, "", "with_time_zone"], [722, 1, 1, "", "year"]], "polars.Series.str": [[821, 1, 1, "", "concat"], [822, 1, 1, "", "contains"], [823, 1, 1, "", "count_match"], [824, 1, 1, "", "decode"], [825, 1, 1, "", "encode"], [826, 1, 1, "", "ends_with"], [827, 1, 1, "", "extract"], [828, 1, 1, "", "extract_all"], [829, 1, 1, "", "json_path_match"], [830, 1, 1, "", "lengths"], [831, 1, 1, "", "ljust"], [832, 1, 1, "", "lstrip"], [833, 1, 1, "", "n_chars"], [834, 1, 1, "", "replace"], [835, 1, 1, "", "replace_all"], [836, 1, 1, "", "rjust"], [837, 1, 1, "", "rstrip"], [838, 1, 1, "", "slice"], [839, 1, 1, "", "split"], [840, 1, 1, "", "split_exact"], [841, 1, 1, "", "splitn"], [842, 1, 1, "", "starts_with"], [843, 1, 1, "", "strip"], [844, 1, 1, "", "strptime"], [845, 1, 1, "", "to_lowercase"], [846, 1, 1, "", "to_uppercase"], [847, 1, 1, "", "zfill"]], "polars.Series.struct": [[848, 1, 1, "", "field"], [849, 3, 1, "", "fields"], [850, 1, 1, "", "rename_fields"], [851, 1, 1, "", "to_frame"]], "polars.StringCache": [[45, 1, 1, "", "__init__"]], "polars.Struct": [[46, 1, 1, "", "__init__"]], "polars.Time": [[47, 1, 1, "", "__init__"]], "polars.UInt16": [[48, 1, 1, "", "__init__"]], "polars.UInt32": [[49, 1, 1, "", "__init__"]], "polars.UInt64": [[50, 1, 1, "", "__init__"]], "polars.UInt8": [[51, 1, 1, "", "__init__"]], "polars.Unknown": [[52, 1, 1, "", "__init__"]], "polars.Utf8": [[53, 1, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[65, 5, 1, "", "ArrowError"], [66, 5, 1, "", "ComputeError"], [67, 5, 1, "", "DuplicateError"], [68, 5, 1, "", "InvalidOperationError"], [69, 5, 1, "", "NoDataError"], [70, 5, 1, "", "NoRowsReturned"], [71, 5, 1, "", "NotFoundError"], [72, 5, 1, "", "PanicException"], [73, 5, 1, "", "RowsException"], [74, 5, 1, "", "SchemaError"], [75, 5, 1, "", "ShapeError"], [76, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[85, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[209, 1, 1, "", "agg"], [210, 1, 1, "", "agg_list"], [211, 1, 1, "", "apply"], [212, 1, 1, "", "count"], [213, 1, 1, "", "first"], [214, 1, 1, "", "head"], [215, 1, 1, "", "last"], [216, 1, 1, "", "max"], [217, 1, 1, "", "mean"], [218, 1, 1, "", "median"], [219, 1, 1, "", "min"], [220, 1, 1, "", "n_unique"], [221, 1, 1, "", "pivot"], [222, 1, 1, "", "quantile"], [223, 1, 1, "", "sum"], [224, 1, 1, "", "tail"]], "polars.internals.dataframe.pivot.PivotOps": [[225, 1, 1, "", "count"], [226, 1, 1, "", "first"], [227, 1, 1, "", "last"], [228, 1, 1, "", "max"], [229, 1, 1, "", "mean"], [230, 1, 1, "", "median"], [231, 1, 1, "", "min"], [232, 1, 1, "", "sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[606, 1, 1, "", "agg"], [607, 1, 1, "", "apply"], [608, 1, 1, "", "head"], [609, 1, 1, "", "tail"]], "polars.testing": [[106, 4, 1, "", "assert_frame_equal"], [107, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[108, 0, 1, "", "column"], [109, 4, 1, "", "columns"], [110, 4, 1, "", "dataframes"], [111, 4, 1, "", "series"]], "polars.testing.parametric.column": [[108, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 128], "api": [1, 55, 56, 57, 58, 542], "provid": 1, "new": 1, "function": [1, 242, 532, 541], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872], "binari": [2, 527, 875], "boolean": [3, 528, 876], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 115], "load": [5, 115], "restore_default": 6, "save": [7, 115], "set_ascii_t": 8, "set_fmt_str_length": 9, "set_tbl_cell_align": 10, "set_tbl_col": 11, "set_tbl_column_data_type_inlin": 12, "set_tbl_dataframe_shape_below": 13, "set_tbl_format": 14, "set_tbl_hide_column_data_typ": 15, "set_tbl_hide_column_nam": 16, "set_tbl_hide_dataframe_shap": 17, "set_tbl_hide_dtype_separ": 18, "set_tbl_row": 19, "set_tbl_width_char": 20, "set_verbos": 21, "state": [22, 115], "datafram": [23, 24, 25, 26, 27, 28, 110, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 238], "write_avro": 23, "write_csv": 24, "write_ipc": 25, "write_json": [26, 605], "write_ndjson": 27, "write_parquet": 28, "datatyp": 29, "date": [30, 242, 496], "datetim": [31, 497], "durat": [32, 498], "float32": 33, "float64": 34, "int16": 35, "int32": 36, "int64": 37, "int8": 38, "list": [39, 379, 506], "null": 40, "object": 41, "sqlcontext": [42, 43, 44], "execut": 42, "queri": 43, "regist": 44, "stringcach": [45, 541], "struct": [46, 464, 465, 521, 538, 848, 849, 850, 851, 885], "time": [47, 242], "uint16": 48, "uint32": 49, "uint64": 50, "uint8": 51, "unknown": 52, "utf8": 53, "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "arg_wher": 59, "build_info": 60, "collect_al": 61, "concat": [62, 265, 437, 638, 821], "cut": 63, "date_rang": 64, "except": [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 243], "arrowerror": 65, "computeerror": 66, "duplicateerror": 67, "invalidoperationerror": 68, "nodataerror": 69, "norowsreturn": 70, "notfounderror": 71, "panicexcept": 72, "rowsexcept": 73, "schemaerror": 74, "shapeerror": 75, "toomanyrowsreturn": 76, "from_arrow": 77, "from_dict": [78, 79], "from_numpi": 80, "from_panda": 81, "from_record": 82, "get_dummi": 83, "get_idx_typ": 84, "intern": [85, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 606, 607, 608, 609], "batch": 85, "batchedcsvread": [85, 543], "next_batch": 85, "ones": 86, "read_avro": 87, "read_csv": 88, "read_csv_batch": 89, "read_delta": 90, "read_excel": 91, "read_ipc": 92, "read_ipc_schema": 93, "read_json": [94, 583], "read_ndjson": 95, "read_parquet": 96, "read_parquet_schema": 97, "read_sql": 98, "scan_csv": 99, "scan_delta": 100, "scan_d": 101, "scan_ipc": 102, "scan_ndjson": 103, "scan_parquet": 104, "show_vers": 105, "test": [106, 107, 108, 109, 110, 111, 888], "assert_frame_equ": 106, "assert_series_equ": 107, "parametr": [108, 109, 110, 111], "column": [108, 109, 120, 530, 549], "seri": [111, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 881], "threadpool_s": 112, "toggle_string_cach": 113, "zero": 114, "option": 115, "set": [115, 803], "unset": 115, "current": 115, "aggreg": [116, 244, 544, 616], "appli": [117, 211, 251, 483, 607, 622], "clear": [118, 546, 669], "clone": [119, 547, 673], "describ": [121, 681], "drop": [122, 552], "drop_in_plac": 123, "drop_nul": [124, 310, 553, 685], "dtype": [125, 554, 723], "estimated_s": [126, 725], "explod": [127, 349, 555, 730], "fill_nan": [129, 351, 557, 732], "fill_nul": [130, 352, 558, 733], "filter": [131, 353, 559, 734], "find_idx_by_nam": 132, "fold": [133, 502], "frame_equ": 134, "get_column": [135, 136], "glimps": 137, "groupbi": [138, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 237, 562, 606, 607, 608, 609, 612], "groupby_dynam": [139, 563], "groupby_rol": [140, 564], "hash_row": 141, "head": [142, 214, 271, 359, 505, 565, 608, 644, 740], "height": 143, "hstack": 144, "insert_at_idx": 145, "interpol": [146, 361, 567, 742], "is_dupl": [147, 363, 745], "is_empti": [148, 746], "is_uniqu": [149, 373, 758], "item": [150, 760], "join": [151, 272, 568, 645], "join_asof": [152, 569], "lazi": [153, 541, 571], "limit": [154, 378, 572, 763], "max": [155, 216, 228, 275, 385, 509, 574, 648, 695, 766], "mean": [156, 217, 229, 276, 386, 510, 575, 649, 696, 767], "median": [157, 218, 230, 387, 511, 576, 697, 768], "melt": [158, 577], "merge_sort": [159, 578], "min": [160, 219, 231, 277, 392, 512, 579, 650, 702, 769], "n_chunk": [161, 771], "n_uniqu": [162, 220, 394, 513, 772], "null_count": [163, 397, 777], "partition_bi": 164, "pearson_corr": [165, 514], "pipe": [166, 580], "pivot": [167, 221, 225, 226, 227, 228, 229, 230, 231, 232, 241], "product": [168, 402, 781], "quantil": [169, 222, 403, 515, 582, 782], "rechunk": [170, 405, 784], "renam": [171, 584, 786], "replac": [172, 450, 834], "replace_at_idx": 173, "revers": [174, 278, 409, 585, 651, 788], "row": [175, 176], "sampl": [177, 421, 800], "schema": [178, 586], "select": [179, 240, 518, 536, 587, 615, 883], "shape": [180, 806], "shift": [181, 279, 424, 588, 652, 807], "shift_and_fil": [182, 425, 589, 808], "shrink_to_fit": [183, 810], "slice": [184, 280, 432, 454, 591, 653, 816, 838], "sort": [185, 281, 433, 592, 654, 817], "std": [186, 436, 520, 593, 819], "sum": [187, 223, 232, 282, 467, 522, 594, 655, 852], "tail": [188, 224, 283, 468, 523, 595, 609, 656, 853], "take_everi": [189, 470, 596, 855], "to_arrow": [190, 859], "to_dict": [191, 192], "to_dummi": [193, 860], "to_numpi": [194, 863], "to_panda": [195, 864], "to_seri": 196, "to_struct": [197, 284, 657], "transpos": 198, "uniqu": [199, 285, 475, 597, 658, 867], "unnest": [200, 598], "unstack": 201, "upsampl": 202, "var": [203, 479, 524, 599, 870], "vstack": 204, "width": [205, 600], "with_column": [206, 207, 601, 602], "with_row_count": [208, 604], "agg": [209, 606], "agg_list": 210, "count": [212, 225, 300, 491], "first": [213, 226, 269, 354, 501, 560, 642], "last": [215, 227, 273, 376, 570, 646], "pivotop": [225, 226, 227, 228, 229, 230, 231, 232], "attribut": [233, 610, 874], "comput": [234, 531, 878], "descript": [235, 611, 879], "export": [236, 880], "miscellan": [239, 535, 541, 614, 882], "manipul": [240, 536, 615, 883], "data": 242, "type": 242, "numer": 242, "nest": 242, "other": 242, "expr": [245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480], "ab": [245, 617], "agg_group": 246, "alia": [247, 618], "all": [248, 481, 619], "ani": [249, 482, 620], "append": [250, 621], "arcco": [252, 623], "arccosh": [253, 624], "arcsin": [254, 625], "arcsinh": [255, 626], "arctan": [256, 627], "arctanh": [257, 628], "arg_max": [258, 263, 629, 636], "arg_min": [259, 264, 630, 637], "arg_sort": [260, 631], "arg_uniqu": [261, 633], "argsort": [262, 634], "arr": [263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658], "contain": [266, 287, 438, 639, 659, 822], "diff": [267, 307, 640, 682], "eval": [268, 641], "get": [270, 643], "length": [274, 446, 647, 830], "backward_fil": 286, "bin": [287, 288, 289, 290, 291, 659, 660, 661, 662, 663], "decod": [288, 440, 660, 824], "encod": [289, 441, 661, 825], "ends_with": [290, 442, 662, 826], "starts_with": [291, 458, 663, 842], "cast": [292, 664], "cat": [293, 665, 666], "set_ord": [293, 666], "ceil": [294, 667], "clip": [295, 670], "clip_max": [296, 671], "clip_min": [297, 672], "co": [298, 674], "cosh": [299, 675], "cumcount": 301, "cummax": [302, 676], "cummin": [303, 677], "cumprod": [304, 678], "cumsum": [305, 495, 679], "cumulative_ev": [306, 680], "dot": [308, 683], "drop_nan": [309, 684], "dt": [311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722], "cast_time_unit": [311, 687], "cast_time_zon": [312, 688], "dai": [313, 314, 689, 690], "epoch": [315, 691], "hour": [316, 317, 692, 693], "iso_year": [318, 694], "microsecond": [319, 320, 698, 699], "millisecond": [321, 322, 700, 701], "minut": [323, 324, 703, 704], "month": [325, 705], "nanosecond": [326, 327, 706, 707], "offset_bi": [328, 708], "ordinal_dai": [329, 709], "quarter": [330, 710], "round": [331, 420, 711, 799], "second": [332, 333, 712, 713], "strftime": [334, 714], "timestamp": [335, 715], "truncat": [336, 716], "tz_local": [337, 717], "week": [338, 718], "weekdai": [339, 719], "with_time_unit": [340, 720], "with_time_zon": [341, 721], "year": [342, 722], "entropi": [343, 724], "ewm_mean": [344, 726], "ewm_std": [345, 727], "ewm_var": [346, 728], "exclud": [347, 500], "exp": [348, 729], "extend_const": [350, 731], "flatten": 355, "floor": [356, 736], "forward_fil": 357, "hash": [358, 739], "inspect": [360, 566], "is_between": 362, "is_finit": [364, 747], "is_first": [365, 748], "is_in": [366, 750], "is_infinit": [367, 751], "is_nan": [368, 752], "is_not": 369, "is_not_nan": [370, 753], "is_not_nul": [371, 754], "is_nul": [372, 755], "keep_nam": 374, "kurtosi": [375, 761], "len": [377, 762], "log": [380, 764], "log10": [381, 765], "lower_bound": 382, "map": [383, 508, 573], "map_alia": 384, "meta": [388, 389, 390, 391, 534], "output_nam": 388, "pop": 389, "root_nam": 390, "undo_alias": 391, "mode": [393, 770], "nan_max": [395, 774], "nan_min": [396, 775], "over": 398, "pct_chang": [399, 778], "pow": 400, "prefix": 401, "rank": [404, 783], "reinterpret": [406, 785], "repeat_bi": 407, "reshap": [408, 787], "rolling_appli": [410, 789], "rolling_max": [411, 790], "rolling_mean": [412, 791], "rolling_median": [413, 792], "rolling_min": [414, 793], "rolling_quantil": [415, 794], "rolling_skew": [416, 795], "rolling_std": [417, 796], "rolling_sum": [418, 797], "rolling_var": [419, 798], "search_sort": [422, 801], "set_sort": [423, 805], "shrink_dtyp": [426, 809], "shuffl": [427, 811], "sign": [428, 812], "sin": [429, 813], "sinh": [430, 814], "skew": [431, 815], "sort_bi": 434, "sqrt": [435, 818], "str": [437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847], "count_match": [439, 823], "extract": [443, 827], "extract_al": [444, 828], "json_path_match": [445, 829], "ljust": [447, 831], "lstrip": [448, 832], "n_char": [449, 833], "replace_al": [451, 835], "rjust": [452, 836], "rstrip": [453, 837], "split": [455, 839], "split_exact": [456, 840], "splitn": [457, 841], "strip": [459, 843], "strptime": [460, 844], "to_lowercas": [461, 845], "to_uppercas": [462, 846], "zfill": [463, 847], "field": [464, 848, 849], "rename_field": [465, 850], "suffix": 466, "take": [469, 854], "tan": [471, 856], "tanh": [472, 857], "to_phys": [473, 865], "top_k": [474, 866], "unique_count": [476, 868], "upper_bound": 477, "value_count": [478, 869], "where": 480, "arang": 484, "argsort_bi": 485, "avg": 486, "coalesc": 487, "col": 488, "concat_list": 489, "concat_str": 490, "cov": 492, "cumfold": 493, "cumreduc": 494, "element": 499, "format": 503, "group": 504, "lit": 507, "reduc": 516, "repeat": 517, "spearman_rank_corr": 519, "when": 525, "arrai": [526, 873], "categori": [529, 877], "name": [530, 773], "express": 533, "string": [537, 884], "tempor": [539, 886], "window": 540, "convers": 541, "eager": 541, "parallel": 541, "refer": 542, "input": 543, "output": 543, "csv": 543, "feather": 543, "ipc": 543, "parquet": 543, "sql": [543, 887], "json": 543, "avro": 543, "excel": 543, "delta": 543, "lake": 543, "dataset": 543, "lazyfram": [545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 613], "cach": 545, "collect": 548, "describe_optimized_plan": 550, "describe_plan": 551, "fetch": 556, "from_json": 561, "profil": 581, "show_graph": 590, "with_context": 603, "lazygroupbi": [606, 607, 608, 609], "read": 614, "write": 614, "logic": 614, "plan": 614, "arg_tru": 632, "chunk_length": 668, "flag": 735, "get_chunk": 737, "has_valid": 738, "inner_dtyp": 741, "is_boolean": 743, "is_datelik": 744, "is_float": 749, "is_numer": 756, "is_sort": 757, "is_utf8": 759, "new_from_index": 776, "peak_max": 779, "peak_min": 780, "series_equ": 802, "set_at_idx": 804, "to_fram": [851, 861], "time_unit": 858, "to_list": 862, "view": 871, "zip_with": 872, "method": 887, "assert": 888, "properti": 888, "base": 888, "strategi": 888, "helper": 888, "util": 889}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.scan_delta": [[100, "polars-scan-delta"]], "polars.DataFrame.filter": [[131, "polars-dataframe-filter"]], "polars.ones": [[86, "polars-ones"]], "polars.read_excel": [[91, "polars-read-excel"]], "polars.scan_ds": [[101, "polars-scan-ds"]], "polars.DataFrame.cleared": [[118, "polars-dataframe-cleared"]], "polars.DataFrame.dtypes": [[125, "polars-dataframe-dtypes"]], "polars.toggle_string_cache": [[113, "polars-toggle-string-cache"]], "polars.threadpool_size": [[112, "polars-threadpool-size"]], "polars.testing.assert_series_equal": [[107, "polars-testing-assert-series-equal"]], "polars.exceptions.SchemaError": [[74, "polars-exceptions-schemaerror"]], "Config": [[115, "config"]], "Config options (set/unset)": [[115, "config-options-set-unset"]], "Config load, save, and current state": [[115, "config-load-save-and-current-state"]], "polars.scan_ipc": [[102, "polars-scan-ipc"]], "polars.from_arrow": [[77, "polars-from-arrow"]], "polars.read_ipc": [[92, "polars-read-ipc"]], "polars.DataFrame.describe": [[121, "polars-dataframe-describe"]], "polars.DataFrame.drop_in_place": [[123, "polars-dataframe-drop-in-place"]], "polars.exceptions.ComputeError": [[66, "polars-exceptions-computeerror"]], "polars.DataFrame.columns": [[120, "polars-dataframe-columns"]], "polars.testing.parametric.dataframes": [[110, "polars-testing-parametric-dataframes"]], "polars.from_pandas": [[81, "polars-from-pandas"]], "polars.scan_parquet": [[104, "polars-scan-parquet"]], "polars.testing.parametric.column": [[108, "polars-testing-parametric-column"]], "polars.get_dummies": [[83, "polars-get-dummies"]], "polars.testing.assert_frame_equal": [[106, "polars-testing-assert-frame-equal"]], "polars.exceptions.TooManyRowsReturned": [[76, "polars-exceptions-toomanyrowsreturned"]], "polars.DataFrame.explode": [[127, "polars-dataframe-explode"]], "polars.read_delta": [[90, "polars-read-delta"]], "polars.from_dict": [[78, "polars-from-dict"]], "polars.read_ipc_schema": [[93, "polars-read-ipc-schema"]], "polars.read_sql": [[98, "polars-read-sql"]], "polars.get_idx_type": [[84, "polars-get-idx-type"]], "polars.DataFrame.fill_nan": [[129, "polars-dataframe-fill-nan"]], "polars.from_dicts": [[79, "polars-from-dicts"]], "polars.DataFrame.estimated_size": [[126, "polars-dataframe-estimated-size"]], "polars.DataFrame.drop_nulls": [[124, "polars-dataframe-drop-nulls"]], "Aggregation": [[116, "aggregation"], [616, "aggregation"], [544, "aggregation"], [244, "aggregation"]], "polars.testing.parametric.series": [[111, "polars-testing-parametric-series"]], "polars.read_ndjson": [[95, "polars-read-ndjson"]], "polars.read_parquet_schema": [[97, "polars-read-parquet-schema"]], "polars.exceptions.NoDataError": [[69, "polars-exceptions-nodataerror"]], "polars.scan_csv": [[99, "polars-scan-csv"]], "polars.exceptions.PanicException": [[72, "polars-exceptions-panicexception"]], "polars.read_csv_batched": [[89, "polars-read-csv-batched"]], "polars.testing.parametric.columns": [[109, "polars-testing-parametric-columns"]], "polars.exceptions.InvalidOperationError": [[68, "polars-exceptions-invalidoperationerror"]], "polars.DataFrame.apply": [[117, "polars-dataframe-apply"]], "polars.from_records": [[82, "polars-from-records"]], "polars.exceptions.RowsException": [[73, "polars-exceptions-rowsexception"]], "polars.exceptions.ShapeError": [[75, "polars-exceptions-shapeerror"]], "polars.scan_ndjson": [[103, "polars-scan-ndjson"]], "polars.exceptions.NotFoundError": [[71, "polars-exceptions-notfounderror"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[85, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.exceptions.DuplicateError": [[67, "polars-exceptions-duplicateerror"]], "polars.read_avro": [[87, "polars-read-avro"]], "polars.read_parquet": [[96, "polars-read-parquet"]], "polars.show_versions": [[105, "polars-show-versions"]], "polars.read_csv": [[88, "polars-read-csv"]], "polars.DataFrame.clone": [[119, "polars-dataframe-clone"]], "polars.DataFrame.extend": [[128, "polars-dataframe-extend"]], "polars.DataFrame.fill_null": [[130, "polars-dataframe-fill-null"]], "polars.zeros": [[114, "polars-zeros"]], "polars.from_numpy": [[80, "polars-from-numpy"]], "polars.DataFrame.drop": [[122, "polars-dataframe-drop"]], "polars.read_json": [[94, "polars-read-json"]], "polars.exceptions.NoRowsReturned": [[70, "polars-exceptions-norowsreturned"]], "polars.arg_where": [[59, "polars-arg-where"]], "polars.Int64": [[37, "polars-int64"]], "polars.build_info": [[60, "polars-build-info"]], "polars.concat": [[62, "polars-concat"]], "polars.Config.set_tbl_hide_dataframe_shape": [[17, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.DataType": [[29, "polars-datatype"]], "polars.Time": [[47, "polars-time"]], "polars.DataFrame.write_parquet": [[28, "polars-dataframe-write-parquet"]], "polars.Config.set_tbl_dataframe_shape_below": [[13, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Float64": [[34, "polars-float64"]], "polars.Config.set_verbose": [[21, "polars-config-set-verbose"]], "polars.Datetime": [[31, "polars-datetime"]], "polars.SQLContext.execute": [[42, "polars-sqlcontext-execute"]], "polars.Null": [[40, "polars-null"]], "polars.StringCache": [[45, "polars-stringcache"]], "polars.cut": [[63, "polars-cut"]], "polars.DataFrame.write_ipc": [[25, "polars-dataframe-write-ipc"]], "polars.Config.set_tbl_hide_column_data_types": [[15, "polars-config-set-tbl-hide-column-data-types"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.date_range": [[64, "polars-date-range"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.Config.set_tbl_cols": [[11, "polars-config-set-tbl-cols"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.set_tbl_hide_column_names": [[16, "polars-config-set-tbl-hide-column-names"]], "polars.UInt64": [[50, "polars-uint64"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Int8": [[38, "polars-int8"]], "polars.Unknown": [[52, "polars-unknown"]], "polars.SQLContext.query": [[43, "polars-sqlcontext-query"]], "polars.collect_all": [[61, "polars-collect-all"]], "polars.DataFrame.write_ndjson": [[27, "polars-dataframe-write-ndjson"]], "polars.Struct": [[46, "polars-struct"]], "polars.Config.set_tbl_formatting": [[14, "polars-config-set-tbl-formatting"]], "polars.Binary": [[2, "polars-binary"]], "polars.DataFrame.write_csv": [[24, "polars-dataframe-write-csv"]], "polars.Int16": [[35, "polars-int16"]], "polars.Utf8": [[53, "polars-utf8"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.Object": [[41, "polars-object"]], "polars.Date": [[30, "polars-date"]], "polars.Int32": [[36, "polars-int32"]], "polars.Float32": [[33, "polars-float32"]], "polars.UInt16": [[48, "polars-uint16"]], "polars.Config.set_tbl_column_data_type_inline": [[12, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.UInt8": [[51, "polars-uint8"]], "polars.DataFrame.write_json": [[26, "polars-dataframe-write-json"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.exceptions.ArrowError": [[65, "polars-exceptions-arrowerror"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.UInt32": [[49, "polars-uint32"]], "polars.Config.set_fmt_str_lengths": [[9, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_tbl_hide_dtype_separator": [[18, "polars-config-set-tbl-hide-dtype-separator"]], "polars.DataFrame.write_avro": [[23, "polars-dataframe-write-avro"]], "polars.Config.set_tbl_cell_alignment": [[10, "polars-config-set-tbl-cell-alignment"]], "polars.List": [[39, "polars-list"]], "polars.Config.set_tbl_width_chars": [[20, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_rows": [[19, "polars-config-set-tbl-rows"]], "polars.SQLContext.register": [[44, "polars-sqlcontext-register"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Config.save": [[7, "polars-config-save"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.Duration": [[32, "polars-duration"]], "polars.Config.state": [[22, "polars-config-state"]], "polars.Series.round": [[799, "polars-series-round"]], "polars.Series.sinh": [[814, "polars-series-sinh"]], "polars.Series.str.replace": [[834, "polars-series-str-replace"]], "polars.Series.series_equal": [[802, "polars-series-series-equal"]], "polars.Series.str.to_uppercase": [[846, "polars-series-str-to-uppercase"]], "polars.Series.shift": [[807, "polars-series-shift"]], "polars.Series.rolling_min": [[793, "polars-series-rolling-min"]], "polars.Series.str.lstrip": [[832, "polars-series-str-lstrip"]], "polars.Series.str.strip": [[843, "polars-series-str-strip"]], "polars.Series.rolling_skew": [[795, "polars-series-rolling-skew"]], "polars.Series.str.extract_all": [[828, "polars-series-str-extract-all"]], "polars.Series.str.zfill": [[847, "polars-series-str-zfill"]], "polars.Series.shuffle": [[811, "polars-series-shuffle"]], "polars.Series.str.contains": [[822, "polars-series-str-contains"]], "polars.Series.set": [[803, "polars-series-set"]], "polars.Series.tanh": [[857, "polars-series-tanh"]], "polars.Series.str.strptime": [[844, "polars-series-str-strptime"]], "polars.Series.take_every": [[855, "polars-series-take-every"]], "polars.Series.str.count_match": [[823, "polars-series-str-count-match"]], "polars.Series.str.ends_with": [[826, "polars-series-str-ends-with"]], "polars.Series.shrink_dtype": [[809, "polars-series-shrink-dtype"]], "polars.Series.str.starts_with": [[842, "polars-series-str-starts-with"]], "polars.Series.rolling_var": [[798, "polars-series-rolling-var"]], "polars.Series.sort": [[817, "polars-series-sort"]], "polars.Series.struct.to_frame": [[851, "polars-series-struct-to-frame"]], "polars.Series.sin": [[813, "polars-series-sin"]], "polars.Series.tail": [[853, "polars-series-tail"]], "polars.Series.struct.fields": [[849, "polars-series-struct-fields"]], "polars.Series.search_sorted": [[801, "polars-series-search-sorted"]], "polars.Series.str.rstrip": [[837, "polars-series-str-rstrip"]], "polars.Series.str.ljust": [[831, "polars-series-str-ljust"]], "polars.Series.take": [[854, "polars-series-take"]], "polars.Series.str.json_path_match": [[829, "polars-series-str-json-path-match"]], "polars.Series.str.split": [[839, "polars-series-str-split"]], "polars.Series.str.n_chars": [[833, "polars-series-str-n-chars"]], "polars.Series.rolling_std": [[796, "polars-series-rolling-std"]], "polars.Series.str.split_exact": [[840, "polars-series-str-split-exact"]], "polars.Series.sample": [[800, "polars-series-sample"]], "polars.Series.str.extract": [[827, "polars-series-str-extract"]], "polars.Series.str.splitn": [[841, "polars-series-str-splitn"]], "polars.Series.shape": [[806, "polars-series-shape"]], "polars.Series.str.lengths": [[830, "polars-series-str-lengths"]], "polars.Series.skew": [[815, "polars-series-skew"]], "polars.Series.str.decode": [[824, "polars-series-str-decode"]], "polars.Series.str.to_lowercase": [[845, "polars-series-str-to-lowercase"]], "polars.Series.str.concat": [[821, "polars-series-str-concat"]], "polars.Series.slice": [[816, "polars-series-slice"]], "polars.Series.struct.field": [[848, "polars-series-struct-field"]], "polars.Series.sum": [[852, "polars-series-sum"]], "polars.Series.shift_and_fill": [[808, "polars-series-shift-and-fill"]], "polars.Series.sqrt": [[818, "polars-series-sqrt"]], "polars.Series.rolling_median": [[792, "polars-series-rolling-median"]], "polars.Series.sign": [[812, "polars-series-sign"]], "polars.Series.str.replace_all": [[835, "polars-series-str-replace-all"]], "polars.Series.set_sorted": [[805, "polars-series-set-sorted"]], "polars.Series.struct.rename_fields": [[850, "polars-series-struct-rename-fields"]], "polars.Series.tan": [[856, "polars-series-tan"]], "polars.Series.str.rjust": [[836, "polars-series-str-rjust"]], "polars.Series.rolling_quantile": [[794, "polars-series-rolling-quantile"]], "polars.Series.set_at_idx": [[804, "polars-series-set-at-idx"]], "polars.Series.str.slice": [[838, "polars-series-str-slice"]], "polars.Series.str": [[820, "polars-series-str"]], "polars.Series.shrink_to_fit": [[810, "polars-series-shrink-to-fit"]], "polars.Series.str.encode": [[825, "polars-series-str-encode"]], "polars.Series.std": [[819, "polars-series-std"]], "polars.Series.rolling_sum": [[797, "polars-series-rolling-sum"]], "polars.Series.interpolate": [[742, "polars-series-interpolate"]], "polars.Series.median": [[768, "polars-series-median"]], "polars.Series.is_finite": [[747, "polars-series-is-finite"]], "polars.Series.is_infinite": [[751, "polars-series-is-infinite"]], "polars.Series.is_in": [[750, "polars-series-is-in"]], "polars.Series.is_sorted": [[757, "polars-series-is-sorted"]], "polars.Series.ewm_var": [[728, "polars-series-ewm-var"]], "polars.Series.n_unique": [[772, "polars-series-n-unique"]], "polars.Series.peak_min": [[780, "polars-series-peak-min"]], "polars.Series.explode": [[730, "polars-series-explode"]], "polars.Series.reshape": [[787, "polars-series-reshape"]], "polars.Series.is_empty": [[746, "polars-series-is-empty"]], "polars.Series.ewm_std": [[727, "polars-series-ewm-std"]], "polars.Series.is_first": [[748, "polars-series-is-first"]], "polars.Series.is_not_null": [[754, "polars-series-is-not-null"]], "polars.Series.max": [[766, "polars-series-max"]], "polars.Series.is_unique": [[758, "polars-series-is-unique"]], "polars.Series.exp": [[729, "polars-series-exp"]], "polars.Series.flags": [[735, "polars-series-flags"]], "polars.Series.is_utf8": [[759, "polars-series-is-utf8"]], "polars.Series.name": [[773, "polars-series-name"]], "polars.Series.pct_change": [[778, "polars-series-pct-change"]], "polars.Series.is_float": [[749, "polars-series-is-float"]], "polars.Series.filter": [[734, "polars-series-filter"]], "polars.Series.is_nan": [[752, "polars-series-is-nan"]], "polars.Series.is_null": [[755, "polars-series-is-null"]], "polars.Series.extend_constant": [[731, "polars-series-extend-constant"]], "polars.Series.is_boolean": [[743, "polars-series-is-boolean"]], "polars.Series.inner_dtype": [[741, "polars-series-inner-dtype"]], "polars.Series.new_from_index": [[776, "polars-series-new-from-index"]], "polars.Series.is_datelike": [[744, "polars-series-is-datelike"]], "polars.Series.limit": [[763, "polars-series-limit"]], "polars.Series.reinterpret": [[785, "polars-series-reinterpret"]], "polars.Series.kurtosis": [[761, "polars-series-kurtosis"]], "polars.Series.mode": [[770, "polars-series-mode"]], "polars.Series.rename": [[786, "polars-series-rename"]], "polars.Series.rolling_apply": [[789, "polars-series-rolling-apply"]], "polars.Series.rolling_max": [[790, "polars-series-rolling-max"]], "polars.Series.floor": [[736, "polars-series-floor"]], "polars.Series.peak_max": [[779, "polars-series-peak-max"]], "polars.Series.is_not_nan": [[753, "polars-series-is-not-nan"]], "polars.Series.mean": [[767, "polars-series-mean"]], "polars.Series.head": [[740, "polars-series-head"]], "polars.Series.len": [[762, "polars-series-len"]], "polars.Series.n_chunks": [[771, "polars-series-n-chunks"]], "polars.Series.product": [[781, "polars-series-product"]], "polars.Series.rechunk": [[784, "polars-series-rechunk"]], "polars.Series.rolling_mean": [[791, "polars-series-rolling-mean"]], "polars.Series.min": [[769, "polars-series-min"]], "polars.Series.ewm_mean": [[726, "polars-series-ewm-mean"]], "polars.Series.log10": [[765, "polars-series-log10"]], "polars.Series.nan_min": [[775, "polars-series-nan-min"]], "polars.Series.is_numeric": [[756, "polars-series-is-numeric"]], "polars.Series.get_chunks": [[737, "polars-series-get-chunks"]], "polars.Series.is_duplicated": [[745, "polars-series-is-duplicated"]], "polars.Series.null_count": [[777, "polars-series-null-count"]], "polars.Series.fill_null": [[733, "polars-series-fill-null"]], "polars.Series.nan_max": [[774, "polars-series-nan-max"]], "polars.Series.rank": [[783, "polars-series-rank"]], "polars.Series.has_validity": [[738, "polars-series-has-validity"]], "polars.Series.quantile": [[782, "polars-series-quantile"]], "polars.Series.item": [[760, "polars-series-item"]], "polars.Series.log": [[764, "polars-series-log"]], "polars.Series.fill_nan": [[732, "polars-series-fill-nan"]], "polars.Series.reverse": [[788, "polars-series-reverse"]], "polars.Series.hash": [[739, "polars-series-hash"]], "polars.Series.dt": [[686, "polars-series-dt"]], "polars.Series.dt.epoch": [[691, "polars-series-dt-epoch"]], "polars.Series.clip": [[670, "polars-series-clip"]], "polars.Series.dt.cast_time_zone": [[688, "polars-series-dt-cast-time-zone"]], "polars.Series.describe": [[681, "polars-series-describe"]], "polars.Series.dt.tz_localize": [[717, "polars-series-dt-tz-localize"]], "polars.Series.drop_nulls": [[685, "polars-series-drop-nulls"]], "polars.Series.dt.strftime": [[714, "polars-series-dt-strftime"]], "polars.Series.bin.encode": [[661, "polars-series-bin-encode"]], "polars.Series.cat": [[665, "polars-series-cat"]], "polars.Series.bin.ends_with": [[662, "polars-series-bin-ends-with"]], "polars.Series.cosh": [[675, "polars-series-cosh"]], "polars.Series.dt.timestamp": [[715, "polars-series-dt-timestamp"]], "polars.Series.dt.cast_time_unit": [[687, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.week": [[718, "polars-series-dt-week"]], "polars.Series.bin.starts_with": [[663, "polars-series-bin-starts-with"]], "polars.Series.cummax": [[676, "polars-series-cummax"]], "polars.Series.dt.ordinal_day": [[709, "polars-series-dt-ordinal-day"]], "polars.Series.dt.quarter": [[710, "polars-series-dt-quarter"]], "polars.Series.chunk_lengths": [[668, "polars-series-chunk-lengths"]], "polars.Series.dt.milliseconds": [[701, "polars-series-dt-milliseconds"]], "polars.Series.dt.second": [[712, "polars-series-dt-second"]], "polars.Series.dtype": [[723, "polars-series-dtype"]], "polars.Series.dt.iso_year": [[694, "polars-series-dt-iso-year"]], "polars.Series.clip_max": [[671, "polars-series-clip-max"]], "polars.Series.dot": [[683, "polars-series-dot"]], "polars.Series.entropy": [[724, "polars-series-entropy"]], "polars.Series.dt.with_time_unit": [[720, "polars-series-dt-with-time-unit"]], "polars.Series.dt.nanosecond": [[706, "polars-series-dt-nanosecond"]], "polars.Series.bin.decode": [[660, "polars-series-bin-decode"]], "polars.Series.ceil": [[667, "polars-series-ceil"]], "polars.Series.dt.hours": [[693, "polars-series-dt-hours"]], "polars.Series.dt.max": [[695, "polars-series-dt-max"]], "polars.Series.dt.round": [[711, "polars-series-dt-round"]], "polars.Series.dt.millisecond": [[700, "polars-series-dt-millisecond"]], "polars.Series.cumsum": [[679, "polars-series-cumsum"]], "polars.Series.cumprod": [[678, "polars-series-cumprod"]], "polars.Series.cat.set_ordering": [[666, "polars-series-cat-set-ordering"]], "polars.Series.dt.hour": [[692, "polars-series-dt-hour"]], "polars.Series.dt.min": [[702, "polars-series-dt-min"]], "polars.Series.dt.minute": [[703, "polars-series-dt-minute"]], "polars.Series.dt.mean": [[696, "polars-series-dt-mean"]], "polars.Series.dt.month": [[705, "polars-series-dt-month"]], "polars.Series.dt.weekday": [[719, "polars-series-dt-weekday"]], "polars.Series.dt.year": [[722, "polars-series-dt-year"]], "polars.Series.drop_nans": [[684, "polars-series-drop-nans"]], "polars.Series.cummin": [[677, "polars-series-cummin"]], "polars.Series.dt.day": [[689, "polars-series-dt-day"]], "polars.Series.dt.median": [[697, "polars-series-dt-median"]], "polars.Series.dt.microsecond": [[698, "polars-series-dt-microsecond"]], "polars.Series.dt.minutes": [[704, "polars-series-dt-minutes"]], "polars.Series.cast": [[664, "polars-series-cast"]], "polars.Series.dt.seconds": [[713, "polars-series-dt-seconds"]], "polars.Series.clone": [[673, "polars-series-clone"]], "polars.Series.dt.microseconds": [[699, "polars-series-dt-microseconds"]], "polars.Series.clip_min": [[672, "polars-series-clip-min"]], "polars.Series.diff": [[682, "polars-series-diff"]], "polars.Series.dt.truncate": [[716, "polars-series-dt-truncate"]], "polars.Series.dt.offset_by": [[708, "polars-series-dt-offset-by"]], "polars.Series.cumulative_eval": [[680, "polars-series-cumulative-eval"]], "polars.Series.dt.with_time_zone": [[721, "polars-series-dt-with-time-zone"]], "polars.Series.dt.nanoseconds": [[707, "polars-series-dt-nanoseconds"]], "polars.Series.dt.days": [[690, "polars-series-dt-days"]], "polars.Series.cleared": [[669, "polars-series-cleared"]], "polars.Series.estimated_size": [[725, "polars-series-estimated-size"]], "polars.Series.cos": [[674, "polars-series-cos"]], "polars.Series.view": [[871, "polars-series-view"]], "Utils": [[889, "utils"]], "polars.Series.top_k": [[866, "polars-series-top-k"]], "Strings": [[884, "strings"], [537, "strings"]], "Descriptive": [[879, "descriptive"], [611, "descriptive"], [235, "descriptive"]], "polars.Series.to_pandas": [[864, "polars-series-to-pandas"]], "polars.Series.value_counts": [[869, "polars-series-value-counts"]], "Miscellaneous": [[882, "miscellaneous"], [614, "miscellaneous"], [541, "miscellaneous"], [535, "miscellaneous"], [239, "miscellaneous"]], "polars.Series.var": [[870, "polars-series-var"]], "Attributes": [[874, "attributes"], [610, "attributes"], [233, "attributes"]], "polars.Series.to_physical": [[865, "polars-series-to-physical"]], "Testing": [[888, "testing"]], "Asserts": [[888, "asserts"]], "Property-based testing": [[888, "property-based-testing"]], "Strategies": [[888, "strategies"]], "Strategy helpers": [[888, "strategy-helpers"]], "Series": [[881, "series"]], "polars.Series.time_unit": [[858, "polars-series-time-unit"]], "Array": [[873, "array"], [526, "array"]], "polars.Series.zip_with": [[872, "polars-series-zip-with"]], "Computation": [[878, "computation"], [531, "computation"], [234, "computation"]], "Temporal": [[886, "temporal"], [539, "temporal"]], "Boolean": [[876, "boolean"], [528, "boolean"]], "polars.Series.to_arrow": [[859, "polars-series-to-arrow"]], "polars.Series.to_dummies": [[860, "polars-series-to-dummies"]], "Manipulation/selection": [[883, "manipulation-selection"], [615, "manipulation-selection"], [536, "manipulation-selection"], [240, "manipulation-selection"]], "Struct": [[885, "struct"], [538, "struct"]], "Export": [[880, "export"], [236, "export"]], "Binary": [[875, "binary"], [527, "binary"]], "polars.Series.to_list": [[862, "polars-series-to-list"]], "SQL": [[887, "sql"], [543, "sql"]], "Methods": [[887, "methods"]], "Categories": [[877, "categories"], [529, "categories"]], "polars.Series.unique": [[867, "polars-series-unique"]], "polars.Series.unique_counts": [[868, "polars-series-unique-counts"]], "polars.Series.to_numpy": [[863, "polars-series-to-numpy"]], "polars.Series.to_frame": [[861, "polars-series-to-frame"]], "polars.Series.append": [[621, "polars-series-append"]], "polars.Series.arr.reverse": [[651, "polars-series-arr-reverse"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[608, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.argsort": [[634, "polars-series-argsort"]], "polars.Series.arr.min": [[650, "polars-series-arr-min"]], "polars.Series.arr.sum": [[655, "polars-series-arr-sum"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[609, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arr.shift": [[652, "polars-series-arr-shift"]], "polars.Series.arg_max": [[629, "polars-series-arg-max"]], "polars.Series.arr.mean": [[649, "polars-series-arr-mean"]], "polars.Series.apply": [[622, "polars-series-apply"]], "polars.LazyFrame.with_columns": [[602, "polars-lazyframe-with-columns"]], "polars.Series.arccosh": [[624, "polars-series-arccosh"]], "polars.Series.arr.head": [[644, "polars-series-arr-head"]], "polars.Series.arr.last": [[646, "polars-series-arr-last"]], "polars.Series.arr.lengths": [[647, "polars-series-arr-lengths"]], "GroupBy": [[612, "groupby"], [237, "groupby"]], "polars.Series.arr.unique": [[658, "polars-series-arr-unique"]], "polars.LazyFrame.with_column": [[601, "polars-lazyframe-with-column"]], "polars.Series.arctanh": [[628, "polars-series-arctanh"]], "polars.LazyFrame.width": [[600, "polars-lazyframe-width"]], "polars.LazyFrame.sum": [[594, "polars-lazyframe-sum"]], "polars.Series.alias": [[618, "polars-series-alias"]], "polars.Series.arr.concat": [[638, "polars-series-arr-concat"]], "polars.Series.arr.slice": [[653, "polars-series-arr-slice"]], "polars.Series.abs": [[617, "polars-series-abs"]], "polars.LazyFrame.take_every": [[596, "polars-lazyframe-take-every"]], "polars.LazyFrame.tail": [[595, "polars-lazyframe-tail"]], "polars.Series.arr.diff": [[640, "polars-series-arr-diff"]], "polars.LazyFrame.unique": [[597, "polars-lazyframe-unique"]], "Read/write logical plan": [[614, "read-write-logical-plan"]], "polars.Series.arr.contains": [[639, "polars-series-arr-contains"]], "polars.Series.arr.tail": [[656, "polars-series-arr-tail"]], "polars.Series.arg_min": [[630, "polars-series-arg-min"]], "polars.LazyFrame.with_row_count": [[604, "polars-lazyframe-with-row-count"]], "LazyFrame": [[613, "lazyframe"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[606, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.arctan": [[627, "polars-series-arctan"]], "polars.Series.arr": [[635, "polars-series-arr"]], "polars.LazyFrame.write_json": [[605, "polars-lazyframe-write-json"]], "polars.Series.arr.first": [[642, "polars-series-arr-first"]], "polars.Series.arr.join": [[645, "polars-series-arr-join"]], "polars.Series.arr.get": [[643, "polars-series-arr-get"]], "polars.Series.arr.max": [[648, "polars-series-arr-max"]], "polars.Series.arr.arg_max": [[636, "polars-series-arr-arg-max"]], "polars.Series.arr.sort": [[654, "polars-series-arr-sort"]], "polars.Series.any": [[620, "polars-series-any"]], "polars.LazyFrame.with_context": [[603, "polars-lazyframe-with-context"]], "polars.Series.arccos": [[623, "polars-series-arccos"]], "polars.Series.all": [[619, "polars-series-all"]], "polars.Series.arr.eval": [[641, "polars-series-arr-eval"]], "polars.Series.arr.arg_min": [[637, "polars-series-arr-arg-min"]], "polars.Series.arg_sort": [[631, "polars-series-arg-sort"]], "polars.LazyFrame.var": [[599, "polars-lazyframe-var"]], "polars.Series.arcsinh": [[626, "polars-series-arcsinh"]], "polars.Series.arg_true": [[632, "polars-series-arg-true"]], "polars.Series.arr.to_struct": [[657, "polars-series-arr-to-struct"]], "polars.Series.arg_unique": [[633, "polars-series-arg-unique"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[607, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.bin.contains": [[659, "polars-series-bin-contains"]], "polars.Series.arcsin": [[625, "polars-series-arcsin"]], "polars.LazyFrame.unnest": [[598, "polars-lazyframe-unnest"]], "polars.first": [[501, "polars-first"]], "polars.map": [[508, "polars-map"]], "polars.Expr.where": [[480, "polars-expr-where"]], "polars.any": [[482, "polars-any"]], "polars.argsort_by": [[485, "polars-argsort-by"]], "polars.Expr.struct.field": [[464, "polars-expr-struct-field"]], "polars.Expr.str.zfill": [[463, "polars-expr-str-zfill"]], "polars.apply": [[483, "polars-apply"]], "polars.Expr.upper_bound": [[477, "polars-expr-upper-bound"]], "polars.duration": [[498, "polars-duration"]], "polars.format": [[503, "polars-format"]], "polars.Expr.to_physical": [[473, "polars-expr-to-physical"]], "polars.Expr.suffix": [[466, "polars-expr-suffix"]], "polars.col": [[488, "polars-col"]], "polars.concat_str": [[490, "polars-concat-str"]], "polars.exclude": [[500, "polars-exclude"]], "polars.max": [[509, "polars-max"]], "polars.head": [[505, "polars-head"]], "polars.Expr.sum": [[467, "polars-expr-sum"]], "polars.pearson_corr": [[514, "polars-pearson-corr"]], "polars.reduce": [[516, "polars-reduce"]], "polars.var": [[524, "polars-var"]], "polars.avg": [[486, "polars-avg"]], "polars.Expr.unique_counts": [[476, "polars-expr-unique-counts"]], "polars.mean": [[510, "polars-mean"]], "polars.all": [[481, "polars-all"]], "polars.lit": [[507, "polars-lit"]], "polars.list": [[506, "polars-list"]], "polars.tail": [[523, "polars-tail"]], "polars.cumsum": [[495, "polars-cumsum"]], "polars.date": [[496, "polars-date"]], "polars.fold": [[502, "polars-fold"]], "polars.Expr.var": [[479, "polars-expr-var"]], "polars.Expr.str.to_uppercase": [[462, "polars-expr-str-to-uppercase"]], "polars.min": [[512, "polars-min"]], "polars.quantile": [[515, "polars-quantile"]], "polars.median": [[511, "polars-median"]], "polars.spearman_rank_corr": [[519, "polars-spearman-rank-corr"]], "polars.element": [[499, "polars-element"]], "polars.n_unique": [[513, "polars-n-unique"]], "polars.repeat": [[517, "polars-repeat"]], "polars.groups": [[504, "polars-groups"]], "polars.arange": [[484, "polars-arange"]], "polars.cumfold": [[493, "polars-cumfold"]], "polars.datetime": [[497, "polars-datetime"]], "polars.struct": [[521, "polars-struct"]], "polars.concat_list": [[489, "polars-concat-list"]], "polars.Expr.take": [[469, "polars-expr-take"]], "polars.sum": [[522, "polars-sum"]], "polars.Expr.top_k": [[474, "polars-expr-top-k"]], "polars.Expr.struct.rename_fields": [[465, "polars-expr-struct-rename-fields"]], "polars.Expr.unique": [[475, "polars-expr-unique"]], "polars.Expr.tail": [[468, "polars-expr-tail"]], "polars.select": [[518, "polars-select"]], "polars.Expr.value_counts": [[478, "polars-expr-value-counts"]], "polars.count": [[491, "polars-count"]], "polars.coalesce": [[487, "polars-coalesce"]], "polars.Expr.tanh": [[472, "polars-expr-tanh"]], "polars.cumreduce": [[494, "polars-cumreduce"]], "polars.Expr.tan": [[471, "polars-expr-tan"]], "polars.cov": [[492, "polars-cov"]], "polars.std": [[520, "polars-std"]], "polars.when": [[525, "polars-when"]], "polars.Expr.take_every": [[470, "polars-expr-take-every"]], "polars.Expr.str.concat": [[437, "polars-expr-str-concat"]], "polars.Expr.rolling_min": [[414, "polars-expr-rolling-min"]], "polars.Expr.str.json_path_match": [[445, "polars-expr-str-json-path-match"]], "polars.Expr.str.strptime": [[460, "polars-expr-str-strptime"]], "polars.Expr.rolling_var": [[419, "polars-expr-rolling-var"]], "polars.Expr.str.to_lowercase": [[461, "polars-expr-str-to-lowercase"]], "polars.Expr.str.split": [[455, "polars-expr-str-split"]], "polars.Expr.str.ljust": [[447, "polars-expr-str-ljust"]], "polars.Expr.rolling_apply": [[410, "polars-expr-rolling-apply"]], "polars.Expr.rolling_median": [[413, "polars-expr-rolling-median"]], "polars.Expr.shift_and_fill": [[425, "polars-expr-shift-and-fill"]], "polars.Expr.rolling_skew": [[416, "polars-expr-rolling-skew"]], "polars.Expr.reinterpret": [[406, "polars-expr-reinterpret"]], "polars.Expr.str.extract": [[443, "polars-expr-str-extract"]], "polars.Expr.str.count_match": [[439, "polars-expr-str-count-match"]], "polars.Expr.rolling_std": [[417, "polars-expr-rolling-std"]], "polars.Expr.quantile": [[403, "polars-expr-quantile"]], "polars.Expr.rolling_quantile": [[415, "polars-expr-rolling-quantile"]], "polars.Expr.str.rstrip": [[453, "polars-expr-str-rstrip"]], "polars.Expr.str.rjust": [[452, "polars-expr-str-rjust"]], "polars.Expr.sinh": [[430, "polars-expr-sinh"]], "polars.Expr.shuffle": [[427, "polars-expr-shuffle"]], "polars.Expr.str.splitn": [[457, "polars-expr-str-splitn"]], "polars.Expr.str.slice": [[454, "polars-expr-str-slice"]], "polars.Expr.str.lstrip": [[448, "polars-expr-str-lstrip"]], "polars.Expr.search_sorted": [[422, "polars-expr-search-sorted"]], "polars.Expr.round": [[420, "polars-expr-round"]], "polars.Expr.reshape": [[408, "polars-expr-reshape"]], "polars.Expr.over": [[398, "polars-expr-over"]], "polars.Expr.str.contains": [[438, "polars-expr-str-contains"]], "polars.Expr.str.replace": [[450, "polars-expr-str-replace"]], "polars.Expr.repeat_by": [[407, "polars-expr-repeat-by"]], "polars.Expr.product": [[402, "polars-expr-product"]], "polars.Expr.sample": [[421, "polars-expr-sample"]], "polars.Expr.str.encode": [[441, "polars-expr-str-encode"]], "polars.Expr.str.extract_all": [[444, "polars-expr-str-extract-all"]], "polars.Expr.pow": [[400, "polars-expr-pow"]], "polars.Expr.str.lengths": [[446, "polars-expr-str-lengths"]], "polars.Expr.sort": [[433, "polars-expr-sort"]], "polars.Expr.shift": [[424, "polars-expr-shift"]], "polars.Expr.sqrt": [[435, "polars-expr-sqrt"]], "polars.Expr.str.starts_with": [[458, "polars-expr-str-starts-with"]], "polars.Expr.sign": [[428, "polars-expr-sign"]], "polars.Expr.shrink_dtype": [[426, "polars-expr-shrink-dtype"]], "polars.Expr.set_sorted": [[423, "polars-expr-set-sorted"]], "polars.Expr.null_count": [[397, "polars-expr-null-count"]], "polars.Expr.std": [[436, "polars-expr-std"]], "polars.Expr.str.split_exact": [[456, "polars-expr-str-split-exact"]], "polars.Expr.rolling_sum": [[418, "polars-expr-rolling-sum"]], "polars.Expr.slice": [[432, "polars-expr-slice"]], "polars.Expr.sort_by": [[434, "polars-expr-sort-by"]], "polars.Expr.str.n_chars": [[449, "polars-expr-str-n-chars"]], "polars.Expr.str.decode": [[440, "polars-expr-str-decode"]], "polars.Expr.sin": [[429, "polars-expr-sin"]], "polars.Expr.skew": [[431, "polars-expr-skew"]], "polars.Expr.str.replace_all": [[451, "polars-expr-str-replace-all"]], "polars.Expr.nan_min": [[396, "polars-expr-nan-min"]], "polars.Expr.rechunk": [[405, "polars-expr-rechunk"]], "polars.Expr.prefix": [[401, "polars-expr-prefix"]], "polars.Expr.rolling_mean": [[412, "polars-expr-rolling-mean"]], "polars.Expr.str.ends_with": [[442, "polars-expr-str-ends-with"]], "polars.Expr.rolling_max": [[411, "polars-expr-rolling-max"]], "polars.Expr.str.strip": [[459, "polars-expr-str-strip"]], "polars.Expr.pct_change": [[399, "polars-expr-pct-change"]], "polars.Expr.rank": [[404, "polars-expr-rank"]], "polars.Expr.reverse": [[409, "polars-expr-reverse"]], "polars.Expr.max": [[385, "polars-expr-max"]], "polars.Expr.is_not_nan": [[370, "polars-expr-is-not-nan"]], "polars.Expr.len": [[377, "polars-expr-len"]], "polars.Expr.list": [[379, "polars-expr-list"]], "polars.Expr.dt.strftime": [[334, "polars-expr-dt-strftime"]], "polars.Expr.is_duplicated": [[363, "polars-expr-is-duplicated"]], "polars.Expr.keep_name": [[374, "polars-expr-keep-name"]], "polars.Expr.ewm_var": [[346, "polars-expr-ewm-var"]], "polars.Expr.entropy": [[343, "polars-expr-entropy"]], "polars.Expr.fill_nan": [[351, "polars-expr-fill-nan"]], "polars.Expr.is_between": [[362, "polars-expr-is-between"]], "polars.Expr.is_infinite": [[367, "polars-expr-is-infinite"]], "polars.Expr.dt.year": [[342, "polars-expr-dt-year"]], "polars.Expr.min": [[392, "polars-expr-min"]], "polars.Expr.explode": [[349, "polars-expr-explode"]], "polars.Expr.head": [[359, "polars-expr-head"]], "polars.Expr.nan_max": [[395, "polars-expr-nan-max"]], "polars.Expr.dt.quarter": [[330, "polars-expr-dt-quarter"]], "polars.Expr.kurtosis": [[375, "polars-expr-kurtosis"]], "polars.Expr.dt.week": [[338, "polars-expr-dt-week"]], "polars.Expr.meta.pop": [[389, "polars-expr-meta-pop"]], "polars.Expr.dt.weekday": [[339, "polars-expr-dt-weekday"]], "polars.Expr.exp": [[348, "polars-expr-exp"]], "polars.Expr.hash": [[358, "polars-expr-hash"]], "polars.Expr.last": [[376, "polars-expr-last"]], "polars.Expr.log": [[380, "polars-expr-log"]], "polars.Expr.lower_bound": [[382, "polars-expr-lower-bound"]], "polars.Expr.dt.second": [[332, "polars-expr-dt-second"]], "polars.Expr.is_null": [[372, "polars-expr-is-null"]], "polars.Expr.dt.tz_localize": [[337, "polars-expr-dt-tz-localize"]], "polars.Expr.map_alias": [[384, "polars-expr-map-alias"]], "polars.Expr.forward_fill": [[357, "polars-expr-forward-fill"]], "polars.Expr.inspect": [[360, "polars-expr-inspect"]], "polars.Expr.is_nan": [[368, "polars-expr-is-nan"]], "polars.Expr.meta.root_names": [[390, "polars-expr-meta-root-names"]], "polars.Expr.mode": [[393, "polars-expr-mode"]], "polars.Expr.dt.round": [[331, "polars-expr-dt-round"]], "polars.Expr.is_not_null": [[371, "polars-expr-is-not-null"]], "polars.Expr.first": [[354, "polars-expr-first"]], "polars.Expr.median": [[387, "polars-expr-median"]], "polars.Expr.meta.undo_aliases": [[391, "polars-expr-meta-undo-aliases"]], "polars.Expr.is_unique": [[373, "polars-expr-is-unique"]], "polars.Expr.meta.output_name": [[388, "polars-expr-meta-output-name"]], "polars.Expr.dt.with_time_zone": [[341, "polars-expr-dt-with-time-zone"]], "polars.Expr.extend_constant": [[350, "polars-expr-extend-constant"]], "polars.Expr.ewm_mean": [[344, "polars-expr-ewm-mean"]], "polars.Expr.n_unique": [[394, "polars-expr-n-unique"]], "polars.Expr.fill_null": [[352, "polars-expr-fill-null"]], "polars.Expr.is_in": [[366, "polars-expr-is-in"]], "polars.Expr.exclude": [[347, "polars-expr-exclude"]], "polars.Expr.dt.timestamp": [[335, "polars-expr-dt-timestamp"]], "polars.Expr.floor": [[356, "polars-expr-floor"]], "polars.Expr.mean": [[386, "polars-expr-mean"]], "polars.Expr.dt.truncate": [[336, "polars-expr-dt-truncate"]], "polars.Expr.is_finite": [[364, "polars-expr-is-finite"]], "polars.Expr.map": [[383, "polars-expr-map"]], "polars.Expr.is_first": [[365, "polars-expr-is-first"]], "polars.Expr.dt.with_time_unit": [[340, "polars-expr-dt-with-time-unit"]], "polars.Expr.filter": [[353, "polars-expr-filter"]], "polars.Expr.interpolate": [[361, "polars-expr-interpolate"]], "polars.Expr.log10": [[381, "polars-expr-log10"]], "polars.Expr.flatten": [[355, "polars-expr-flatten"]], "polars.Expr.is_not": [[369, "polars-expr-is-not"]], "polars.Expr.limit": [[378, "polars-expr-limit"]], "polars.Expr.dt.seconds": [[333, "polars-expr-dt-seconds"]], "polars.Expr.ewm_std": [[345, "polars-expr-ewm-std"]], "polars.Expr.count": [[300, "polars-expr-count"]], "polars.Expr.dt.microseconds": [[320, "polars-expr-dt-microseconds"]], "polars.Expr.cumcount": [[301, "polars-expr-cumcount"]], "polars.Expr.arr.sum": [[282, "polars-expr-arr-sum"]], "polars.Expr.arr.concat": [[265, "polars-expr-arr-concat"]], "polars.Expr.arr.diff": [[267, "polars-expr-arr-diff"]], "polars.Expr.cumprod": [[304, "polars-expr-cumprod"]], "polars.Expr.arr.eval": [[268, "polars-expr-arr-eval"]], "polars.Expr.arr.sort": [[281, "polars-expr-arr-sort"]], "polars.Expr.dt.days": [[314, "polars-expr-dt-days"]], "polars.Expr.arr.arg_min": [[264, "polars-expr-arr-arg-min"]], "polars.Expr.arr.get": [[270, "polars-expr-arr-get"]], "polars.Expr.backward_fill": [[286, "polars-expr-backward-fill"]], "polars.Expr.clip_min": [[297, "polars-expr-clip-min"]], "polars.Expr.dt.millisecond": [[321, "polars-expr-dt-millisecond"]], "polars.Expr.arr.lengths": [[274, "polars-expr-arr-lengths"]], "polars.Expr.cumsum": [[305, "polars-expr-cumsum"]], "polars.Expr.bin.contains": [[287, "polars-expr-bin-contains"]], "polars.Expr.arr.last": [[273, "polars-expr-arr-last"]], "polars.Expr.arr.shift": [[279, "polars-expr-arr-shift"]], "polars.Expr.cat.set_ordering": [[293, "polars-expr-cat-set-ordering"]], "polars.Expr.drop_nulls": [[310, "polars-expr-drop-nulls"]], "polars.Expr.arr.slice": [[280, "polars-expr-arr-slice"]], "polars.Expr.dt.hour": [[316, "polars-expr-dt-hour"]], "polars.Expr.arr.unique": [[285, "polars-expr-arr-unique"]], "polars.Expr.dot": [[308, "polars-expr-dot"]], "polars.Expr.dt.nanoseconds": [[327, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.offset_by": [[328, "polars-expr-dt-offset-by"]], "polars.Expr.bin.ends_with": [[290, "polars-expr-bin-ends-with"]], "polars.Expr.cummin": [[303, "polars-expr-cummin"]], "polars.Expr.dt.epoch": [[315, "polars-expr-dt-epoch"]], "polars.Expr.arr.reverse": [[278, "polars-expr-arr-reverse"]], "polars.Expr.dt.cast_time_zone": [[312, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.microsecond": [[319, "polars-expr-dt-microsecond"]], "polars.Expr.arr.head": [[271, "polars-expr-arr-head"]], "polars.Expr.cast": [[292, "polars-expr-cast"]], "polars.Expr.arr.first": [[269, "polars-expr-arr-first"]], "polars.Expr.arr.min": [[277, "polars-expr-arr-min"]], "polars.Expr.arr.contains": [[266, "polars-expr-arr-contains"]], "polars.Expr.arr.join": [[272, "polars-expr-arr-join"]], "polars.Expr.dt.hours": [[317, "polars-expr-dt-hours"]], "polars.Expr.arr.mean": [[276, "polars-expr-arr-mean"]], "polars.Expr.diff": [[307, "polars-expr-diff"]], "polars.Expr.arr.tail": [[283, "polars-expr-arr-tail"]], "polars.Expr.bin.decode": [[288, "polars-expr-bin-decode"]], "polars.Expr.arr.max": [[275, "polars-expr-arr-max"]], "polars.Expr.cummax": [[302, "polars-expr-cummax"]], "polars.Expr.cos": [[298, "polars-expr-cos"]], "polars.Expr.dt.nanosecond": [[326, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.milliseconds": [[322, "polars-expr-dt-milliseconds"]], "polars.Expr.bin.encode": [[289, "polars-expr-bin-encode"]], "polars.Expr.dt.cast_time_unit": [[311, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.minute": [[323, "polars-expr-dt-minute"]], "polars.Expr.clip": [[295, "polars-expr-clip"]], "polars.Expr.drop_nans": [[309, "polars-expr-drop-nans"]], "polars.Expr.ceil": [[294, "polars-expr-ceil"]], "polars.Expr.clip_max": [[296, "polars-expr-clip-max"]], "polars.Expr.dt.month": [[325, "polars-expr-dt-month"]], "polars.Expr.bin.starts_with": [[291, "polars-expr-bin-starts-with"]], "polars.Expr.arr.to_struct": [[284, "polars-expr-arr-to-struct"]], "polars.Expr.dt.day": [[313, "polars-expr-dt-day"]], "polars.Expr.dt.minutes": [[324, "polars-expr-dt-minutes"]], "polars.Expr.dt.iso_year": [[318, "polars-expr-dt-iso-year"]], "polars.Expr.dt.ordinal_day": [[329, "polars-expr-dt-ordinal-day"]], "polars.Expr.cosh": [[299, "polars-expr-cosh"]], "polars.Expr.cumulative_eval": [[306, "polars-expr-cumulative-eval"]], "polars.LazyFrame.slice": [[591, "polars-lazyframe-slice"]], "Functions": [[541, "functions"], [532, "functions"], [242, "functions"]], "Conversion": [[541, "conversion"]], "Eager/Lazy functions": [[541, "eager-lazy-functions"]], "Parallelization": [[541, "parallelization"]], "StringCache": [[541, "stringcache"]], "polars.LazyFrame.drop_nulls": [[553, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.pipe": [[580, "polars-lazyframe-pipe"]], "polars.LazyFrame.columns": [[549, "polars-lazyframe-columns"]], "Input/output": [[543, "input-output"]], "CSV": [[543, "csv"]], "Feather/ IPC": [[543, "feather-ipc"]], "Parquet": [[543, "parquet"]], "JSON": [[543, "json"]], "AVRO": [[543, "avro"]], "Excel": [[543, "excel"]], "Delta Lake": [[543, "delta-lake"]], "Datasets": [[543, "datasets"]], "BatchedCsvReader": [[543, "batchedcsvreader"]], "polars.LazyFrame.fill_null": [[558, "polars-lazyframe-fill-null"]], "Window": [[540, "window"]], "polars.LazyFrame.profile": [[581, "polars-lazyframe-profile"]], "polars.LazyFrame.explode": [[555, "polars-lazyframe-explode"]], "polars.LazyFrame.read_json": [[583, "polars-lazyframe-read-json"]], "polars.LazyFrame.rename": [[584, "polars-lazyframe-rename"]], "polars.LazyFrame.clone": [[547, "polars-lazyframe-clone"]], "polars.LazyFrame.groupby_dynamic": [[563, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.min": [[579, "polars-lazyframe-min"]], "polars.LazyFrame.groupby_rolling": [[564, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.max": [[574, "polars-lazyframe-max"]], "polars.LazyFrame.dtypes": [[554, "polars-lazyframe-dtypes"]], "API reference": [[542, "api-reference"]], "polars.LazyFrame.from_json": [[561, "polars-lazyframe-from-json"]], "polars.LazyFrame.cache": [[545, "polars-lazyframe-cache"]], "polars.LazyFrame.filter": [[559, "polars-lazyframe-filter"]], "polars.LazyFrame.fill_nan": [[557, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.map": [[573, "polars-lazyframe-map"]], "polars.LazyFrame.describe_optimized_plan": [[550, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.limit": [[572, "polars-lazyframe-limit"]], "polars.LazyFrame.merge_sorted": [[578, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.groupby": [[562, "polars-lazyframe-groupby"]], "polars.LazyFrame.interpolate": [[567, "polars-lazyframe-interpolate"]], "polars.LazyFrame.schema": [[586, "polars-lazyframe-schema"]], "polars.LazyFrame.sort": [[592, "polars-lazyframe-sort"]], "polars.LazyFrame.quantile": [[582, "polars-lazyframe-quantile"]], "polars.LazyFrame.reverse": [[585, "polars-lazyframe-reverse"]], "Columns / names": [[530, "columns-names"]], "polars.LazyFrame.inspect": [[566, "polars-lazyframe-inspect"]], "polars.LazyFrame.first": [[560, "polars-lazyframe-first"]], "polars.LazyFrame.mean": [[575, "polars-lazyframe-mean"]], "polars.LazyFrame.select": [[587, "polars-lazyframe-select"]], "polars.LazyFrame.std": [[593, "polars-lazyframe-std"]], "Meta": [[534, "meta"]], "polars.LazyFrame.shift_and_fill": [[589, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.head": [[565, "polars-lazyframe-head"]], "polars.LazyFrame.fetch": [[556, "polars-lazyframe-fetch"]], "Expressions": [[533, "expressions"]], "polars.LazyFrame.cleared": [[546, "polars-lazyframe-cleared"]], "polars.LazyFrame.describe_plan": [[551, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.median": [[576, "polars-lazyframe-median"]], "polars.LazyFrame.melt": [[577, "polars-lazyframe-melt"]], "polars.LazyFrame.drop": [[552, "polars-lazyframe-drop"]], "polars.LazyFrame.join": [[568, "polars-lazyframe-join"]], "polars.LazyFrame.last": [[570, "polars-lazyframe-last"]], "polars.LazyFrame.show_graph": [[590, "polars-lazyframe-show-graph"]], "polars.LazyFrame.shift": [[588, "polars-lazyframe-shift"]], "polars.LazyFrame.lazy": [[571, "polars-lazyframe-lazy"]], "polars.LazyFrame.join_asof": [[569, "polars-lazyframe-join-asof"]], "polars.LazyFrame.collect": [[548, "polars-lazyframe-collect"]], "polars.DataFrame.hstack": [[144, "polars-dataframe-hstack"]], "polars.DataFrame.pipe": [[166, "polars-dataframe-pipe"]], "polars.DataFrame.select": [[179, "polars-dataframe-select"]], "polars.DataFrame.to_dict": [[191, "polars-dataframe-to-dict"]], "polars.DataFrame.max": [[155, "polars-dataframe-max"]], "polars.DataFrame.n_chunks": [[161, "polars-dataframe-n-chunks"]], "polars.DataFrame.to_dicts": [[192, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_numpy": [[194, "polars-dataframe-to-numpy"]], "polars.DataFrame.merge_sorted": [[159, "polars-dataframe-merge-sorted"]], "polars.DataFrame.null_count": [[163, "polars-dataframe-null-count"]], "polars.DataFrame.median": [[157, "polars-dataframe-median"]], "polars.DataFrame.interpolate": [[146, "polars-dataframe-interpolate"]], "polars.DataFrame.row": [[175, "polars-dataframe-row"]], "polars.DataFrame.shift": [[181, "polars-dataframe-shift"]], "polars.DataFrame.product": [[168, "polars-dataframe-product"]], "polars.DataFrame.height": [[143, "polars-dataframe-height"]], "polars.DataFrame.get_columns": [[136, "polars-dataframe-get-columns"]], "polars.DataFrame.pivot": [[167, "polars-dataframe-pivot"]], "polars.DataFrame.replace": [[172, "polars-dataframe-replace"]], "polars.DataFrame.min": [[160, "polars-dataframe-min"]], "polars.DataFrame.sum": [[187, "polars-dataframe-sum"]], "polars.DataFrame.frame_equal": [[134, "polars-dataframe-frame-equal"]], "polars.DataFrame.quantile": [[169, "polars-dataframe-quantile"]], "polars.DataFrame.insert_at_idx": [[145, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.shape": [[180, "polars-dataframe-shape"]], "polars.DataFrame.std": [[186, "polars-dataframe-std"]], "polars.DataFrame.to_arrow": [[190, "polars-dataframe-to-arrow"]], "polars.DataFrame.hash_rows": [[141, "polars-dataframe-hash-rows"]], "polars.DataFrame.groupby": [[138, "polars-dataframe-groupby"]], "polars.DataFrame.to_dummies": [[193, "polars-dataframe-to-dummies"]], "polars.DataFrame.fold": [[133, "polars-dataframe-fold"]], "polars.DataFrame.is_unique": [[149, "polars-dataframe-is-unique"]], "polars.DataFrame.slice": [[184, "polars-dataframe-slice"]], "polars.DataFrame.groupby_rolling": [[140, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.is_duplicated": [[147, "polars-dataframe-is-duplicated"]], "polars.DataFrame.partition_by": [[164, "polars-dataframe-partition-by"]], "polars.DataFrame.rename": [[171, "polars-dataframe-rename"]], "polars.DataFrame.rows": [[176, "polars-dataframe-rows"]], "polars.DataFrame.reverse": [[174, "polars-dataframe-reverse"]], "polars.DataFrame.find_idx_by_name": [[132, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.is_empty": [[148, "polars-dataframe-is-empty"]], "polars.DataFrame.to_pandas": [[195, "polars-dataframe-to-pandas"]], "polars.DataFrame.head": [[142, "polars-dataframe-head"]], "polars.DataFrame.shift_and_fill": [[182, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.rechunk": [[170, "polars-dataframe-rechunk"]], "polars.DataFrame.schema": [[178, "polars-dataframe-schema"]], "polars.DataFrame.tail": [[188, "polars-dataframe-tail"]], "polars.DataFrame.to_struct": [[197, "polars-dataframe-to-struct"]], "polars.DataFrame.replace_at_idx": [[173, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.mean": [[156, "polars-dataframe-mean"]], "polars.DataFrame.item": [[150, "polars-dataframe-item"]], "polars.DataFrame.sample": [[177, "polars-dataframe-sample"]], "polars.DataFrame.melt": [[158, "polars-dataframe-melt"]], "polars.DataFrame.glimpse": [[137, "polars-dataframe-glimpse"]], "polars.DataFrame.join_asof": [[152, "polars-dataframe-join-asof"]], "polars.DataFrame.lazy": [[153, "polars-dataframe-lazy"]], "polars.DataFrame.get_column": [[135, "polars-dataframe-get-column"]], "polars.DataFrame.join": [[151, "polars-dataframe-join"]], "polars.DataFrame.limit": [[154, "polars-dataframe-limit"]], "polars.DataFrame.n_unique": [[162, "polars-dataframe-n-unique"]], "polars.DataFrame.sort": [[185, "polars-dataframe-sort"]], "polars.DataFrame.pearson_corr": [[165, "polars-dataframe-pearson-corr"]], "polars.DataFrame.take_every": [[189, "polars-dataframe-take-every"]], "polars.DataFrame.to_series": [[196, "polars-dataframe-to-series"]], "polars.DataFrame.groupby_dynamic": [[139, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.shrink_to_fit": [[183, "polars-dataframe-shrink-to-fit"]], "polars.Expr.arcsinh": [[255, "polars-expr-arcsinh"]], "polars.Expr.arccos": [[252, "polars-expr-arccos"]], "polars.internals.dataframe.groupby.GroupBy.min": [[219, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[222, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.Expr.alias": [[247, "polars-expr-alias"]], "polars.Expr.abs": [[245, "polars-expr-abs"]], "polars.internals.dataframe.pivot.PivotOps.mean": [[229, "polars-internals-dataframe-pivot-pivotops-mean"]], "polars.Expr.arctanh": [[257, "polars-expr-arctanh"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[211, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.internals.dataframe.groupby.GroupBy.count": [[212, "polars-internals-dataframe-groupby-groupby-count"]], "Data types": [[242, "data-types"]], "Numeric": [[242, "numeric"]], "Date / Time": [[242, "date-time"]], "Nested": [[242, "nested"]], "Other": [[242, "other"]], "polars.Expr.arctan": [[256, "polars-expr-arctan"]], "polars.DataFrame.var": [[203, "polars-dataframe-var"]], "polars.internals.dataframe.groupby.GroupBy.head": [[214, "polars-internals-dataframe-groupby-groupby-head"]], "polars.DataFrame.unnest": [[200, "polars-dataframe-unnest"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[220, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.Expr.argsort": [[262, "polars-expr-argsort"]], "polars.internals.dataframe.pivot.PivotOps.max": [[228, "polars-internals-dataframe-pivot-pivotops-max"]], "polars.internals.dataframe.pivot.PivotOps.median": [[230, "polars-internals-dataframe-pivot-pivotops-median"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[217, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.pivot.PivotOps.last": [[227, "polars-internals-dataframe-pivot-pivotops-last"]], "polars.internals.dataframe.pivot.PivotOps.sum": [[232, "polars-internals-dataframe-pivot-pivotops-sum"]], "polars.DataFrame.upsample": [[202, "polars-dataframe-upsample"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[209, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[223, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.internals.dataframe.pivot.PivotOps.count": [[225, "polars-internals-dataframe-pivot-pivotops-count"]], "polars.internals.dataframe.pivot.PivotOps.min": [[231, "polars-internals-dataframe-pivot-pivotops-min"]], "polars.Expr.arr.arg_max": [[263, "polars-expr-arr-arg-max"]], "polars.DataFrame.with_columns": [[207, "polars-dataframe-with-columns"]], "polars.internals.dataframe.groupby.GroupBy.first": [[213, "polars-internals-dataframe-groupby-groupby-first"]], "polars.Expr.apply": [[251, "polars-expr-apply"]], "polars.Expr.arg_sort": [[260, "polars-expr-arg-sort"]], "Pivot": [[241, "pivot"]], "polars.internals.dataframe.groupby.GroupBy.median": [[218, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.arg_min": [[259, "polars-expr-arg-min"]], "polars.internals.dataframe.groupby.GroupBy.max": [[216, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.groupby.GroupBy.pivot": [[221, "polars-internals-dataframe-groupby-groupby-pivot"]], "polars.Expr.arg_max": [[258, "polars-expr-arg-max"]], "polars.Expr.any": [[249, "polars-expr-any"]], "polars.DataFrame.with_row_count": [[208, "polars-dataframe-with-row-count"]], "polars.Expr.all": [[248, "polars-expr-all"]], "polars.DataFrame.vstack": [[204, "polars-dataframe-vstack"]], "polars.Expr.agg_groups": [[246, "polars-expr-agg-groups"]], "polars.Expr.arccosh": [[253, "polars-expr-arccosh"]], "polars.DataFrame.unstack": [[201, "polars-dataframe-unstack"]], "polars.Expr.append": [[250, "polars-expr-append"]], "polars.DataFrame.width": [[205, "polars-dataframe-width"]], "DataFrame": [[238, "dataframe"]], "Exceptions": [[243, "exceptions"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[224, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.DataFrame.unique": [[199, "polars-dataframe-unique"]], "polars.Expr.arg_unique": [[261, "polars-expr-arg-unique"]], "polars.DataFrame.with_column": [[206, "polars-dataframe-with-column"]], "polars.internals.dataframe.groupby.GroupBy.last": [[215, "polars-internals-dataframe-groupby-groupby-last"]], "polars.DataFrame.transpose": [[198, "polars-dataframe-transpose"]], "polars.internals.dataframe.pivot.PivotOps.first": [[226, "polars-internals-dataframe-pivot-pivotops-first"]], "polars.internals.dataframe.groupby.GroupBy.agg_list": [[210, "polars-internals-dataframe-groupby-groupby-agg-list"]], "polars.Expr.arcsin": [[254, "polars-expr-arcsin"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_str_lengths() (polars.config class method)": [[9, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[10, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[11, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[12, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[13, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[14, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[15, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[19, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[20, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[21, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[22, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[23, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[24, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[25, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[26, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[27, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[28, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[29, "polars.DataType"]], "__init__() (polars.datatype method)": [[29, "polars.DataType.__init__"]], "date (class in polars)": [[30, "polars.Date"]], "__init__() (polars.date method)": [[30, "polars.Date.__init__"]], "datetime (class in polars)": [[31, "polars.Datetime"]], "__init__() (polars.datetime method)": [[31, "polars.Datetime.__init__"]], "duration (class in polars)": [[32, "polars.Duration"]], "__init__() (polars.duration method)": [[32, "polars.Duration.__init__"]], "float32 (class in polars)": [[33, "polars.Float32"]], "__init__() (polars.float32 method)": [[33, "polars.Float32.__init__"]], "float64 (class in polars)": [[34, "polars.Float64"]], "__init__() (polars.float64 method)": [[34, "polars.Float64.__init__"]], "int16 (class in polars)": [[35, "polars.Int16"]], "__init__() (polars.int16 method)": [[35, "polars.Int16.__init__"]], "int32 (class in polars)": [[36, "polars.Int32"]], "__init__() (polars.int32 method)": [[36, "polars.Int32.__init__"]], "int64 (class in polars)": [[37, "polars.Int64"]], "__init__() (polars.int64 method)": [[37, "polars.Int64.__init__"]], "int8 (class in polars)": [[38, "polars.Int8"]], "__init__() (polars.int8 method)": [[38, "polars.Int8.__init__"]], "list (class in polars)": [[39, "polars.List"]], "__init__() (polars.list method)": [[39, "polars.List.__init__"]], "null (class in polars)": [[40, "polars.Null"]], "__init__() (polars.null method)": [[40, "polars.Null.__init__"]], "object (class in polars)": [[41, "polars.Object"]], "__init__() (polars.object method)": [[41, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[42, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[43, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[44, "polars.SQLContext.register"]], "stringcache (class in polars)": [[45, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[45, "polars.StringCache.__init__"]], "struct (class in polars)": [[46, "polars.Struct"]], "__init__() (polars.struct method)": [[46, "polars.Struct.__init__"]], "time (class in polars)": [[47, "polars.Time"]], "__init__() (polars.time method)": [[47, "polars.Time.__init__"]], "uint16 (class in polars)": [[48, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[48, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[49, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[49, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[50, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[50, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[51, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[51, "polars.UInt8.__init__"]], "unknown (class in polars)": [[52, "polars.Unknown"]], "__init__() (polars.unknown method)": [[52, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[53, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[53, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[59, "polars.arg_where"]], "build_info() (in module polars)": [[60, "polars.build_info"]], "collect_all() (in module polars)": [[61, "polars.collect_all"]], "concat() (in module polars)": [[62, "polars.concat"]], "cut() (in module polars)": [[63, "polars.cut"]], "date_range() (in module polars)": [[64, "polars.date_range"]], "arrowerror": [[65, "polars.exceptions.ArrowError"]], "computeerror": [[66, "polars.exceptions.ComputeError"]], "duplicateerror": [[67, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[68, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[69, "polars.exceptions.NoDataError"]], "norowsreturned": [[70, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[71, "polars.exceptions.NotFoundError"]], "panicexception": [[72, "polars.exceptions.PanicException"]], "rowsexception": [[73, "polars.exceptions.RowsException"]], "schemaerror": [[74, "polars.exceptions.SchemaError"]], "shapeerror": [[75, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[76, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[77, "polars.from_arrow"]], "from_dict() (in module polars)": [[78, "polars.from_dict"]], "from_dicts() (in module polars)": [[79, "polars.from_dicts"]], "from_numpy() (in module polars)": [[80, "polars.from_numpy"]], "from_pandas() (in module polars)": [[81, "polars.from_pandas"]], "from_records() (in module polars)": [[82, "polars.from_records"]], "get_dummies() (in module polars)": [[83, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[84, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[85, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[86, "polars.ones"]], "read_avro() (in module polars)": [[87, "polars.read_avro"]], "read_csv() (in module polars)": [[88, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[89, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[90, "polars.read_delta"]], "read_excel() (in module polars)": [[91, "polars.read_excel"]], "read_ipc() (in module polars)": [[92, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[93, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[94, "polars.read_json"]], "read_ndjson() (in module polars)": [[95, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[96, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[97, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[98, "polars.read_sql"]], "scan_csv() (in module polars)": [[99, "polars.scan_csv"]], "scan_delta() (in module polars)": [[100, "polars.scan_delta"]], "scan_ds() (in module polars)": [[101, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[102, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[103, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[104, "polars.scan_parquet"]], "show_versions() (in module polars)": [[105, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[106, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[107, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[108, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[108, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[109, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[110, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[111, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[112, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[113, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[114, "polars.zeros"]], "apply() (polars.dataframe method)": [[117, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[118, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[119, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[120, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[121, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[122, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[123, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[124, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[125, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[126, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[127, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[128, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[129, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[130, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[131, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[132, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[133, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[134, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[135, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[136, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[137, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[138, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[139, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[140, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[141, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[142, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[143, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[144, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[145, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[146, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[147, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[148, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[149, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[150, "polars.DataFrame.item"]], "join() (polars.dataframe method)": [[151, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[152, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[153, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[154, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[155, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[156, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[157, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[158, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[159, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[160, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[161, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[162, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[163, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[164, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[165, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[166, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[167, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[168, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[169, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[170, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[171, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[172, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[173, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[174, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[175, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[176, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[177, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[178, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[179, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[180, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[181, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[182, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[183, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[184, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[185, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[186, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[187, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[188, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[189, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[190, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[191, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[192, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[193, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[194, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[195, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[196, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[197, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[198, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[199, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[200, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[201, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[202, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[203, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[204, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[205, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[206, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[207, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[208, "polars.DataFrame.with_row_count"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[209, "polars.internals.dataframe.groupby.GroupBy.agg"]], "agg_list() (polars.internals.dataframe.groupby.groupby method)": [[210, "polars.internals.dataframe.groupby.GroupBy.agg_list"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[211, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[212, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[213, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "pivot() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.pivot"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.tail"]], "count() (polars.internals.dataframe.pivot.pivotops method)": [[225, "polars.internals.dataframe.pivot.PivotOps.count"]], "first() (polars.internals.dataframe.pivot.pivotops method)": [[226, "polars.internals.dataframe.pivot.PivotOps.first"]], "last() (polars.internals.dataframe.pivot.pivotops method)": [[227, "polars.internals.dataframe.pivot.PivotOps.last"]], "max() (polars.internals.dataframe.pivot.pivotops method)": [[228, "polars.internals.dataframe.pivot.PivotOps.max"]], "mean() (polars.internals.dataframe.pivot.pivotops method)": [[229, "polars.internals.dataframe.pivot.PivotOps.mean"]], "median() (polars.internals.dataframe.pivot.pivotops method)": [[230, "polars.internals.dataframe.pivot.PivotOps.median"]], "min() (polars.internals.dataframe.pivot.pivotops method)": [[231, "polars.internals.dataframe.pivot.PivotOps.min"]], "sum() (polars.internals.dataframe.pivot.pivotops method)": [[232, "polars.internals.dataframe.pivot.PivotOps.sum"]], "abs() (polars.expr method)": [[245, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[246, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[247, "polars.Expr.alias"]], "all() (polars.expr method)": [[248, "polars.Expr.all"]], "any() (polars.expr method)": [[249, "polars.Expr.any"]], "append() (polars.expr method)": [[250, "polars.Expr.append"]], "apply() (polars.expr method)": [[251, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[252, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[253, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[254, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[255, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[256, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[257, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[258, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[259, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[260, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[261, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[262, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[263, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[264, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[265, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[266, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[267, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[268, "polars.Expr.arr.eval"]], "first() (polars.expr.arr method)": [[269, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[270, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[271, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[272, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[273, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[274, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[275, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[276, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[277, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[278, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[279, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[280, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[281, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[282, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[283, "polars.Expr.arr.tail"]], "to_struct() (polars.expr.arr method)": [[284, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[285, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[286, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[287, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[288, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[289, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[290, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[291, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[292, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[293, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[294, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[295, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[296, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[297, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[298, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[299, "polars.Expr.cosh"]], "count() (polars.expr method)": [[300, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[301, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[302, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[303, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[304, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[305, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[306, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[307, "polars.Expr.diff"]], "dot() (polars.expr method)": [[308, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[309, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[310, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[311, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[312, "polars.Expr.dt.cast_time_zone"]], "day() (polars.expr.dt method)": [[313, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[314, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[315, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[316, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[317, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[318, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[319, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[320, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[321, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[322, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[323, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[324, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[325, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[326, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[327, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[328, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[329, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[330, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[331, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[332, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[333, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[334, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[335, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[336, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[337, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[338, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[339, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[340, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[341, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[342, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[343, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[344, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[345, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[346, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[347, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[348, "polars.Expr.exp"]], "explode() (polars.expr method)": [[349, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[350, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[351, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[352, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[353, "polars.Expr.filter"]], "first() (polars.expr method)": [[354, "polars.Expr.first"]], "flatten() (polars.expr method)": [[355, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[356, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[357, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[358, "polars.Expr.hash"]], "head() (polars.expr method)": [[359, "polars.Expr.head"]], "inspect() (polars.expr method)": [[360, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[361, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[362, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[363, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[364, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[365, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[366, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[367, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[368, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[369, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[370, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[371, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[372, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[373, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[374, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[375, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[376, "polars.Expr.last"]], "len() (polars.expr method)": [[377, "polars.Expr.len"]], "limit() (polars.expr method)": [[378, "polars.Expr.limit"]], "list() (polars.expr method)": [[379, "polars.Expr.list"]], "log() (polars.expr method)": [[380, "polars.Expr.log"]], "log10() (polars.expr method)": [[381, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[382, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[383, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[384, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[385, "polars.Expr.max"]], "mean() (polars.expr method)": [[386, "polars.Expr.mean"]], "median() (polars.expr method)": [[387, "polars.Expr.median"]], "output_name() (polars.expr.meta method)": [[388, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[389, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[390, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[391, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[392, "polars.Expr.min"]], "mode() (polars.expr method)": [[393, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[394, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[395, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[396, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[397, "polars.Expr.null_count"]], "over() (polars.expr method)": [[398, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[399, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[400, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[401, "polars.Expr.prefix"]], "product() (polars.expr method)": [[402, "polars.Expr.product"]], "quantile() (polars.expr method)": [[403, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[404, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[405, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[406, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[407, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[408, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[409, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[410, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[411, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[412, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[413, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[414, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[415, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[416, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[417, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[418, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[419, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[420, "polars.Expr.round"]], "sample() (polars.expr method)": [[421, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[422, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[423, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[424, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[425, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[426, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[427, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[428, "polars.Expr.sign"]], "sin() (polars.expr method)": [[429, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[430, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[431, "polars.Expr.skew"]], "slice() (polars.expr method)": [[432, "polars.Expr.slice"]], "sort() (polars.expr method)": [[433, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[434, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[435, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[436, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[437, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[438, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[439, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[440, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[441, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[442, "polars.Expr.str.ends_with"]], "extract() (polars.expr.str method)": [[443, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[444, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[445, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[446, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[447, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[448, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[449, "polars.Expr.str.n_chars"]], "replace() (polars.expr.str method)": [[450, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[451, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[452, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[453, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[454, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[455, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[456, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[457, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[458, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[459, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[460, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[461, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[462, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[463, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[464, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[465, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[466, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[467, "polars.Expr.sum"]], "tail() (polars.expr method)": [[468, "polars.Expr.tail"]], "take() (polars.expr method)": [[469, "polars.Expr.take"]], "take_every() (polars.expr method)": [[470, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[471, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[472, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[473, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[474, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[475, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[476, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[477, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[478, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[479, "polars.Expr.var"]], "where() (polars.expr method)": [[480, "polars.Expr.where"]], "all() (in module polars)": [[481, "polars.all"]], "any() (in module polars)": [[482, "polars.any"]], "apply() (in module polars)": [[483, "polars.apply"]], "arange() (in module polars)": [[484, "polars.arange"]], "argsort_by() (in module polars)": [[485, "polars.argsort_by"]], "avg() (in module polars)": [[486, "polars.avg"]], "coalesce() (in module polars)": [[487, "polars.coalesce"]], "col() (in module polars)": [[488, "polars.col"]], "concat_list() (in module polars)": [[489, "polars.concat_list"]], "concat_str() (in module polars)": [[490, "polars.concat_str"]], "count() (in module polars)": [[491, "polars.count"]], "cov() (in module polars)": [[492, "polars.cov"]], "cumfold() (in module polars)": [[493, "polars.cumfold"]], "cumreduce() (in module polars)": [[494, "polars.cumreduce"]], "cumsum() (in module polars)": [[495, "polars.cumsum"]], "date() (in module polars)": [[496, "polars.date"]], "datetime() (in module polars)": [[497, "polars.datetime"]], "duration() (in module polars)": [[498, "polars.duration"]], "element() (in module polars)": [[499, "polars.element"]], "exclude() (in module polars)": [[500, "polars.exclude"]], "first() (in module polars)": [[501, "polars.first"]], "fold() (in module polars)": [[502, "polars.fold"]], "format() (in module polars)": [[503, "polars.format"]], "groups() (in module polars)": [[504, "polars.groups"]], "head() (in module polars)": [[505, "polars.head"]], "list() (in module polars)": [[506, "polars.list"]], "lit() (in module polars)": [[507, "polars.lit"]], "map() (in module polars)": [[508, "polars.map"]], "max() (in module polars)": [[509, "polars.max"]], "mean() (in module polars)": [[510, "polars.mean"]], "median() (in module polars)": [[511, "polars.median"]], "min() (in module polars)": [[512, "polars.min"]], "n_unique() (in module polars)": [[513, "polars.n_unique"]], "pearson_corr() (in module polars)": [[514, "polars.pearson_corr"]], "quantile() (in module polars)": [[515, "polars.quantile"]], "reduce() (in module polars)": [[516, "polars.reduce"]], "repeat() (in module polars)": [[517, "polars.repeat"]], "select() (in module polars)": [[518, "polars.select"]], "spearman_rank_corr() (in module polars)": [[519, "polars.spearman_rank_corr"]], "std() (in module polars)": [[520, "polars.std"]], "struct() (in module polars)": [[521, "polars.struct"]], "sum() (in module polars)": [[522, "polars.sum"]], "tail() (in module polars)": [[523, "polars.tail"]], "var() (in module polars)": [[524, "polars.var"]], "when() (in module polars)": [[525, "polars.when"]], "cache() (polars.lazyframe method)": [[545, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[546, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[547, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[548, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[549, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[550, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[551, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[552, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[553, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[554, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[555, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[556, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[557, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[558, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[559, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[560, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[561, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[562, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[563, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[564, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[565, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[566, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[567, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[568, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[569, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[570, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[571, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[572, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[573, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[574, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[575, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[576, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[577, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[578, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[579, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[580, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[581, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[582, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[583, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[584, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[585, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[586, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[587, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[588, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[589, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[590, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[591, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[592, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[593, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[594, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[595, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[596, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[597, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[598, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[599, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[600, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[601, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[602, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[603, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[604, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[605, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[606, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[607, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[608, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[609, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[617, "polars.Series.abs"]], "alias() (polars.series method)": [[618, "polars.Series.alias"]], "all() (polars.series method)": [[619, "polars.Series.all"]], "any() (polars.series method)": [[620, "polars.Series.any"]], "append() (polars.series method)": [[621, "polars.Series.append"]], "apply() (polars.series method)": [[622, "polars.Series.apply"]], "arccos() (polars.series method)": [[623, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[624, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[625, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[626, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[627, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[628, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[629, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[630, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[631, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[632, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[633, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[634, "polars.Series.argsort"]], "arr (polars.series attribute)": [[635, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[636, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[637, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[638, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[639, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[640, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[641, "polars.Series.arr.eval"]], "first() (polars.series.arr method)": [[642, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[643, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[644, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[645, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[646, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[647, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[648, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[649, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[650, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[651, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[652, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[653, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[654, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[655, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[656, "polars.Series.arr.tail"]], "to_struct() (polars.series.arr method)": [[657, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[658, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[659, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[660, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[661, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[662, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[663, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[664, "polars.Series.cast"]], "cat (polars.series attribute)": [[665, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[666, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[667, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[668, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[669, "polars.Series.cleared"]], "clip() (polars.series method)": [[670, "polars.Series.clip"]], "clip_max() (polars.series method)": [[671, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[672, "polars.Series.clip_min"]], "clone() (polars.series method)": [[673, "polars.Series.clone"]], "cos() (polars.series method)": [[674, "polars.Series.cos"]], "cosh() (polars.series method)": [[675, "polars.Series.cosh"]], "cummax() (polars.series method)": [[676, "polars.Series.cummax"]], "cummin() (polars.series method)": [[677, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[678, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[679, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[680, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[681, "polars.Series.describe"]], "diff() (polars.series method)": [[682, "polars.Series.diff"]], "dot() (polars.series method)": [[683, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[684, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[685, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[686, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[687, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[688, "polars.Series.dt.cast_time_zone"]], "day() (polars.series.dt method)": [[689, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[690, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[691, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[692, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[693, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[694, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[695, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[696, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[697, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[698, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[699, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[700, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[701, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[702, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[703, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[704, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[705, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[706, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[707, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[708, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[709, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[710, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[711, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[712, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[713, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[714, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[715, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[716, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[717, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[718, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[719, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[720, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[721, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[722, "polars.Series.dt.year"]], "dtype (polars.series property)": [[723, "polars.Series.dtype"]], "entropy() (polars.series method)": [[724, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[725, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[726, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[727, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[728, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[729, "polars.Series.exp"]], "explode() (polars.series method)": [[730, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[731, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[732, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[733, "polars.Series.fill_null"]], "filter() (polars.series method)": [[734, "polars.Series.filter"]], "flags (polars.series property)": [[735, "polars.Series.flags"]], "floor() (polars.series method)": [[736, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[737, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[738, "polars.Series.has_validity"]], "hash() (polars.series method)": [[739, "polars.Series.hash"]], "head() (polars.series method)": [[740, "polars.Series.head"]], "inner_dtype (polars.series property)": [[741, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[742, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[743, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[744, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[745, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[746, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[747, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[748, "polars.Series.is_first"]], "is_float() (polars.series method)": [[749, "polars.Series.is_float"]], "is_in() (polars.series method)": [[750, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[751, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[752, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[753, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[754, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[755, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[756, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[757, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[758, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[759, "polars.Series.is_utf8"]], "item() (polars.series method)": [[760, "polars.Series.item"]], "kurtosis() (polars.series method)": [[761, "polars.Series.kurtosis"]], "len() (polars.series method)": [[762, "polars.Series.len"]], "limit() (polars.series method)": [[763, "polars.Series.limit"]], "log() (polars.series method)": [[764, "polars.Series.log"]], "log10() (polars.series method)": [[765, "polars.Series.log10"]], "max() (polars.series method)": [[766, "polars.Series.max"]], "mean() (polars.series method)": [[767, "polars.Series.mean"]], "median() (polars.series method)": [[768, "polars.Series.median"]], "min() (polars.series method)": [[769, "polars.Series.min"]], "mode() (polars.series method)": [[770, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[771, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[772, "polars.Series.n_unique"]], "name (polars.series property)": [[773, "polars.Series.name"]], "nan_max() (polars.series method)": [[774, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[775, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[776, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[777, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[778, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[779, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[780, "polars.Series.peak_min"]], "product() (polars.series method)": [[781, "polars.Series.product"]], "quantile() (polars.series method)": [[782, "polars.Series.quantile"]], "rank() (polars.series method)": [[783, "polars.Series.rank"]], "rechunk() (polars.series method)": [[784, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[785, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[786, "polars.Series.rename"]], "reshape() (polars.series method)": [[787, "polars.Series.reshape"]], "reverse() (polars.series method)": [[788, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[789, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[790, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[791, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[792, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[793, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[794, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[795, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[796, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[797, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[798, "polars.Series.rolling_var"]], "round() (polars.series method)": [[799, "polars.Series.round"]], "sample() (polars.series method)": [[800, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[801, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[802, "polars.Series.series_equal"]], "set() (polars.series method)": [[803, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[804, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[805, "polars.Series.set_sorted"]], "shape (polars.series property)": [[806, "polars.Series.shape"]], "shift() (polars.series method)": [[807, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[808, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[809, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[810, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[811, "polars.Series.shuffle"]], "sign() (polars.series method)": [[812, "polars.Series.sign"]], "sin() (polars.series method)": [[813, "polars.Series.sin"]], "sinh() (polars.series method)": [[814, "polars.Series.sinh"]], "skew() (polars.series method)": [[815, "polars.Series.skew"]], "slice() (polars.series method)": [[816, "polars.Series.slice"]], "sort() (polars.series method)": [[817, "polars.Series.sort"]], "sqrt() (polars.series method)": [[818, "polars.Series.sqrt"]], "std() (polars.series method)": [[819, "polars.Series.std"]], "str (polars.series attribute)": [[820, "polars.Series.str"]], "concat() (polars.series.str method)": [[821, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[822, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[823, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[824, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[825, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[826, "polars.Series.str.ends_with"]], "extract() (polars.series.str method)": [[827, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[828, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[829, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[830, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[831, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[832, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[833, "polars.Series.str.n_chars"]], "replace() (polars.series.str method)": [[834, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[835, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[836, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[837, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[838, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[839, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[840, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[841, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[842, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[843, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[844, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[845, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[846, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[847, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[848, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[849, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[850, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[851, "polars.Series.struct.to_frame"]], "sum() (polars.series method)": [[852, "polars.Series.sum"]], "tail() (polars.series method)": [[853, "polars.Series.tail"]], "take() (polars.series method)": [[854, "polars.Series.take"]], "take_every() (polars.series method)": [[855, "polars.Series.take_every"]], "tan() (polars.series method)": [[856, "polars.Series.tan"]], "tanh() (polars.series method)": [[857, "polars.Series.tanh"]], "time_unit (polars.series property)": [[858, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[859, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[860, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[861, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[862, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[863, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[864, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[865, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[866, "polars.Series.top_k"]], "unique() (polars.series method)": [[867, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[868, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[869, "polars.Series.value_counts"]], "var() (polars.series method)": [[870, "polars.Series.var"]], "view() (polars.series method)": [[871, "polars.Series.view"]], "zip_with() (polars.series method)": [[872, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[887, "polars.SQLContext"]]}})